<?xml version="1.0" encoding="UTF-8" ?><!-- Created from PDF via Acrobat SaveAsXML --><!-- Mapping Table version: 28-February-2003 --><TaggedPDF-doc><?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/">
         <xmp:CreateDate>2004-09-26T07:21:06-08:00</xmp:CreateDate>
         <xmp:ModifyDate>2004-09-26T07:21:06-08:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>iText by lowagie.com (r1.02b;p128)</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>xml</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?><?xpacket end='r'?><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_0.jpg"/></Figure><P>July 1988 </P><Part><H3>NS32081-10/NS32081-15 Floating-Point Units 
</H3><Table><TR><TH>General Description </TH><TH>Features </TH></TR><TR><TD>The NS32081 Floating-Point Unit functions as a slave proc-</TD><TD>Y Eight on-chip data registers </TD></TR><TR><TD>essor in National Semiconductor’s Series 32000® micro-</TD><TD>Y 32-bit and 64-bit operations </TD></TR><TR><TD>processor family. It provides a high-speed floating-point in-</TD><TD>Y Supports </TD><TD>proposed </TD><TD>IEEE </TD><TD>standard </TD><TD>for </TD><TD>binary </TD><TD>floating</TD></TR><TR><TD>struction set for any Series 32000 family CPU, while remain-</TD><TD>point arithmetic, Task P754 </TD><TD/></TR><TR><TD>ing architecturally consistent with the full two-address archi-</TD><TD>Y Directly </TD><TD>compatible </TD><TD>with </TD><TD>NS32016, </TD><TD>NS32008 </TD><TD>and </TD></TR><TR><TD>tecture and powerful addressing modes of the Series 32000 </TD><TD>NS32032 CPUs </TD><TD/></TR><TR><TD>micro-processor family. </TD><TD>Y High-speed XMOSTM technology </TD><TD/></TR><TR><TD/><TD>Y Single 5V supply </TD><TD/></TR><TR><TD/><TD>Y 24-pin dual in-line package </TD><TD/></TR></Table><Sect><H5>Block Diagram 
</H5><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_1.jpg"/></Figure><Sect><P>TL/EE/5234–1 </P></Sect><P>TRI-STATE®and Series 32000®are registered trademarks of National Semiconductor Corp. XMOSTM is a trademark of National Semiconductor Corp. </P><Sect><P>NS32081-10/NS32081-15 Floating-Point Units 
</P></Sect></Sect><Sect><H5>Table of Contents 
</H5><Sect><H6>1.0 PRODUCT INTRODUCTION 3.0 FUNCTIONAL DESCRIPTION (Continued) </H6><Sect><H6>3.4 Bus Operation </H6><P>1.1 Operand Formats </P><P>3.4.1 Bus Cycles </P><P>1.1.1 Normalized Numbers </P><P>3.4.2 Operand Transfer Sequences </P><P>1.1.2 Zero </P><P>1.1.3 Reserved Operands 3.5 Instruction Protocols </P><P>1.1.4 Integers </P><P>3.5.1 General Protocol Sequence </P><P>1.1.5 Memory Representations </P><Sect><H6>3.5.2 Floating-Point Protocols </H6></Sect></Sect></Sect><Sect><H6>2.0 ARCHITECTURAL DESCRIPTION </H6><Sect><H6>4.0 DEVICE SPECIFICATIONS </H6><P>2.1 Programming Model </P><P>4.1 Pin Descriptions </P><Sect><H6>2.1.1 Floating-Point Registers </H6><P>4.1.1 Supplies </P></Sect><Sect><H6>2.1.2 Floating-Point Status Register (FSR) </H6><P>4.1.2 Input Signals </P><Sect><H6>2.1.2.1 FSR Mode Control Fields </H6><P>4.1.3 Input/Output Signals </P></Sect><Sect><H6>2.1.2.2 FSR Status Fields </H6><P>4.2 Absolute Maximum Ratings </P></Sect><Sect><H6>2.1.2.3 FSR Software Field (SWF) </H6><P>4.3 Electrical Characteristics </P></Sect></Sect></Sect><Sect><H6>2.2 Instruction Set </H6><P>4.4 Switching Characteristics </P><Sect><H6>2.2.1 General Instruction Format </H6><P>4.4.1 Definitions </P></Sect><Sect><H6>2.2.2 Addressing Modes </H6><P>4.4.2 Timing Tables </P></Sect><Sect><H6>2.2.3 Floating-Point Instruction Set </H6><Sect><P>4.4.2.1 Output Signals: Internal Propagation De</P><P>lays</P></Sect><P>2.3 Traps </P><Sect><P>4.4.2.2 Input Signals Requirements </P></Sect><P>3.0 FUNCTIONAL DESCRIPTION </P><Sect><P>4.4.2.3 Clocking Requirements </P></Sect><P>3.1 Power and Grounding </P><P>4.4.3 Timing Diagrams </P><P>3.2 Clocking </P><P>3.3 Resetting </P><Sect/><P>List of Illustrations 
</P><P>Floating-PointOperandFormats.................................................................................1-1 
RegisterSet...................................................................................................2-1 
TheFloating-PointStatusRegister...............................................................................2-2 
GeneralInstructionFormat......................................................................................2-3 
IndexByteFormat.............................................................................................2-4 
DisplacementEncodings........................................................................................2-5 
Floating-PointInstructionFormats................................................................................2-6 
RecommendedSupplyConnections..............................................................................3-1 
Power-OnResetRequirements..................................................................................3-2 
GeneralResetTiming..........................................................................................3-3 
SystemConnectionDiagram....................................................................................3-4 
SlaveProcessorReadCycle.....................................................................................3-5 
SlaveProcessorWriteCycle.....................................................................................3-6 
FPUProtocolStatusWordFormat................................................................................3-7 
Dual-In-LinePackage...........................................................................................4-1 
TimingSpecificationStandard(SignalValidAfterClockEdge)........................................................4-2 
TimingSpecificationStandard(SignalValidBeforeClockEdge)......................................................4-3 
ClockTiming..................................................................................................4-4 
Power-On-Reset...............................................................................................4-5 
Non-Power-On-Reset...........................................................................................4-6 
ReadCycleFromFPU..........................................................................................4-7 
WriteCycleToFPU............................................................................................4-8 
SPCPulsefromFPU...........................................................................................4-9 
RSTReleaseTiming..........................................................................................4-10 
</P><P>List of Tables 
SampleFFields...............................................................................................1-1 
SampleEFields...............................................................................................1-2 
NormalizedNumberRanges.....................................................................................1-3 
Series32000FamilyAddressingModes...........................................................................2-1 
GeneralInstructionProtocol.....................................................................................3-1 
Floating-PointInstructionProtocols...............................................................................3-2 
</P><P>3 </P><P>1.0 Product Introduction </P><Sect><P>TABLE 1-2. SampleEFields </P></Sect><P>The NS32081 Floating-Point Unit (FPU) provides high </P><P>speed floating-point operations for the Series 32000 family, EField F Field Represented Value and is fabricated using National high-speed XMOS technol</P><P>011...110 100...0 1.5c2b1 e 0.75 ogy. It operates as a slave processor for transparent expan</P><P>011...111 100...0 1.5c20 e 1.50 </P><P>sion of the Series 32000 CPU’s basic instruction set. The 100...000 100...0 1.5c21 e 3.00 </P><Sect><P>FPU can also be used with other microprocessors as a pe-</P><P>Two values of the E field are not exponents. 11...11 sig</P><P>ripheral device by using additional TTL interface logic. The nals a reserved operand (Section 2.1.3). 00...00 repre</P><P>NS32081 is compatible with the IEEE Floating-Point For</P><P>sents the number zero if the F field is also all zeroes, other-</P><P>mats by means of its hardware and software features. wise it signals a reserved operand. </P><Sect><H6>1.1 OPERAND FORMATS </H6><P>The S bit indicates the sign of the operand. It is 0 for posi-The NS32081 FPU operates on two floating-point data tive and 1 for negative. Floating-point numbers are in signtypesosingle precision (32 bits) and double precision (64 magnitude form, that is, only theS bit is complemented in </P><P>bits). Floating-point instruction mnemonics use the suffix F order to change the sign of the represented number. (Floating) to select the single precision data type, and the </P><Sect><H6>1.1.1 Normalized Numbers </H6><P>suffix L (Long Floating) to select the double precision data type. Normalized numbers are numbers which can be expressed as floating-point operands, as described above, where theE </P><P>A floating-point number is divided into three fields, as shown field is neither all zeroes nor all ones. </P><P>in Figure1-1. The value of a Normalized number can be derived by the </P><P>The F field is the fractional portion of the represented num</P><P>formula:</P><P>ber. In Normalized numbers (Section 1.1.1), the binary point 
is assumed to be immediately to the left of the most signifi-(b1)S c (1 a F)
</P><P>c 2(E-Bias) </P><P>cant bit of the F field, with an implied 1 bit to the left of the The range of Normalized numbers is given in Table 1-3. binary point. Thus, theF field represents values in the range </P></Sect><Sect><H6>1.1.2 Zero</H6><P>1.0 	s x s 2.0. There are two representations for zeroopositive and nega-</P><Sect><P>TABLE 1-1. SampleFFields </P></Sect><P>tive. Positive zero has all-zeroF andE fields, and theS bit is FField Binary Value Decimal Value zero. Negative zero also has all-zeroF andE fields, but itsS </P><P>bit is one. </P><P>000...0 1.000...0 1.000...0 </P><P>010...0 1.010...0 1.250...0 1.1.3 Reserved Operands 
100...0 1.100...0 1.500...0 
</P><P>The proposed IEEE Standard for Binary Floating-Point Arith110...0 1.110...0 1.750...0 metic (Task P754) provides for certain exceptional forms of u floating-point operands. The NS32081 FPU treats these </P><P>forms as reserved operands. The reserved operands are: Implied Bit </P><P>• Positive and negative infinity </P><P>The E field contains an unsigned number that gives the binary exponent of the represented number. The value in the • Not-a-Number (NaN) values E field is biased; that is, a constant bias value must be sub-• Denormalized numbers tracted from the E field value in order to obtain the true </P><P>Both Infinity and NaN values have all ones in their E fields. </P><P>exponent. The bias value is 011...112, which is either 127 Denormalized numbers have all zeroes in their E fields and </P><P>(single precision) or 1023 (double precision). Thus, the true non-zero values in their F fields. </P><P>exponent can be either positive or negative, as shown in The NS32081 FPU causes an Invalid Operation trap (Sec-Table 1-2. </P><P>tion 2.1.2.2) if it receives a reserved operand, unless the operation is simply a move (without conversion). The FPU does not generate reserved operands as results. </P><P>Single Precision </P><P>3130 2322 	0 </P><Table><TR><TH>S </TH><TH>E </TH><TH>F </TH></TR></Table><P>18 23 </P><P>Double Precision 6362 5251 0 </P><Table><TR><TH>S </TH><TH>E </TH><TH>F </TH></TR></Table><P>1 11 	52 </P><P>FIGURE 1-1. Floating-Point Operand Formats </P><Sect/><P>1.0 Product Introduction (Continued) </P><P>TABLE 1-3. Normalized Number Ranges </P><Table><TR><TD>Most Positive </TD><TD>Single Precision 2127c(2b2b23) e3.40282346 c1038 </TD><TD>Double Precision 21023c(2b2b52) e1.7976931348623157 c10308 </TD></TR><TR><TD>Least Positive </TD><TD>2b126 </TD><TD>2b1022 </TD></TR><TR><TD/><TD>e1.17549436 c10b38 </TD><TD>e2.2250738585072014 c10b308 </TD></TR><TR><TD>Least Negative </TD><TD>b(2b126) eb1.17549436 c10b38 </TD><TD>b(2b1022) eb2.2250738585072014 c10b308 </TD></TR><TR><TD>Most Negative </TD><TD>b2127c(2b2b23) eb3.40282346 c1038 </TD><TD>b21023c(2b2b52) eb1.7976931348623157 c10308 </TD></TR></Table><P>Note: The values given are extended one full digit beyond their represented accuracy to help in generating rounding and conversion algorithms. </P></Sect><Sect><H6>1.1.4 Integers </H6><P>In addition to performing floating-point arithmetic, the NS32081 FPU performs conversions between integer and floating-point data types. Integers are accepted or generated by the FPU as two’s complement values of byte (8 bits), word (16 bits) or double word (32 bits) length. </P></Sect><Sect><H6>1.1.5 Memory Representations </H6><P>The NS32081 FPU does not directly access memory. However, it is cooperatively involved in the execution of a set of two-address instructions with its Series 32000 Family CPU. The CPU determines the representation of operands in memory. </P><P>In the Series 32000 family of CPUs, operands are stored in memory with the least significant byte at the lowest byte address. The only exception to this rule is the Immediate addressing mode, where the operand is held (within the instruction format) with the most significant byte at the lowest address. </P><P>2.0 Architectural Description </P><P>2.1 PROGRAMMING MODEL </P><P>The Series 32000 architecture includes nine registers that are implemented on the NS32081 Floating-Point Unit (FPU). </P><Sect><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_2.jpg"/><Caption><P>TL/EE/5234 –4 </P><P>FIGURE 2-1. Register Set </P></Caption></Figure></Sect><P>2.1.1 Floating-Point Registers </P><P>There are eight registers (F0 –F7) on the NS32081 FPU for providing high-speed access to floating-point operands. Each is 32 bits long. A floating-point register is referenced whenever a floating-point instruction uses the Register addressing mode (Section 2.2.2) for a floating-point operand. All other Register mode usages (i.e., integer operands) refer to the General Purpose Registers (R0–R7) of the CPU, and the FPU transfers the operand as if it were in memory. When the Register addressing mode is specified for a double precision (64-bit) operand, a pair of registers holds the operand. The programmer must specify the even register of the pair. The even register contains the least significant half of the operand and the next consecutive register contains the most significant half. </P><P>2.1.2 Floating-Point Status Register (FSR) </P><P>The Floating-Point Status Register (FSR) selects operating modes and records any exceptional conditions encountered during execution of a floating-point operation. Figure 2-2 shows the format of the FSR. </P><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_3.jpg"/></Figure><Sect><P>TL/EE/5234 –5 </P><P>FIGURE 2-2. The Floating-Point Status Register </P></Sect><P>2.1.2.1 FSR Mode Control Fields </P><P>The FSR mode control fields select FPU operation modes. The meanings of the FSR mode control bits are given below. </P><P>Rounding Mode (RM): Bits 7 and 8. This field selects the rounding method. Floating-point results are rounded whenever they cannot be exactly represented. The rounding modes are: </P><P>00 Round to nearest value. The value which is nearest to the exact result is returned. If the result is exactly halfway between the two nearest values the even value (LSBe0) is returned. </P><P>01 Round toward zero. The nearest value which is closer to zero or equal to the exact result is returned. </P><P>5 </P><P>2.0 Architectural Description (Continued) 10 Round toward positive infinity. The nearest value which is greater than or equal to the exact result is returned. 11 Round toward negative infinity. The nearest value which is less than or equal to the exact result is returned. Underflow Trap Enable (UEN): Bit 3. If this bit is set, the FPU requests a trap whenever a result is too small in absolute value to be represented as a normalized number. If it is </P><P>not set, any underflow condition returns a result of exactly 
zero. 
Inexact Result Trap Enable (IEN): Bit 5. If this bit is set, 
</P><P>the FPU requests a trap whenever the result of an operation cannot be represented exactly in the operand format of the destination. If it is not set, the result is rounded according to the selected rounding mode. </P><P>2.1.2.2 FSR Status Fields </P><P>The FSR Status Fields record exceptional conditions encountered during floating-point data processing. The meanings of the FSR status bits are given below: </P><P>Trap Type (TT): bits 0-2. This 3-bit field records any exceptional condition detected by a floating-point instruction. The TT field is loaded with zero whenever any floating-point instruction except LFSR or SFSR completes without encountering an exceptional condition. It is also set to zero by a hardware reset or by writing zero into it with the Load FSR (LFSR) instruction. Underflow and Inexact Result are always reported in the TT field, regardless of the settings of the UEN and IEN bits. </P><P>000 No exceptional condition occurred. 001 Underflow. A non-zero floating-point result is too small in magnitude to be represented as a normalized floating-point number in the format of the destination operand. This condition is always reported in the TT field and UF bit, but causes a trap only if the UEN bit is set. If the UEN bit is not set, a result of Positive Zero is produced, and no trap occurs. 010 Overflow. A result (either floating-point or integer) of a floating-point instruction is too great in magnitude to be held in the format of the destination operand. Note that rounding, as well as calculations, can cause this condition. 011 Divide by zero. An attempt has been made to divide a non-zero floating-point number by zero. Dividing zero by zero is considered an Invalid Operation instead (below). </P><P>100 Illegal Instruction. Two undefined floating-point instruction forms are detected by the FPU as being illegal. The binary formats causing this trap are: </P><Sect><P>xxxxxxxxxx0011xx10111110 </P><P>xxxxxxxxxx1001xx10111110 </P></Sect><P>101 Invalid Operation. One of the floating-point operands of </P><P>a floating-point instruction is a Reserved operand, or an </P><P>attempt has been made to divide zero by zero using the </P><P>DIVf instruction. </P><P>110 Inexact Result. The result (either floating-point or inte</P><P>ger) of a floating-point instruction cannot be represent</P><P>ed exactly in the format of the destination operand, and </P><P>a rounding step must alter it to fit. This condition is al</P><P>ways reported in the TT field and IF bit unless any other </P><P>exceptional condition has occurred in the same instruc</P><P>tion. In this case, the TT field always contains the code </P><P>for the other exception and the IF bit is not altered. A </P><P>trap is caused by this condition only if the IEN bit is set; </P><P>otherwise the result is rounded and delivered, and no </P><P>trap occurs. 111 (Reserved for future use.) Underflow Flag (UF): Bit 4. This bit is set by the FPU when</P><P>ever a result is too small in absolute value to be represented as a normalized number. Its function is not affected by the state of the UEN bit. The UF bit is cleared only by writing a zero into it with the Load FSR instruction or by a hardware reset. </P><P>Inexact Result Flag (IF): Bit 6. This bit is set by the FPU whenever the result of an operation must be rounded to fit within the destination format. The IF bit is set only if no other error has occurred. It is cleared only by writing a zero into it with the Load FSR instruction or by a hardware reset. </P><P>2.1.2.3 FSR Software Field (SWF) </P><P>Bits 9-15 of the FSR hold and display any information written to them (using the LFSR and SFSR instructions), but are not otherwise used by FPU hardware. They are reserved for use with NSC floating-point extension software. </P><P>2.2 INSTRUCTION SET </P><P>2.2.1 General Instruction Format </P><P>Figure 2-3 shows the general format of an Series 32000 instruction. The Basic Instruction is one to three bytes long </P><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_4.jpg"/><Caption><P>FIGURE 2-3. General Instruction Format </P></Caption></Figure><Sect><P>TL/EE/5234 –6 </P></Sect><P>2.0 Architectural Description (Continued) and contains the opcode and up to two 5-bit General Addressing Mode (Gen) fields. Following the Basic Instruction field is a set of optional extensions, which may appear de</P><P>pending on the instruction and the addressing modes selected. The only form of extension issued to the NS32081 FPU is </P><P>an Immediate operand. Other extensions are used only by the CPU to reference memory operands needed by the FPU. </P><P>Index Bytes appear when either or both Gen fields specify Scaled Index. In this case, the Gen field specifies only the Scale Factor (1, 2, 4 or 8), and the Index Byte specifies which General Purpose Register to use as the index, and which addressing mode calculation to perform before indexing. See Figure2-4. </P><P>Following Index Bytes come any displacements (addressing constants) or immediate values associated with the selected addressing modes. Each Disp/lmm field may contain one or two displacements, or one immediate value. The size of a Displacement field is encoded within the top bits of that field, as shown in Figure 2-5, with the remaining bits interpreted as a signed (two’s complement) value. The size of an immediate value is determined from the Opcode field. Both Displacement and Immediate fields are stored most significant byte first. </P><P>Some non-FPU instructions require additional, ‘‘implied’’ immediates and/or displacements, apart from those associated with addressing modes. Any such extensions appear at the end of the instruction, in the order that they appear within the list of operands in the instruction definition. </P><P>2.2.2 Addressing Modes </P><P>The Series 32000 Family CPUs generally access an operand by calculating its Effective Address based on information available when the operand is to be accessed. The method to be used in performing this calculation is specified by the programmer as an ‘‘addressing mode.’’ </P><P>Addressing modes in the Series 32000 family are designed to optimally support high-level language accesses to variables. In nearly all cases, a variable access requires only one addressing mode within the instruction which acts upon that variable. Extraneous data movement is therefore minimized. </P><P>Series 32000 Addressing Modes fall into nine basic types: Register: In floating-point instructions, these addressing modes refer to a Floating-Point Register (F0 –F7) if the op</P><P>erand is of a floating-point type. Otherwise, a CPU General Purpose Register(R0 –R7)is referenced.See Section 2.1.1. Register Relative: A CPU General Purpose Register con</P><P>tains an address to which is added a displacement value from the instruction, yielding the Effective Address of the operand in memory. </P><Sect><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_5.jpg"/></Figure><P>TL/EE/5234 –7 </P><P>FIGURE 2-4. Index Byte Format </P></Sect><P>Memory Space: Identical to Register Relative above, except that the register used is one of the dedicated CPU registers PC, SP, SB or FP. These registers point to data areas generally needed by high-level languages. </P><P>Memory Relative: A pointer variable is found within the memory space pointed to by the CPU SP, SB or FP register. A displacement is added to that pointer to generate the Effective Address of the operand. </P><P>Immediate: The operand is encoded within the instruction. This addressing mode is not allowed if the operand is to be written. Floating-point operands as well as integer operands may be specified using Immediate mode. </P><P>Absolute: The address of the operand is specified by a </P><P>Displacement field in the instruction. 
External: A pointer value is read from a specified entry of 
the current Link Table. To this pointer value is added a displacement, yielding the Effective Address of the operand. 
</P><P>Top of Stack: The currently-selected CPU Stack Pointer (SP0 or SP1) specifies the location of the operand. The operand is pushed or popped, depending on whether it is written or read. </P><P>Scaled Index: Although encoded as an addressing mode, Scaled Indexing is an option on any addressing mode except Immediate or another Scaled Index. It has the effect of calculating an Effective Address, then multiplying any General Purpose Register by 1, 2, 4 or 8 and adding it into the total, yielding the final Effective Address of the operand. </P><P>The following table, Table 2-1, is a brief summary of the addressing modes. For a complete description of their actions, see the Series 32000 Instruction Set Reference Manual. </P><Sect><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_6.jpg"/><Caption><P>FIGURE 2-5. Displacement Encodings </P></Caption></Figure><P>TL/EE/5234 –10 </P></Sect><P>7 </P><P>2.0 Architectural Description (Continued) </P><P>TABLE 2-1. Series 32000 Family Addressing Modes </P><Table><TR><TD>Encoding </TD><TD>Mode </TD><TD>Assembler Syntax </TD><TD>Effective Address </TD></TR><TR><TD>REGISTER </TD><TD/><TD/><TD/></TR><TR><TD>00000 </TD><TD>Register 0 </TD><TD>R0 or F0 </TD><TD>None: Operand is in the specified register. </TD></TR><TR><TD>00001 </TD><TD>Register 1 </TD><TD>R1 or F1 </TD><TD/></TR><TR><TD>00010 </TD><TD>Register 2 </TD><TD>R2 or F2 </TD><TD/></TR><TR><TD>00011 </TD><TD>Register 3 </TD><TD>R3 or F3 </TD><TD/></TR><TR><TD>00100 </TD><TD>Register 4 </TD><TD>R4 or F4 </TD><TD/></TR><TR><TD>00101 </TD><TD>Register 5 </TD><TD>R5 or F5 </TD><TD/></TR><TR><TD>00110 </TD><TD>Register 6 </TD><TD>R6 or F6 </TD><TD/></TR><TR><TD>00111 </TD><TD>Register 7 </TD><TD>R7 or F7 </TD><TD/></TR><TR><TD>REGISTER RELATIVE </TD><TD/><TD/></TR><TR><TD>01000 </TD><TD>Register 0relative </TD><TD>disp(R0) </TD><TD>Disp a Register. </TD></TR><TR><TD>01001 </TD><TD>Register 1relative </TD><TD>disp(R1) </TD><TD/></TR><TR><TD>01010 </TD><TD>Register 2relative </TD><TD>disp(R2) </TD><TD/></TR><TR><TD>01011 </TD><TD>Register 3relative </TD><TD>disp(R3) </TD><TD/></TR><TR><TD>01100 </TD><TD>Register 4relative </TD><TD>disp(R4) </TD><TD/></TR><TR><TD>01101 </TD><TD>Register 5relative </TD><TD>disp(R5) </TD><TD/></TR><TR><TD>01110 </TD><TD>Register 6relative </TD><TD>disp(R6) </TD><TD/></TR><TR><TD>01111 </TD><TD>Register 7relative </TD><TD>disp(R7) </TD><TD/></TR><TR><TD>MEMORY SPACE </TD><TD/><TD/><TD/></TR><TR><TD>11000 </TD><TD>Frame memory </TD><TD>disp(FP) </TD><TD>Disp a Register; ‘‘SP’’ is either </TD></TR><TR><TD>11001 </TD><TD>Stack memory </TD><TD>disp(SP) </TD><TD>SP0 or SP1, as selected in PSR. </TD></TR><TR><TD>11010 </TD><TD>Static memory </TD><TD>disp(SB) </TD><TD/></TR><TR><TD>11011 </TD><TD>Program memory </TD><TD>*adisp </TD><TD/></TR><TR><TD>MEMORY RELATIVE </TD><TD/><TD/></TR><TR><TD>10000 </TD><TD>Frame memory relative </TD><TD>disp2(disp1(FP)) </TD><TD>Disp2aPointer; Pointer found at </TD></TR><TR><TD>10001 </TD><TD>Stack memory relative </TD><TD>disp2(disp1(SP)) </TD><TD>address Disp1 aRegister. ‘‘SP’’ is </TD></TR><TR><TD>10010 </TD><TD>Static memory relative </TD><TD>disp2(disp1(SB)) </TD><TD>either SP0 or SP1, as selected in PSR. </TD></TR><TR><TD>IMMEDIATE </TD><TD/><TD/><TD/></TR><TR><TD>10100 </TD><TD>Immediate </TD><TD>value </TD><TD>None: Operand is issued from </TD></TR><TR><TD/><TD/><TD/><TD>CPU instruction queue. </TD></TR><TR><TD>ABSOLUTE </TD><TD/><TD/><TD/></TR><TR><TD>10101 </TD><TD>Absolute </TD><TD>©disp </TD><TD>Disp. </TD></TR><TR><TD>EXTERNAL </TD><TD/><TD/><TD/></TR><TR><TD>10110 </TD><TD>External </TD><TD>EXT (disp1)adisp2 </TD><TD>Disp2aPointer; Pointer is found </TD></TR><TR><TD/><TD/><TD/><TD>at Link Table Entry number Disp1. </TD></TR><TR><TD>TOP OF STACK </TD><TD/><TD/><TD/></TR><TR><TD>10111 </TD><TD>Top of Stack </TD><TD>TOS </TD><TD>Top of current stack, using either </TD></TR><TR><TD/><TD/><TD/><TD>User or Interrupt Stack Pointer, </TD></TR><TR><TD/><TD/><TD/><TD>as selected in PSR. Automatic </TD></TR><TR><TD/><TD/><TD/><TD>Push/Pop included. </TD></TR><TR><TD>SCALED INDEX </TD><TD/><TD/><TD/></TR><TR><TD>11100 </TD><TD>Index, bytes </TD><TD>mode [Rn:B] </TD><TD>Mode a Rn. </TD></TR><TR><TD>11101 </TD><TD>Index, words </TD><TD>mode [Rn:W] </TD><TD>Mode a 2 c Rn. </TD></TR><TR><TD>11110 </TD><TD>Index, double words </TD><TD>mode [Rn:D] </TD><TD>Mode a 4 c Rn. </TD></TR><TR><TD>11111 </TD><TD>Index, quad words </TD><TD>mode [Rn:Q] </TD><TD>Mode a 8 c Rn. </TD></TR><TR><TD/><TD/><TD/><TD>‘‘Mode’’ and ‘‘n’’ are contained </TD></TR><TR><TD/><TD/><TD/><TD>within the Index Byte. </TD></TR><TR><TD>10011 </TD><TD>(Reserved for Future Use) </TD><TD/><TD/></TR></Table><Sect/><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_7.jpg"/></Figure><P>2.0 Architectural Description (Continued) </P><P>2.2.3 Floating-Point Instruction Set Movement and Conversion </P><P>The NS32081 FPU instructions occupy formats 9 and 11 of The following instructions move the gen1 operand to the the Series 32000 Family instruction set(Figure2-6 ).A list gen2 operand, leaving the gen1 operand intact. of all Series 32000 family instruction formats is found in the applicable CPU data sheet. Format Op Instruction Description </P><P>Certain notations in the following instruction description ta-11 0001 MOVf gen1, gen2 Move without bles serve to relate the assembly language form of each conversion instruction to its binary format in Figure2-6. </P><Sect><P>9 010 MOVLF gen1, gen2 Move, converting </P><P>from double precision to single precision. </P></Sect><P>9 011 MOVFL gen1, gen2 Move, converting from single TL/EE/5234 –11 precision to double </P><Sect><P>Format9 </P><P>Format 11 </P><P>precision. 9 000 MOVif gen1, gen2 Move, converting from any integer type to any floating-point </P></Sect><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_8.jpg"/></Figure><Sect><P>TL/EE/5234 –12 </P></Sect><P>type. FIGURE 2-6. Floating-Point Instruction Formats 9 100 ROUNDfi gen1, gen2 Move, converting from floating-point to the </P><P>The Format column indicates which of the two formats in </P><P>Figure2-6 represents each instruction. nearest integer. The Op column indicates the binary pattern for the field 9 101 TRUNCfi gen1, gen2 Move, converting called ‘‘op’’ in the applicable format. from floating-</P><P>The Instruction column gives the form of each instruction as point to the it appears in assembly language. The form consists of an nearest integer instruction mnemonic in upper case, with one or more suffix-</P><Sect><P>closer to zero. </P></Sect><P>es (i or f) indicating data types, followed by a list of oper9 111 FLOORfi gen1, gen2 Move, converting ands (gen1, gen2). </P><Sect/><Sect><P>from floating-An i suffix on an instruction mnemonic indicates a choice of point to the integer data types. This choice affects the binary pattern in largest integer theifieldof the corresponding instruction format(Figure2-6 ) as follows: </P></Sect><Sect/><Sect/><P>less than or equal to its Suffixi Data Type i Field value. B Byte 00 </P><P>Note: The MOVLF instruction f bit must be 1 and the i field must be 10. W Word 01 </P><P>The MOVFL instruction f bit must be 0 and the i field must be 11. D Double Word 11 </P><P>Arithmetic Operations </P><P>An f suffix on an instruction mnemonic indicates a choice of floating-point data types. This choice affects the setting of The following instructions perform floating-point arithmetic thef bitof the corresponding instruction format(Figure2-6 ) operations on the gen1 and gen2 operands, leaving the re-as follows: sult in the gen2 operand. </P><P>Format Op Instruction DescriptionSuffixf Data Type fBit </P><P>11 0000 ADDf gen1, gen2 Add gen1 to gen2. L Double Precision (Long) 0 F Single Precision 1 </P><Sect/><P>11 0100 SUBf gen1, gen2 Subtract gen1 from gen2. An operand designation (gen1, gen2) indicates a choice of 11 1100 MULf gen1, gen2 Multiply gen2 by addressing mode expressions. This choice affects the bina</P><Sect><P>gen1. </P></Sect><P>ry pattern in the corresponding gen1 or gen2 field of the 11 1000 DIVf gen1, gen2 Divide gen2 by </P><Sect/><P>instruction format(Figure2-6 ). Refer to Table 2-1 for the gen1.</P><Sect/><P>options available and their patterns. </P><Sect><P>11 0101 NEGf gen1, gen2 Move negative of </P></Sect><P>Further details of the exact operations performed by each gen1 to gen2. </P><Sect/><P>instruction are found in the Series 32000 Instruction Set 11 1101 ABSf gen1, gen2 Move absolute Reference Manual. </P><Sect/><Sect><P>value of gen1 to gen2. </P></Sect><P>9 </P><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_9.jpg"/></Figure><P>2.0 Architectural Description (Continued) </P><P>Comparison 3.2 CLOCKING </P><P>The Compare instruction compares two floating-point val-</P><P>The NS32081 FPU requires a single-phase TTL clock input ues, sending the result to the CPU PSRZ andN bits for use </P><P>on its CLK pin (pin 14). When the FPU is connected to a as condition codes. See Figure 3-7. The Z bit is set if the </P><P>Series 32000 CPU, the CLK signal is provided from the gen1 and gen2 operands are equal; it is cleared otherwise. </P><P>CTTL pin of the NS32201 Timing Control Unit. TheN bit is set if the gen1 operand is greater than the gen2 </P><P>operand; it is cleared otherwise. The CPU PSR L bit is un</P><P>3.3 RESETTING </P><P>conditionally cleared. Positive and negative zero are consid-The RST pin serves as a reset for on-chip logic. The FPU ered equal. may be reset at any time by pulling the RST pin low for at least 64 clock cycles. Upon detecting a reset, the FPU ter-</P><Sect><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_10.jpg"/></Figure></Sect><P>Format Op Instruction Description </P><P>minates instruction processing, resets its internal logic, and 11 0010 CMPf gen1, gen2 Compare gen1 clears the FSR to all zeroes. to gen2. </P><Sect><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_11.jpg"/></Figure></Sect><P>On application of power, RST must be held low for at least 50 ms after VCC is stable. This ensures that all on-chip volt</P><P>Floating-Point Status Register Access </P><P>ages are completely stable before operation. SeeFigures3-2 The following instructions load and store the FSR as a 32-and 3-3. bit integer. </P><P>Format Op Instruction Description </P><P>9 001 LFSR gen1 Load FSR </P><P>9 110 SFSR gen2 Store FSR </P><P>2.3 TRAPS </P><P>Upon detecting an exceptional condition in executing a floating-point instruction, the NS32081 FPU requests a trap by setting theQbit of the status word transferred during the slave protocol (Section 3.5). The CPU responds by performing a trap using a default vector value of 3. See the Series 32000 Instruction Set Reference Manual and the applicable CPU data sheet for trap service details. </P><P>A trapped floating-point instruction returns no result, and does not affect the CPU Processor Status Register (PSR). The FPU displays the reason for the trap in the Trap Type (TT) field of the FSR (Section 2.1.2.2). </P><P>3.0 Functional Description </P><Sect><P>TL/EE/5234 –15 </P></Sect><P>3.1 POWER AND GROUNDING </P><P>The NS32081 requires a single 5V power supply, applied on pin 24 (VCC). See DC Electrical Characteristics table. </P><P>3.4 BUS OPERATION </P><P>Instructions and operands are passed to the NS32081 FPU Grounding connections are made on two pins. Logic Ground with slave processor bus cycles. Each bus cycle transfers (GNDL, pin 12) is the common pin for on-chip logic, and either one byte (8 bits) or one word (16 bits) to or from the Buffer Ground (GNDB, pin 13) is the common pin for the FPU. During all bus cycles, the SPC line is driven by the output drivers. For optimal noise immunity, it is recommend-CPU as an active low data strobe, and the FPU monitors ed that GNDL be attached through a single conductor di</P><Sect><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_12.jpg"/></Figure></Sect><P>rectly to GNDB, and that all other grounding connections be made only to GNDB, as shown below(Figure3-1). </P><Sect><P>TL/EE/5234 –13 </P></Sect><P>FIGURE 3-1. Recommended Supply Connections </P><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_13.jpg"/><Caption><P>FIGURE 3-3. General Reset Timing </P></Caption></Figure><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_14.jpg"/><Caption><P>TL/EE/5234 –14 </P><P>FIGURE 3-2. Power-On Reset Requirements </P></Caption></Figure><Sect><P>TL/EE/5234 –2 </P></Sect><P>FIGURE 3-4. System Connection Diagram </P><Sect><P>10 </P></Sect><P>3.0 Functional Description (Continued) pins ST0 and ST1 to keep track of the sequence (protocol) established for the instruction being executed. This is nec</P><P>essary in a virtual memory environment, allowing the FPU to retry an aborted instruction. </P><P>3.4.1 Bus Cycles </P><P>A bus cycle is initiated by the CPU, which asserts the proper status on ST0 and ST1 and pulses SPC low. ST0 and ST1 are sampled by the FPU on the leading (falling) edge of the SPC pulse. If the transfer is from the FPU (a slave processor read cycle), the FPU asserts data on the data bus for the duration of the SPC pulse. If the transfer is to the FPU (a slave processor write cycle), the FPU latches data from the data bus on the trailing (rising) edge of the SPC pulse. Fig</P><P>ures3-5 and 3-6 illustrate these sequences. </P><P>The direction of the transfer and the role of the bidirectional </P><P>SPC line are determined by the instruction protocol being </P><P>performed. SPC is always driven by the CPU during slave </P><P>processor bus cycles. Protocol sequences for each instruc</P><P>tion are given in Section 3.5. </P><P>3.4.2 Operand Transfer Sequences </P><P>An operand is transferred in one or more bus cycles. A 1byte operand is transferred on the least significant byte of the data bus (D0 – D7). A 2-byte operand is transferred on the entire bus. A 4-byte or 8-byte operand is transferred in consecutive bus cycles, least significant word first. </P><P>3.5 INSTRUCTION PROTOCOLS </P><P>3.5.1 General Protocol Sequence </P><P>Slave Processor instructions have a three-byte Basic Instruction field, consisting of an ID byte followed by an Operation Word. See Section 2.2.3 for FPU instruction encodings. The ID Byte has three functions: </P><P>1) It identifies the instruction to the CPU as being a Slave Processor instruction. </P><P>2) It specifies which Slave Processor will execute it. 3) It determines the format of the following Operation Word of the instruction. </P><P>Upon receiving a Slave Processor instruction, the CPU initiates the sequence outlined in Table 3-2. While applying Status Code 11 (Broadcast ID. Table 3-1), the CPU transfers the ID Byte on the least significant half of the Data Bus (D0–D7). All Slave Processors input this byte and decode it. The Slave Processor selected by the ID Byte is activated, and from this point the CPU is communicating only with it. If any other slave protocol was in progress (e.g., an aborted Slave instruction), this transfer cancels it. </P><P>The CPU next sends the Operation Word while applying Status Code 01 (Transfer Slave Operand, Table 3-1). Upon receiving it, the FPU decodes it, and at this point both the CPU and the FPU are aware of the number of operands to be transferred and their sizes. The Operation Word is swapped on the Data Bus; that is, bits 0 –7 appear on pins D8– D15, and bits 8 –15 appear on pins D0 – D7. </P><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_15.jpg"/></Figure><Sect><P>TL/EE/5234 –16 </P></Sect><P>Note 1: FPU samples CPU status here. FIGURE 3-5. Slave Processor Read Cycle </P><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_16.jpg"/></Figure><P>TL/EE/5234 –17 Note 1: FPU samples CPU status here. Note 2: FPU samples data bus here. </P><P>FIGURE 3-6. Slave Processor Write Cycle </P><Sect><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_17.jpg"/></Figure><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_18.jpg"/></Figure></Sect><P>3.0 Functional Description (Continued) </P><P>Using the Addressing Mode fields within the Operation TABLE 3-1. General Instruction Protocol Word, the CPU starts fetching operands and issuing them to </P><P>Step Status Action </P><P>the FPU. To do so, it references any Addressing Mode ex1 11 CPU sends ID Byte. </P><P>tensions appended to the FPU instruction. Since the CPU is 2 01 CPU sends Operation Word. </P><P>solely responsible for memory accesses, these extensions 3 01 CPU sends required operands. </P><P>are not sent to the Slave Processor. The Status Code applied is 01 (Transfer Slave Processor Operand, Table 3-1). </P><P>4 XX FPU starts execution. 5 XX FPU pulses SPC low.</P><P>After the CPU has issued the last operand, the FPU starts the actual execution of the instruction. Upon completion, it </P><P>6 10 CPU reads Status Word. will signal the CPU by pulsing SPC low. To allow for this, the 7 01 CPU reads result (if any). CPU releases the SPC signal, causing it to float. SPC must </P><Sect><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_19.jpg"/></Figure><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_20.jpg"/></Figure></Sect><P>3.5.2 Floating-Point Protocols </P><P>be held high by an external pull-up resistor. </P><P><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_21.jpg"/></Figure>Table 3-2 gives the protocols followed for each floating-Upon receiving the pulse on SPC, the CPU uses SPC to point instruction. The instructions are referenced by their read a Status Word from the FPU, applying Status Code 10. </P><Sect><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_22.jpg"/></Figure></Sect><P>mnemonics. For the bit encodings of each instruction, see This word has the format shown in Figure 3-7.IftheQbit </P><P>Section 2.2.3. </P><P>(‘‘Quit’’, Bit 0) is set, this indicates that an error has been The Operand Class columns give the Access Classes fordetected by the FPU. The CPU will not continue the protoeach general operand, defining how the addressing modes col, but will immediately trap through the Slave vector in the are interpreted by the CPU (see Series 32000 InstructionInterrupt Table. If the instruction being performed is CMPf Set Reference Manual). </P><P>(Section 2.2.3) and theQ bit is not set, the CPU loads Processor Status Register (PSR) bits N, Z and L from the corre-The Operand Issued columns show the sizes of the opersponding bits in the Status Word. The NS32081 FPU always ands issued to the Floating-Point Unit by the CPU. ‘‘D’’ indisets the L bit to zero. cates a 32-bit Double Word. ‘‘i’’ indicates that the instruction </P><P>specifies an integer size for the operand (B e Byte, W e Word, D e Double Word). ‘‘f’’ indicates that the instruction specifies a floating-point size for the operand (F e 32-bit Standard Floating, L e 64-bit Long Floating). </P><P><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_23.jpg"/></Figure>The Returned Value Type and Destination column gives the size of any returned value and where the CPU places it. The TL/EE/5234 –18 PSR Bits Affected column indicates which PSR bits, if any, FIGURE 3-7. FPU Protocol Status Word Format are updated from the Slave Processor Status Word(Figure </P><P>3-7).</P><P>The last step in the protocol is for the CPU to read a result, if any, and transfer it to the destination. The Read cycles Any operand indicated as being of type ‘‘f’’ will not cause a from the FPU are performed by the CPU while applying transfer if the Register addressing mode is specified, be-Status Code 01 (Section 4.1.2). cause the Floating-Point Registers are physically on the Floating-Point Unit and are therefore available without CPU assistance. </P><P>TABLE 3-2. Floating Point Instruction Protocols </P><P>Operand1 Operand2 Operand1 Operand2 Returned Value PSR Bits Mnemonic Class Class Issued Issued Type and Dest. Affected </P><P>ADDf read.f rmw.f f f fto Op.2 none SUBf read.f rmw.f f f fto Op.2 none MULf read.f rmw.f f f fto Op.2 none DIVf read.f rmw.f f f fto Op.2 none MOVf read.f write.f f N/A fto Op.2 none ABSf read.f write.f f N/A fto Op.2 none NEGf read.f write.f f N/A fto Op.2 none CMPf read.f read.f f f N/A N,Z,L FLOORfi read.f write.i f N/A itoOp.2 none TRUNCfi read.f write.i f N/A itoOp.2 none ROUNDfi read.f write.i f N/A itoOp.2 none MOVFL read.F write.L F N/A Lto Op.2 none MOVLF read.L write.F L N/A Fto Op.2 none MOVif read.i write.f i N/A ftoOp.2 none LFSR read.D N/A D N/A N/A none SFSR N/A write.D N/A N/A DtoOp.2 none </P><P>D e Double Word </P><P>i e Integer size (B, W, D) specified in mnemonic. </P><P>f e Floating-Point type (F, L) specified in mnemonic. </P><P>N/A e Not Applicable to this instruction. </P><Sect><P>12 </P></Sect><P>4.1.1 Supplies</P><P>4.0 Device Specifications </P><P>Power (VCC): a5V positive supply. Section 3.1. </P><P>4.1 PIN DESCRIPTIONS </P><P>Logic Ground (GNDL): Ground reference for on-chip logic. </P><P>The following are brief descriptions of all NS32081 FPU </P><P>Section 3.1. </P><P>pins. The descriptions reference the relevant portions of the </P><P>Buffer Ground (GNDB): Ground reference for on-chip driv-</P><P>Functional Description, Section 3. </P><P>ers connected to output pins. Section 3.1. </P><Sect><P>Dual-In-Line Package </P></Sect><P>4.1.2 Input Signals </P><Sect><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_24.jpg"/></Figure></Sect><P>Clock (CLK): TTL-level clock signal. 
Reset (RST): Active low. Initiates a Reset, Section 3.3. 
</P><P>Status (ST0, ST1): Input from CPU. ST0 is the least significant bit. Section 3.4 encodings are: 00o(Reserved) 01oTransferring Operation Word or Operand 10oReading Status Word 11oBroadcasting Slave ID </P><P>4.1.3 Input/Output Signals Slave Processor Control (SPC): Active low. Driven by the CPU as the data strobe for bus transfers to and from the NS32081 FPU, Section 3.4. Driven by the FPU to signal </P><P>completion of an operation, Section 3.5.1. Must be held high with an external pull-up resistor while floating. Data Bus (D0 – D15): 16-bit bus for data transfer. D0 is the </P><P>least significant bit. Section 3.4. </P><Sect><P>TL/EE/5234 –3 </P><P>Top View 
FIGURE 4-1. Connection Diagram 
</P><P>Order Number NS32081D-10 or NS32081D-15 
See NS Package Number D24C 
</P><P>Order Number NS32081N-10 or NS32081N-15 
See NS Package Number N24A 
</P></Sect><Table><TR><TD>4.2 ABSOLUTE MAXIMUM RATINGS </TD><TD/><TD>If Military/Aerospace specified devices are required, </TD></TR><TR><TD>Temperature Under Bias </TD><TD>0oCto a70oC </TD><TD>please contact the National Semiconductor Sales Office/Distributors for availability and specifications. </TD></TR><TR><TD>Storage Temperature </TD><TD>b65oCto a150oC </TD><TD>Note: Absolute maximum ratings indicate limits beyond </TD></TR><TR><TD>All Input or Output Voltages </TD><TD/><TD>whichpermanentdamagemayoccur.Continuousoperation </TD></TR><TR><TD>with Respect to GND </TD><TD>b0.5V to a7.0V </TD><TD>attheselimitsisnotintended;operationshouldbelimitedto </TD></TR><TR><TD>Power Dissipation </TD><TD>1.5W </TD><TD>thoseconditions specified underElectrical Characteristics. </TD></TR></Table><P>4.3 ELECTRICAL CHARACTERISTICS TA e0oCto70oC,VCC e5V g5%, GND e0V </P><Table><TR><TH>Symbol </TH><TH>Parameter </TH><TH>Conditions </TH><TH>Min </TH><TH>Typ </TH><TH>Max </TH><TH>Units </TH></TR><TR><TD>VIH </TD><TD>HIGH Level Input Voltage </TD><TD/><TD>2.0 </TD><TD/><TD>VCC a0.5 </TD><TD>V </TD></TR><TR><TD>VIL </TD><TD>LOW Level Input Voltage </TD><TD/><TD>b0.5 </TD><TD/><TD>0.8 </TD><TD>V </TD></TR><TR><TD>VOH </TD><TD>HIGH Level Output Voltage </TD><TD>IOH eb400 mA </TD><TD>2.4 </TD><TD/><TD/><TD>V </TD></TR><TR><TD>VOL </TD><TD>LOW Level Output Voltage </TD><TD>IOL e4mA </TD><TD/><TD/><TD>0.45 </TD><TD>V </TD></TR><TR><TD>II </TD><TD>Input Load Current </TD><TD>0 sVIN sVCC </TD><TD>b10.0 </TD><TD/><TD>10.0 </TD><TD>mA </TD></TR><TR><TD>IL </TD><TD>Leakage Current Output and I/O Pins in TRI-STATE/Input Mode </TD><TD>0.45 sVIN s2.4V </TD><TD>b20.0 </TD><TD/><TD>20.0 </TD><TD>mA </TD></TR><TR><TD>ICC </TD><TD>Active Supply Current </TD><TD>IOUT e0, TA e25oC </TD><TD/><TD>200 </TD><TD>300 </TD><TD>mA </TD></TR></Table><P>4.0 Device Specifications (Continued) </P><Table><TR><TH>4.4 SWITCHING CHARACTERISTICS </TH></TR><TR><TH>4.4.1 Definitions </TH></TR><TR><TH>All the Timing Specifications given in this section refer to 0.8V and 2.0V on all the input and output signals as illustrated in Figures4.2 and 4.3, unless specifically stated otherwise. </TH><TD>ABBREVIATIONS L.E. o Leading Edge T.E. o Trailing Edge </TD><TD>R.E. o Rising Edge F.E. o Falling Edge </TD></TR></Table><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_25.jpg"/><Caption><P>TL/EE/5234 –26 </P><P>FIGURE 4-2. Timing Specification Standard (Signal Valid After Clock Edge) </P></Caption></Figure><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_26.jpg"/><Caption><P>TL/EE/5234 –27 </P><P>FIGURE 4-3. Timing Specification Standard (Signal Valid Before Clock Edge) </P></Caption></Figure><Sect><P>14 </P></Sect><P>4.0 Device Specifications (Continued) </P><P>4.4.2 Timing Tables </P><P>4.4.2.1 Output Signal Propagation Delays </P><P>Maximum times assume capacitive loading of 100 pF. </P><Table><TR><TH>Name </TH><TH>Figure </TH><TH>Description </TH><TH>Reference/ Conditions </TH><TH>NS32081-10 </TH><TH>NS32081-15 </TH><TH>Units </TH></TR><TR><TD>Min </TD><TD>Max </TD><TD>Min </TD><TD>Max </TD></TR><TR><TH>tDv </TH><TD>4-7 </TD><TD>Data Valid </TD><TD>After SPC L.E. </TD><TD/><TD>45 </TD><TD/><TD>30 </TD><TD>ns </TD></TR><TR><TH>tDf </TH><TD>4-7 </TD><TD>D0–D15 Floating </TD><TD>After SPC T.E. </TD><TD/><TD>50 </TD><TD>2 </TD><TD>35 </TD><TD>ns </TD></TR><TR><TH>tSPCFw </TH><TD>4-9 </TD><TD>SPC Pulse Width from FPU </TD><TD>At 0.8V (Both Edges) </TD><TD>tCLKp b 50 </TD><TD>tCLKp a 50 </TD><TD>tCLKp b 40 </TD><TD>tCLKp a 40 </TD><TD>ns </TD></TR><TR><TH>tSPCFl </TH><TD>4-9 </TD><TD>SPC Output Active </TD><TD>After CLK R.E. </TD><TD/><TD>55 </TD><TD/><TD>38 </TD><TD>ns </TD></TR><TR><TH>tSPCFh </TH><TD>4-9 </TD><TD>SPC Output Inactive </TD><TD>After CLK R.E. </TD><TD/><TD>55 </TD><TD/><TD>38 </TD><TD>ns </TD></TR><TR><TH>tSPCFnf </TH><TD>4-9 </TD><TD>SPC Output Nonforcing </TD><TD>After CLK F.E. </TD><TD/><TD>45 </TD><TD/><TD>35 </TD><TD>ns </TD></TR></Table><P>4.4.2.2 Input Signal Requirements </P><Table><TR><TH>Name </TH><TH>Figure </TH><TH>Description </TH><TH>Reference/ Conditions </TH><TH>Min </TH><TH>Max </TH><TH>Min </TH><TH>Max </TH><TH>Units </TH></TR><TR><TD>tPWR </TD><TD>4-5 </TD><TD>Power Stable to RST R.E. </TD><TD>After VCC Reaches 4.5V </TD><TD>50 </TD><TD/><TD>50 </TD><TD/><TD>ms </TD></TR><TR><TD>tRSTw </TD><TD>4-6 </TD><TD>RST Pulse Width </TD><TD>At 0.8V (Both Edges) </TD><TD>64 </TD><TD/><TD>64 </TD><TD/><TD>tCLKp </TD></TR><TR><TD>tSs </TD><TD>4-7 </TD><TD>Status (ST0 – ST1) Setup </TD><TD>Before SPC L.E. </TD><TD>50 </TD><TD/><TD>33 </TD><TD/><TD>ns </TD></TR><TR><TD>tSh </TD><TD>4-7 </TD><TD>Status (ST0 – ST1) Hold </TD><TD>After SPC L.E. </TD><TD>40 </TD><TD/><TD>35 </TD><TD/><TD>ns </TD></TR><TR><TD>tDs </TD><TD>4-8 </TD><TD>D0– D15 Setup Time </TD><TD>Before SPC T.E. </TD><TD>40 </TD><TD/><TD>30 </TD><TD/><TD>ns </TD></TR><TR><TD>tDh </TD><TD>4-8 </TD><TD>D0– D15 Hold Time </TD><TD>After SPC T.E. </TD><TD>50 </TD><TD/><TD>35 </TD><TD/><TD>ns </TD></TR><TR><TD>tSPCw </TD><TD>4-7 </TD><TD>SPC Pulse Width from CPU </TD><TD>At 0.8V (Both Edges) </TD><TD>70 </TD><TD/><TD>50 </TD><TD/><TD>ns </TD></TR><TR><TD>tSPCs </TD><TD>4-7 </TD><TD>SPC Input Active </TD><TD>Before CLK R.E. </TD><TD>40 </TD><TD/><TD>35 </TD><TD/><TD>ns </TD></TR><TR><TD>tSPCh </TD><TD>4-7 </TD><TD>SPC Input Inactive </TD><TD>After CLK R.E. </TD><TD>0 </TD><TD/><TD>0 </TD><TD/><TD>ns </TD></TR><TR><TD>tRSTs </TD><TD>4-10 </TD><TD>RST Setup </TD><TD>Before CLK F.E. </TD><TD>10 </TD><TD/><TD>10 </TD><TD/><TD>ns </TD></TR><TR><TD>tRSTh </TD><TD>4-10 </TD><TD>RST R.E. Delay </TD><TD>After CLK R.E. </TD><TD>0 </TD><TD/><TD>0 </TD><TD/><TD>ns </TD></TR></Table><P>4.4.2.3 Clocking Requirements </P><Table><TR><TH>Name </TH><TH>Figure </TH><TH>Description </TH><TH>Reference/ Conditions </TH><TH>Min </TH><TH>Max </TH><TH>Min </TH><TH>Max </TH><TH>Units </TH></TR><TR><TD>tCLKh </TD><TD>4-4 </TD><TD>Clock High Time </TD><TD>At 2.0V (Both Edges) </TD><TD>42 </TD><TD>1000 </TD><TD>27 </TD><TD>1000 </TD><TD>ns </TD></TR><TR><TD>tCLKl </TD><TD>4-4 </TD><TD>Clock Low Time </TD><TD>At 0.8V (Both Edges) </TD><TD>42 </TD><TD>1000 </TD><TD>27 </TD><TD>1000 </TD><TD>ns </TD></TR><TR><TD>tCLKp </TD><TD>4-4 </TD><TD>Clock Period </TD><TD>CLK R.E. to Next CLK R.E. </TD><TD>100 </TD><TD>2000 </TD><TD>66 </TD><TD/><TD>ns </TD></TR></Table><P>4.0 Device Specifications (Continued) </P><P>4.4.3 Timing Diagrams </P><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_27.jpg"/><Caption><P>FIGURE 4-4. Clock Timing </P></Caption></Figure><Sect><P>TL/EE/5234 –19 </P><P>TL/EE/5234 –20 </P><P>FIGURE 4-5. Power-On Reset </P></Sect><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_28.jpg"/><Caption><P>FIGURE 4-6. Non-Power-On Reset </P></Caption></Figure><Sect><P>TL/EE/5234 –21 </P></Sect><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_29.jpg"/><Caption><P>FIGURE 4-7. Read Cycle from FPU Note: SPC pulse must be (nominally) 1 clock wide when writing into FPU. </P></Caption></Figure><Sect><P>TL/EE/5234 –22 </P></Sect><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_30.jpg"/><Caption><P>FIGURE 4-8. Write Cycle to FPU </P></Caption></Figure><Sect><P>TL/EE/5234 –23 </P></Sect><P>Note: SPC pulse may also be 2 clocks wide, but its edges must meet the tSPCs and tSPCh requirements with respect to CLK. </P><Sect/><P>4.0 Device Specifications (Continued) </P><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_31.jpg"/><Caption><P>FIGURE 4-9. SPC Pulse from FPU </P></Caption></Figure><Sect><P>TL/EE/5234 –24 </P></Sect><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_32.jpg"/></Figure><Sect><P>TL/EE/5234 –25 </P></Sect><P>Physical Dimensions inches (millimeters) </P><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_33.jpg"/><Caption><P>FIGURE 4-10. RST Release Timing Note: The rising edge of RST must occur while CLK is high, as shown. </P></Caption></Figure><P>Ceramic Dual-In-Line Package (D) 
Order Number NS32081D-10 or NS32081D-15 
NS Package Number D24C 
</P><Sect/><P>NS32081-10/NS32081-15 Floating-Point Units
</P><P>Physical Dimensions inches (millimeters) (Continued) 	Lit. #114287 </P><Figure><ImageData src="images/fpu_ic_national_DS0052341988_img_34.jpg"/></Figure><P>Molded Dual-In-Line Package (N) 
Order Number NS32081N-10 or NS32081N-15 
NS Package Number N24A 
</P><P>LIFE SUPPORT POLICY </P><P>NATIONAL’S PRODUCTS ARE NOT AUTHORIZED FOR USE AS CRITICAL COMPONENTS IN LIFE SUPPORT DEVICES OR SYSTEMS WITHOUT THE EXPRESS WRITTEN APPROVAL OF THE PRESIDENT OF NATIONAL SEMICONDUCTOR CORPORATION. As used herein: </P><P>1. Life 	support devices or systems are devices or 2. A critical component is any component of a life systems which, (a) are intended for surgical implant support device or system whose failure to perform can into the body, or (b) support or sustain life, and whose be reasonably expected to cause the failure of the life failure to perform, when properly used in accordance support device or system, or to affect its safety or with instructions for use provided in the labeling, can effectiveness. be reasonably expected to result in a significant injury to the user. </P><Figure><ImageData src=""/></Figure><P>National Semiconductor National Semiconductor National Semiconductor National Semiconductor Corporation Europe Hong Kong Ltd. Japan Ltd. </P><P>1111 West Bardin Road Fax: (a49) 0-180-530 85 86 13th Floor, Straight Block, Tel: 81-043-299-2309 </P><Table><TR><TH>Arlington, TX 76017 </TH><TH>Email: cnjwge ©tevm2.nsc.com </TH><TH>Ocean Centre, 5 Canton Rd. </TH><TH>Fax: 81-043-299-2408 </TH></TR><TR><TD>Tel: 1(800) 272-9959 </TD><TD>Deutsch Tel: (a49) 0-180-530 85 85 </TD><TD>Tsimshatsui, Kowloon </TD><TD/></TR><TR><TD>Fax: 1(800) 737-7018 </TD><TD>English </TD><TD>Tel: (a49) 0-180-532 78 32 </TD><TD>Hong Kong </TD><TD/></TR><TR><TD/><TD>Frangais Tel: (a49) 0-180-532 93 58 </TD><TD>Tel: (852) 2737-1600 </TD><TD/></TR><TR><TD/><TD>Italiano </TD><TD>Tel: (a49) 0-180-534 16 80 </TD><TD>Fax: (852) 2736-9960 </TD><TD/></TR></Table><P>This datasheet has been download from: </P><P><Link>www.datasheetcatalog.com </Link></P><P>Datasheets for electronics components. </P></Sect></Sect></Sect></Sect></Sect></Sect></Sect></Part></TaggedPDF-doc>