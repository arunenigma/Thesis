<?xml version="1.0" encoding="UTF-8" ?><!-- Created from PDF via Acrobat SaveAsXML --><!-- Mapping Table version: 28-February-2003 --><TaggedPDF-doc><?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/">
         <xmp:CreateDate>2011-06-16T09:19:58-08:00</xmp:CreateDate>
         <xmp:ModifyDate>2011-06-16T09:15:12-07:00</xmp:ModifyDate>
         <xmp:MetadataDate>2011-06-16T09:15:12-07:00</xmp:MetadataDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe Acrobat 9.43 Paper Capture Plug-in</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>xml</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/">
         <xmpMM:DocumentID>uuid:029695a0-36db-4b91-aaa7-6037fc1cfc7d</xmpMM:DocumentID>
         <xmpMM:InstanceID>uuid:fdc40bca-bb0d-1144-b327-b6cce71b1d70</xmpMM:InstanceID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?><?xpacket end='r'?><Figure><ImageData src=""/></Figure><Part><H2>WEITEK ~ </H2><Sect><P>POINT COPROCESSOR </P></Sect><Sect><Sect><H5>PRELIMINARY DATA</H5></Sect><P>~ </P><Sect><P>September 1988 </P><P>The WEITEK WTL 3167, also known as the WEITEK ABACUS, is a high performance single-chip floatingpoint coprocessor for Intel's 80386 microprocessor. It is hardware and software compatible with the WEITEK 1167 coprocessor daughter board. Fully supported by a wide selection of application packages and by high-level language compilers, under DOS, UNIX System </P><P>V. 3, and XENIX System V. 3, the WTL 3167 provides a superior floating-point accelerator for highend PCs, workstations, industrial robots, graphics, and numeric controllers. </P></Sect><Figure><ImageData src=""/></Figure><Sect><P>Contents 
Features 
</P><P>Description </P><P>Block Diagram </P><P>Hardware Designer's Section </P><P>Software Tools Overview </P><P>20 </P><P>Applications Programmer's Section 21 </P><P>Systems Programmer's Section 48 </P><P>WTL 1167 and WTL 3167 Compatibility 54 </P><P>Ordering Information </P><P>55 </P><P>Revision Summary </P><P>56 </P><P>Documentation Request Form 59 </P><P>Sales Offices back cover </P></Sect><P>WTL 3167 Floating-Point Coprocessor September 1988 </P><P>Copyright © WEITEK Corporation 1988 All rights reserved </P><P>WEITEK Corporation 1060 East Arques Avenue Sunnyvale, California 94086 Telephone (408) 738-8400 </P><P>WEITEK is a trademark of WEITEK Corporation </P><P>MS-DOS is a trademark of MicroSoft Corporation OS 386 is a trademark of AI Architects RUN386 is a trademark of Phar-Lap Software UNIX is a trademark of Bell Laboratories X-AM is a trademark of IGC </P><P>WEITEK reserves the right to make changes to these specifications at any time </P><P>Printed in the United States of America 90 89 88 6 5 4 3 2 1 </P><P>PRELIMINARY DATA </P><P>September 1988 </P></Sect><Sect><H4>Features </H4><P>SINGLE-CHIP FLOATING-POINT COPROCESSOR Designed for use with the Intel 80386 Fits a standard 121-pin socket, which is a superset of </P><P>the Intel 80387 coprocessor socket </P><P>Pin-for-pin compatible with WEITEK 1167 coprocessor board Upward object-code-compatible from WEITEK 1167 </P><P>HIGH PERFORMANCE </P><P>5.6 single-precision megawhetstones and 1.0 single-precision megaflops in hand-coded Linpack </P><P>HIGH-LEVEL LANGUAGES </P><P>Supported by C, FORTRAN, and Pascal compilers under UNIX System V.3, XENIX System V.3, and MS-DOS real and protected mode IEEE FORMAT </P><Sect/><P>Conforms to the IEEE standard format for floatingpoint arithmetic in both single-and double-precision (ANSI/IEEE Standard 754-1985) </P><P>FULL FUNCTION Add, subtract, multiply, divide, and square root Integer-floating-point conversions Absolute value Compare Transcendental functions supported by run-time </P><P>libraries Low power CMOS Dissipates 2.0 Watts max at 25 MHz 121-pin PGA package </P></Sect><Sect><H4>Description </H4><P>The WTL 3167 is a high-performance single-chip floating-point coprocessor board for Intel's 80386 32-bit microprocessor. It delivers two to three times the performance of standard 32-bit numeric coprocessors. (Benchmark results are given in figure 1.) </P><P>The interface signals between the WTL 3167 and the 80386 are provided by a 121-pin socket, called the extended math coprocessor (EMC) socket, which is a superset of the 80387 socket. The WTL 3167 is pinfor-pin compatible with the WTL 1167 coprocessor daughter board. </P><P>C, FORTRAN, and Pascal compilers fully support the WTL 3167, allowing programs to be written in high-level languages. The WTL 3167 is upward object-codecompatible with the WTL 1167 coprocessor daughter board. </P><P>This document consists of three sections: the Hardware Designer's Section, the Applications Programmer's Section, and the Systems Programmer's Section. </P><P>This data sheet is complemented by two additional documents: The WTL 3167 Hardware Designer's Guide and the WTL 1167 Software Designer's Guide. Readers familiar with the WTL 1167 Data Sheet can simply refer to the WTL 1167 and WTL 3167 Compatibility section. </P><Table><TR><TH/><TH>Benchmark </TH><TH>Performance </TH></TR><TR><TH/><TD>Unpack'l&lt; (SP) </TD><TD>1.36 MFLOPS </TD></TR><TR><TH/><TD>Unpack'l&lt; (DP) </TD><TD>.60 MFLOPS </TD></TR><TR><TH/><TD>Whetstone (SP) </TD><TD>5.6 MWhetstones </TD></TR><TR><TH/><TD>Whetstone (DP) </TD><TD>3.7 MWhetstones </TD></TR><TR><TH>*Hand-coded </TH><TD/><TD/></TR></Table><P>Figure 1. Benchmark results at 25 MHz </P><P>© Copyright WEITEK 1988</P><Figure><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_2.jpg"/>MIIO-A31 ..25 W/R-TCB-READYADSClK2 AF32RDY-Register File 16x64 3 ports C A 64 64 RESET MUX ClK 64 ClK2 Figure 2. WTL 3167 simplified block diagram © Copyright WEITEK 1988 All Rights Reserved 2 W/RA15..2 BE2.. 0D31 .. 0 ClK2 r-~--*-~------~ Instruction Queue (7 elements) B 64 MUX lAT 49 32 Immediate Data 32 32 32 </Figure><P>PRELIMINARY DATA </P><P>September 1988 </P></Sect><Sect><H4>Hardware Designer's Section </H4><P>This section provides the electrical and mechanical information necessary to design the WTL 3167 into an 80386 system. For more details refer to the WTL 3167 Hardware Designer's Guide. </P><P>The WTL 3167 coprocessor is a memory-mapped peripheral. From the system designers standpoint, integrating the WTL 3167 into the system is as simple as adding additional memory at an upper address. To the 80386 and its application software the WTL 3167 appears to be a segment of memory. Instructions are executed by performing memory moves to and from the coprocessor. </P><P>The WTL 3167 interface to the 80386 requires signals that are not available on the 80387 socket. WEITEK has defined a superset of the 80387 socket called the extended math coprocessor (EMC) sacket, which is a standard 121-pin pin grid array socket. With the EMC socket, a system can make use of the 80387, the WTL 3167, or both, if one uses a small daughter board that plugs into the 121-pin socket and accommodates both coprocessors. Figure 3 shows the EMC socket pinout and size. </P><P>Figure 4 shows the WTL 3167 physical dimensions. </P><P>Figure 5 shows details of the WEITEK daughter board. It can accommodate both the 80387 and the WTL 316 7 coprocessor. </P><P>© Copyright WEITEK 1988</P><P>.1J.lF .001J.lF 2 3 4 5 6 7 8 9 10 11 12 13 A </P><P>GND GND A6 A5A13 A12 A11 A10 </P><P>NC A9 </P><Sect><P>A8 GND A7 </P></Sect><P>A15 A14 D9 011 D12 D14 </P><P>VDD </P><Sect><P>D16 </P><P>D18 VDD </P></Sect><P>D21 A4 A3</P><P>80387 _ Footprint </P><P>VDD VDD D17 D22 A2</P><Sect/><P><Figure ActualText="~ "><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_3.jpg"/>~ </Figure>08 </P><P>GND D10 D13 </P><P>015 GND </P><Sect><P>D19 D20 </P></Sect><P>D23 GND </P><P>VDD</P><P>07 </P><P>D6 NC</P><P>D </P><P>~ </P><P>~ </P><P>NC D4 D24 D25 NCD5</P><P>E </P><Sect><P>Q</P></Sect><P>A24 NCVDD GND D26 D27 </P><P>J.lF 
Top 
</P><P>BE</P><P>A25 VDD GND VDD GND</P><P>G </P><P>0</P><P>View </P><Sect><P>o</P></Sect><P>~ F </P><P>BE</P><P>A26 D28 D29D3 D2 </P><P>B H </P><P>1BE</P><P>A27 </P><P>DO </P><P>D30 </P><P>D31</P><P>01</P><P>J </P><P>2</P><Sect><P>n </P></Sect><P>J.lF 
K 
</P><P>VDD GND VDD GND CKM NC </P><Sect><P>LJ</P></Sect><P>TIE </P><P>387PE REA </P><Sect/><P>VDDA28 BUSY </P><P>WR</P><P>VDD </P><P>A31 </P><Sect><P>ADS</P><P>NC CLK2</P></Sect><P>L </P><P>REQ DY</P><Sect/><P>CLK2 ER HIGH </P><P>REA </P><Sect><P>TIECM RE</P></Sect><P>MI </P><Sect><P>VDD</P></Sect><P>A29 INTR NCSTEN GND </P><P>~RES</P><P>M </P><P>10</P><Sect><P>HIGH </P></Sect><P>SETRORDYODONC </P><Sect/><P>GNDA30 </P><P>AF32</P><P>VDD GND </P><P>RDY</P><P>MCSGND </P><Sect><P>NC VDD NCTCB</P></Sect><P>N </P><P>.1J.lF .001J.lF </P><P>Pin #1 2 3 4 5 6 7 8 910111213 A </P><P>.000000000000 B </P><P>0000000000000 </P><P>RecommendedC </P><P>0000000000000 </P><P>socket:</P><P>0000 000</P><P>D Robinson Nugent </P><P>E </P><P>000 000 </P><P>PIN PGA-121AM3-S-TG</P><P>1</P><P>F </P><P>000 000</P><P>Top </P><P>1.35±0.2 Garry </P><P>G </P><P>000 000 </P><P>Typical PIN 701-121-13K-LCD</P><P>View</P><P>H </P><P>000 000 </P><P>Augat </P><P><Figure ActualText="1 "><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_4.jpg"/>1 </Figure>PIN PGM121-1A1312-L K </P><P>J </P><P>000 000 </P><P>000 000 </P><P>L </P><P>0000000000000 </P><P>M </P><P>0000000000000 </P><P>N </P><P>0000000000000 </P><P>1.200± .012 ---.,.....1 </P><P>Figure 3. EMC socket pinout and dimensions </P><P>© Copyright WEITEK 1988 </P><P>PRELIMINARY DATA </P><P>September 1988 </P><P>Hardware Designer's Section, continued </P><P>WTL 3167 121-Pin Pin Grid Array </P><P>e </P><Figure><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_5.jpg"/>-------~.0000000000000.0(!)0(!)(!)(!)(!)(!)(!)(!)(!)(!)(!)(!)(!)(!)00000000000000000 000(!)(!)(!) (!)(;)(!)000 000 Ci)(i)(i) (!) (;)(!)000 Locator 000 (i) (i)(i) P' (!) (;)(!) 000 In&quot; 000(!)0(!) ~ 0(;)0000 000(!)000(!)00000000000(!)(!)(!)(!)(!)(!)(!)(!)(!)(!)(!)(!)(!)0(!) ----~.·0000000·0000 </Figure><Figure><ImageData src=""/>Pin Kovar Standoff Kovar </Figure><Figure><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_7.jpg"/>• </Figure><P>Bottom View Side View Top View </P><Table><TR><TH>Symbol </TH><TH>Inches </TH><TH>MM </TH></TR><TR><TH/><TH>MAX </TH><TH>MIN </TH><TH>MAX </TH><TH>MIN </TH></TR><TR><TH>A1 </TH><TD>0.135 </TD><TD>0.080 </TD><TD>3.43 </TD><TD>2.03 </TD></TR><TR><TH>A2 </TH><TD>0.210 </TD><TD>0.175 </TD><TD>5.33 </TD><TD>4.46 </TD></TR><TR><TH>A3 </TH><TD>0.080 </TD><TD>0.035 </TD><TD>2.03 </TD><TD>0.89 </TD></TR><TR><TH>D </TH><TD>1.400 </TD><TD>1.280 </TD><TD>35.56 </TD><TD>32.51 </TD></TR><TR><TH>E1 </TH><TH>1.200 TYP </TH><TH>30.48 TYP </TH></TR><TR><TH>E2 </TH><TD>0.055 </TD><TD>0.035 </TD><TD>1.40 </TD><TD>0.89 </TD></TR><TR><TH>E3 </TH><TD>0.020 </TD><TD>0.016 </TD><TD>0.51 </TD><TD>0.41 </TD></TR><TR><TH>d </TH><TD>0.075 </TD><TD>0.035 </TD><TD>1.91 </TD><TD>0.89 </TD></TR><TR><TH>e </TH><TH>0.100 TYP </TH><TH>2.54 TYP </TH></TR></Table><P>Figure 4. WTL 3167 physical dimensions </P><P>3.650 +.005 </P><P>_I ~250 ±.~ </P><P><Figure ActualText="T "><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_8.jpg"/>T </Figure>-c::J--c::J--c::J--c::J-@ </P><Sect><P>0000000000000 </P></Sect><P>t </P><P><Figure ActualText="0 "><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_9.jpg"/>0 </Figure><Figure ActualText="0 "><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_10.jpg"/>0</Figure>0000000000000 0000000000000 </P><Sect/><P>t</P><Sect><P>000 000 </P></Sect><P>§</P><P>~ </P><P>0</P><Sect><P>::: 121-Pin :::</P></Sect><P>oft </P><P>~ -H</P><P>WTL 3167 </P><Sect><P>::: Socket :::</P></Sect><P>0 </P><P>oM o</P></Sect></Part><Part><H1><Figure ActualText="0 "><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_11.jpg"/>0</Figure><Figure ActualText="0 "><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_12.jpg"/>0 </Figure>U')</H1><P>0 </P><Sect><H3>0:::00*&quot; Pin 1 :::</H3><P>Ol </P><P>~ C'f</P><P>0000000000000 </P><P>U') </P><P>-</P><P>0000000000000 </P><P><Figure ActualText="L "><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_13.jpg"/>L </Figure>0000000000000 </P><P>-</P><P>-cJ--cJ</P><P>/&quot;-c::J--cJ-1 </P><P>~ </P><P>WTL 3167 In the /121-pin socket </P><P>3.491&quot;.000 ~ </P><P>with long leads </P><P>3.800 :i:.005 </P><Figure><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_14.jpg"/>l .075 t t .229 i t .215 L-t .177 i Top View t .215 t t .062 t .304 i <Caption><P>Component Height Dimensions in Inches (Not to Scale) </P></Caption></Figure><P>Figure 5. WTL 3167 coprocessor board physical dimensions </P><P>PRELIMINARY DATA </P><P>September 1988 </P><Sect><H4>Hardware Designer's Section, continued </H4><P>CONNECTING THE EMC SOCKET </P><P>The following paragraphs describe the connection of each EMC socket pin. </P><P>CLOCK (CLK2) </P><P>CLK2 is the clock input to the WTL 3167. All WTL 3167 timing is relative to CLK2. This signal must be the same as CLK2 of the 80386, but the WTL 3167 should have a dedicated trace. (For more details refer to the &quot; Clock Distribution&quot; paragraph in the WTL 3167 Hardware Designer's Guide). </P><P>VDD </P><P>Five volt (+5.0 V) power supply for the WTL 3167. All VDD pins must be connected. </P><P>GROUND (GND) </P><P>Ground for the WTL 3167. All ground pins must be connected. </P><P>BUSES </P><P>Address Bus (A31 ..2) and (BE2..0-). </P><P>Pins A31 .. 2 and 8E2.. 0-should be connected directly to the 80386 address bus and byte enables respectively. </P><P>Data Bus (031 ..0). </P><P>Pins 031..0 should be connected to the 80386 data bus. </P><P>80386 INTERFACE SIGNALS </P><P>The 80386 interface signals are: Address Status (ADS-), Memory I/O Control Signal (M/IO-), Transfer Acknowledge (READY-), Reset (RESET), and Write/ Read Line (WIR-) . </P><P>ADS-, M/IO-READY-, RESET, and WR-should be connected to the 80386 ADS-, M/IO-, READY-, RESET, and WIR-respectively. Reset must be asserted synchronously with the 80386 clock to guarantee proper operation (see figure 18). In 'implementations using the Chips and Technologies chip set, READYshould be connected to READY-on the 82C301 and 82C302 devices, and to VCC through a 10k pullup resistor. </P><P>COPROCESSOR READY (RDY-) </P><P>The RDY-output signal must be &quot;ORed&quot; into the logic generating READY-for the 80386, using only combinatorial logic (see figure 6). In implementations using Chips and Technologies chip set, ROY-should be connected to READY-. </P><P>MATH COPROCESSOR SELECT (MCS-) </P><P>MCS-is an output signal that is asserted when the current address is for the WTL 3167 coprocessor. It changes when the 80386 address bus changes. MCSmay be left unconnected or may be used in conjunction with W/R-to disable other 80386 data bus drivers on WTL 3167 read cycles. When pipelined addressing is used, special attention must be paid, as MCS-may be de-asserted prior to the end of a WTL 3167 read cycle, as shown in figure 17. </P><P>THREE CYCLE BUS (TCB-) </P><P>TC8-is an input that should be grounded in systems using the Chips and Technologies AT/386 chip set. Otherwise TC8-should be left unconnected. </P><P>AF32</P><P>AF32-is an output signal used only in implementations based on Chips and Technologies' chip set. In implementations based on Chips and Technologies' AF32should be connected to VCC through a 10k resistor and to AF32-on the 82C301 and 82C302 devices. It should be left unconnected otherwise. </P><Figure><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_15.jpg"/>READY-from other logic --.....,~ OR Logic WTL 3167 Figure 6. READY-and ROY-connection READY80386 READY </Figure><P>INTERRUPT (INTR) </P><P>The INTR output of the WTL 3167 must be connected to the system interrupt controller. In the world of ATcompatible systems, for example, the WTL 3167 INTR should be &quot;ORed&quot; to the 80287/80387 interrupt logic and the output should be connected to IRQ13 as shown in figure 7. </P><P>WTL 3167 PRESENT (PRES-) </P><P>PRES-signals the presence of a WTL 3167 coprocessor. This signal should be connected to VCC through a resistor of at least 10KOhm to insure a high level when the WEITEK coprocessor is not present. </P><P>The basic software method of detecting the presence of a WTL 3167 in an 80386 system is to perform a functional test of the device by attempting to load data into the coprocessor register file and read it back (a coded example is provided in figure 56 on page 51. The hardware designer can use the PRES-output to make sure that the system generates a READY-signal when the WTL 3167 is addressed but is absent, (as determined by PRES-being high), in order to avoid system hangs. </P><P>NO CONNECTION </P><P>NC pins on the outer rows and columns are reserved for future expansion and should be left unconnected. </P><P>OTHER PINS </P><P>CKM, PEREQ, BUSY-, 387 CLK2, ERROR-, READYO-, STEN, CMDO, and pins L4 and M10 are only used by the 80387 coprocessor. Refer to the 80387 data sheet for details. Such signals can be left unconnected if the WTL 3167 is the only coprocessor that will ever be used. </P><P>DECOUPLING CAPACITORS </P><P>Decoupling capacitors should be placed on each side of the EMC socket, as shown in figure 3. </P><P>SYSTEM-LEVEL CONSIDERATIONS </P><P>The WTL 3167 coprocessor is a memory-mapped peripheral that communicates with the 80386 over the same address bus that connects the main memory to the CPU. Instructions are defined by the 14 least-significant address bits (A15 .. 2) as well as three of the four byte enables (BE2 ..0-). </P><P>The seven most-significant bits of the 80386 address bus (A31 .. 25), together with the Memory I/O control Signal (M/IO-), select the WTL 3167 coprocessor. Only the upper seven address bits are decoded to determine when a coprocessor operation is being requested. </P><P>The coprocessor will respond to memory addresses COOOOOOO through C1 FFFFFF hex. Although by convention only addresses COOOOOOO to COOOFFFF hex are used, it is important to be sure that other components in the system do not conflict with the address space decoded by the coprocessor. Writing to this address space will cause the WTL 3167 to execute instructions and reading will cause the coprocessor to drive the data bus. </P><P>TESTING THE DESIGN </P><P>A set of diagnostic routines that test the coprocessor design for both UNIX and DOS, real and protected mode environments, is available from WEITEK. No WTL 3167 programming knowledge is required to run the diagnostics software. Contact your WEITEK sales engineer for a copy of the diagnostics. (Refer to figure 21 on page 20 for the product's part number.) </P><Table><TR><TH>80386 </TH><TH>802871 80387 </TH><TH>WTL 3167 </TH></TR><TR><TD>ERROR+VDD </TD><TD>ERROR-Error ~ Detection Logic </TD><TD>INTR </TD><TD>) </TD><TD>IRQ13 </TD></TR></Table><P>Interrupt 
Controller 
</P><P>Figure 7. Interrupt output connection in an AT-compatible system </P><P>WTL 3167 FLOATING-POINT COPROCESSOR </P><Sect><H4>PRELIMINARY DATA </H4><P>September 1988 </P><P>Hardware Designer's Section, continued </P><P>SPECIFICATIONS </P><P>ABSOLUTE MAXIMUM RATINGS </P><P>Supply voltage .................... -0.5 to 7.0 V 
Input voltage ...................... -0.5 to VDD 
Output voltage .................... -0.5 to VDD 
</P><P>Storage Temperature Range ....... -65°C to 150°C 
Operating Temperature Range ........ O°C to 85°C 
</P><P>RECOMMENDED OPERATING CONDITIONS </P><Table><TR><TH>Parameter </TH><TH>Test Conditions </TH><TH>Commercial Min Max </TH><TH>Unit </TH></TR><TR><TD>VDD Tcase </TD><TD>Supply Voltage Operating Temperature </TD><TD/><TD>4.75 0 </TD><TD>5.25 85 </TD><TD>V °C </TD></TR></Table><P>Figure 8. </P><P>DC ELECTRICAL CHARACTERISTICS </P><Table><TR><TH/><TH>Parameter </TH><TH>Test Conditions </TH><TH>Commercial </TH><TH>Unit </TH></TR><TR><TD>Min </TD><TD>Max </TD></TR><TR><TH>VIH </TH><TD>High-level input voltage </TD><TD>VDD =MAX </TD><TD>2.0 </TD><TD/><TD>V </TD></TR><TR><TH>VIL </TH><TD>Low-level input voltage </TD><TD>VDD =MIN </TD><TD/><TD>0.8 </TD><TD>V </TD></TR><TR><TH>VIHC </TH><TD>CLK2 Input high voltage </TD><TD>VDD =MINIMAX </TD><TD>VDD-.8 </TD><TD>VDD+·3 </TD><TD>V </TD></TR><TR><TH>VILC </TH><TD>CLK2 Input low voltage </TD><TD>VDD =MIN </TD><TD/><TD>0.8 </TD><TD>V </TD></TR><TR><TH>VOH </TH><TD>High-level output voltage </TD><TD>VDD =MIN, IOH =-1.0 mA </TD><TD>2.4 </TD><TD/><TD>V </TD></TR><TR><TH>VOL </TH><TD>Low-level output voltage </TD><TD>VDD =MIN, IOL = 4.0 mA </TD><TD/><TD>0.4 </TD><TD>V </TD></TR><TR><TH>III-jc </TH><TD>CLK2 High-level input current </TD><TD>VDD =MAX, VIN =VDD </TD><TD/><TD>±10 </TD><TD>J.lA </TD></TR><TR><TH>IILc </TH><TD>CLK2 Low-level input current </TD><TD>VDD =MAX, VIN =OV </TD><TD/><TD>±10 </TD><TD>J.lA </TD></TR><TR><TH>IIH </TH><TD>High-level input current </TD><TD>VDD =MAX, VIN =VDD </TD><TD/><TD>±10 </TD><TD>J.lA </TD></TR><TR><TH>IlL </TH><TD>Low-level input current </TD><TD>VDD =MAX, VIN =OV </TD><TD/><TD>±10 </TD><TD>J.lA </TD></TR><TR><TH>Icc </TH><TD>Supply current </TD><TD>CLK2 =MIN, VDD =MAX </TD><TD/><TD>350 </TD><TD>mA </TD></TR><TR><TH/><TD>WARNING! Remove power before insertion or removal. </TD><TD/></TR></Table><P>Figure 9. DC electrical characteristics over recommended temperature range </P><P>AC SWITCHING CHARACTERISTICS </P><Table><TR><TH>Symbol </TH><TH>Parameter </TH><TH>3167-016 </TH><TH>3167-020 </TH><TH>3167-025 </TH><TH>Unit </TH><TH>Ref Figure </TH><TH>Notes </TH></TR><TR><TD>Min </TD><TD>Max </TD><TD>Min </TD><TD>Max </TD><TD>Min </TD><TD>Max </TD></TR><TR><TH>2Tcy </TH><TD>Clock Cycle Time </TD><TD>62 </TD><TD/><TD>50 </TD><TD/><TD>40 </TD><TD/><TD>ns </TD><TD>12 </TD><TD/></TR><TR><TH>Tcy </TH><TD>CLK2 Period </TD><TD>31 </TD><TD/><TD>25 </TD><TD/><TD>20 </TD><TD/><TD>ns </TD><TD>12 </TD><TD/></TR><TR><TH>TCHa </TH><TD>CLK2 High Time </TD><TD>9 </TD><TD/><TD>8 </TD><TD/><TD>7.5 </TD><TD/><TD>ns </TD><TD>12 </TD><TD>At2V </TD></TR><TR><TH>TCHb </TH><TD>CLK2 High Time </TD><TD>8 </TD><TD/><TD>7 </TD><TD/><TD>6.5 </TD><TD/><TD>ns </TD><TD>12 </TD><TD>At 2.5V </TD></TR><TR><TH>TCla </TH><TD>CLK2 Low Time </TD><TD>9 </TD><TD/><TD>8 </TD><TD/><TD>7.5 </TD><TD/><TD>ns </TD><TD>12 </TD><TD>At2V </TD></TR><TR><TH>TClb </TH><TD>CLK2 Low Time </TD><TD>7 </TD><TD/><TD>7 </TD><TD/><TD>6.5 </TD><TD/><TD>ns </TD><TD>12 </TD><TD>At 0.8V </TD></TR><TR><TH>TR </TH><TD>Clock Rise Time </TD><TD/><TD>8 </TD><TD/><TD>8 </TD><TD/><TD>7 </TD><TD>ns </TD><TD>12 </TD><TD/></TR><TR><TH>TF </TH><TD>Clock Fall Time </TD><TD/><TD>8 </TD><TD/><TD>8 </TD><TD/><TD>7 </TD><TD>ns </TD><TD>12 </TD><TD/></TR><TR><TH>T1 </TH><TD>ADS-, W/R-Setup Time </TD><TD>27 </TD><TD/><TD>17 </TD><TD/><TD>15 </TD><TD/><TD>ns </TD><TD>13,14,15, 16 17 </TD><TD>Notes1,3,5 </TD></TR><TR><TH>T2 </TH><TD>ADS-Hold Time </TD><TD>4 </TD><TD/><TD>4 </TD><TD/><TD>4 </TD><TD/><TD>ns </TD><TD>13,14,15, 16,17 </TD><TD>Notes 1, 3 </TD></TR><TR><TH>T3 </TH><TD>A15..2, BE2 .. 0-Setup Time </TD><TD>22 </TD><TD/><TD>18 </TD><TD/><TD>15 </TD><TD/><TD>ns </TD><TD>13,14,15, 16,17 </TD><TD>Notes 1,3,5 </TD></TR><TR><TH>T4 </TH><TD>A15..2, BE2 .. 0-W/R-Hold Time </TD><TD>4 </TD><TD/><TD>4 </TD><TD/><TD>4 </TD><TD/><TD>ns </TD><TD>13,14,15, 16 17 </TD><TD>Notes 1,3,6 </TD></TR><TR><TH>T5 </TH><TD>M/IO-, A31 ..25 Setup Time </TD><TD>11 </TD><TD/><TD>8 </TD><TD/><TD>7 </TD><TD/><TD>ns </TD><TD>13,14,15, 16 17 </TD><TD>Notes 1, 3, 5 </TD></TR><TR><TH>Ts </TH><TD>M/IO-, A31 ..25 Hold Time </TD><TD>4 </TD><TD/><TD>4 </TD><TD/><TD>4 </TD><TD/><TD>ns </TD><TD>13,14,15, 16 17 </TD><TD>Notes 1, 3,6 </TD></TR><TR><TH>T7 </TH><TD>031 ..0 Setup Time </TD><TD>20 </TD><TD/><TD>20 </TD><TD/><TD>20 </TD><TD/><TD>ns </TD><TD>13,14,16 </TD><TD>Notes1,3,4,5 </TD></TR><TR><TH>Ta </TH><TD>D31 ..0 Hold Time </TD><TD>2 </TD><TD/><TD>2 </TD><TD/><TD>2 </TD><TD/><TD>ns </TD><TD>13,14,16 </TD><TD>Notes1,3,4,6 </TD></TR><TR><TH>Tg </TH><TD>READY -Setup Time </TD><TD>20 </TD><TD/><TD>12 </TD><TD/><TD>9 </TD><TD/><TD>ns </TD><TD>13,14,15, 16 17 </TD><TD>Notes 1, 3 </TD></TR><TR><TH>TlO </TH><TD>READY-Hold Time </TD><TD>4 </TD><TD/><TD>4 </TD><TD/><TD>4 </TD><TD/><TD>ns </TD><TD>13,14,15, 16 17 </TD><TD>Notes 1, 3 </TD></TR><TR><TH>Tn </TH><TD>D31 ..0 Output Delay </TD><TD/><TD>48 </TD><TD/><TD>38 </TD><TD/><TD>30 </TD><TD>ns </TD><TD>15,17 </TD><TD>Notes 1, 3, 12 </TD></TR><TR><TH>T12 </TH><TD>D31 ..0 Valid Output </TD><TD>6 </TD><TD/><TD>6 </TD><TD/><TD>5 </TD><TD/><TD>ns </TD><TD>15,17 </TD><TD>Notes 1, 3 </TD></TR><TR><TH>T13 </TH><TD>D31 ..0 Float Delay </TD><TD/><TD>35 </TD><TD/><TD>27 </TD><TD/><TD>22 </TD><TD>ns </TD><TD>15,17 </TD><TD>Notes 3, 8, 13 </TD></TR><TR><TH>T14 </TH><TD>RESET Setup Time </TD><TD>12 </TD><TD/><TD>12 </TD><TD/><TD>10 </TD><TD/><TD>ns </TD><TD>18 </TD><TD>Notes 1, 3 </TD></TR><TR><TH>T15 </TH><TD>RESET Hold Time </TD><TD>4 </TD><TD/><TD>4 </TD><TD/><TD>3 </TD><TD/><TD>ns </TD><TD>18 </TD><TD>Notes 1, 3 </TD></TR><TR><TH>Continued next page </TH><TD/><TD/></TR><TR><TH>Functional Operating Range: VDD = 5V ±5%; Tease = aoc to 85°C 1. All parameters are specified at 1. 5V unless otherwise noted 2. All output delays are specified at 1. 5V with 50 pf loading unless otherwise noted 3. Relative to CLK2 rising edge 4. Write bus cycle only 5. Referenced to end of cycle when ADS-is de-asserted 6. Hold time reference to end of cycle when ADS is asserted 7. Delay is measured with respect to M/IO-, A31 ..25 8. One CLK2 period 9. Spec only applies when TCB-Is high 10. Spec only applies when TCB-is strapped low 11. 85 pf loading 12. 120 pf loading 13. Tri-State timing is guaranteed, but not tested </TH><TD/><TD/></TR><Caption><P>Figure 10. AC characteristics © Copyright WEITEK 1988 </P></Caption></Table><P>10All Rights Reserved </P><P>WTL 3167 FLOATING-POINT COPROCESSOR </P><P>PRELIMINARY DATA </P><P>September 1988 </P><P>Hardware Designer's Section, continued </P><Table><TR><TH>Symbol </TH><TH>Parameter </TH><TH>3167-016 </TH><TH>3167-020 </TH><TH>3167-025 </TH><TH>Unit </TH><TH>Ref Figure </TH><TH>Notes </TH></TR><TR><TD>Min </TD><TD>Max </TD><TD>Min </TD><TD>Max </TD><TD>Min </TD><TD>Max </TD></TR><TR><TH>T16 </TH><TD>INTR Output Delay </TD><TD/><TD>72 </TD><TD/><TD>62 </TD><TD/><TD>50 </TD><TD>ns </TD><TD>19 </TD><TD>Notes 1, 3 </TD></TR><TR><TH>T17 </TH><TD>INTR Valid Output </TD><TD>6 </TD><TD/><TD>6 </TD><TD/><TD>5 </TD><TD/><TD>ns </TD><TD>19 </TD><TD>Notes 1, 3 </TD></TR><TR><TH>T18 </TH><TD>MCS-Output Delay </TD><TD/><TD>25 </TD><TD/><TD>20 </TD><TD/><TD>17 </TD><TD>ns </TD><TD>13,17 </TD><TD>Notes 1, 7 </TD></TR><TR><TH>T19A </TH><TD>RDY-Output Delay (high to low) </TD><TD/><TD>26 </TD><TD/><TD>24 </TD><TD/><TD>22 </TD><TD>ns </TD><TD>13,14,15, 16,17 </TD><TD>Notes 1, 3, 9, 11 </TD></TR><TR><TH>T19B </TH><TD>RDY-Output Delay (low to high) </TD><TD/><TD>26 </TD><TD/><TD>24 </TD><TD/><TD>22 </TD><TD>ns </TD><TD>14,16,15 </TD><TD>Notes 1,3,9,11 </TD></TR><TR><TH>T20 </TH><TD>RDY-Valid Output </TD><TD>4 </TD><TD/><TD>4 </TD><TD/><TD>4 </TD><TD/><TD>ns </TD><TD>13,15, 16,17 </TD><TD>Notes 1, 3, 9, 11 </TD></TR><TR><TH>T21 </TH><TD>RDY -Tri-State Enable </TD><TD/><TD>25 </TD><TD/><TD>25 </TD><TD/><TD>20 </TD><TD>ns </TD><TD>14,15, 16,17 </TD><TD>Notes 3, 10, 11, 13 </TD></TR><TR><TH>T22 </TH><TD>RDY -Tri-State Disable </TD><TD>5 </TD><TD>25 </TD><TD>5 </TD><TD>25 </TD><TD/><TD>20 </TD><TD>ns </TD><TD>14,15, 16,17 </TD><TD>Notes 3, 10, 11, 13 </TD></TR><TR><TH>T23 </TH><TD>AF32-Tri-State Enable </TD><TD/><TD>31 </TD><TD/><TD>25 </TD><TD/><TD>20 </TD><TD>ns </TD><TD>14,15, 16,17 </TD><TD>Notes 3, 10, 13 </TD></TR><TR><TH>T24 </TH><TD>AF32-Trl-State Disable </TD><TD/><TD>31 </TD><TD/><TD>25 </TD><TD/><TD>20 </TD><TD>ns </TD><TD>14,15, 16,17 </TD><TD>Notes 3, 10, 13 </TD></TR><TR><TH>T25 </TH><TD>AF32-Output Delay </TD><TD/><TD>31 </TD><TD/><TD>25 </TD><TD/><TD>20 </TD><TD>ns </TD><TD>14,15, 16,17 </TD><TD>Notes 3, 10 </TD></TR><TR><TH>T26 </TH><TD>AF32-Valid Output </TD><TD>3 </TD><TD/><TD>3 </TD><TD/><TD>2 </TD><TD/><TD>ns </TD><TD>15 </TD><TD>Notes 3, 10 </TD></TR><TR><TH>Functional Operating Range: VDD =5V ±5%; Tease =O°C to 85°C 1. All parameters are specified at 1.5V unless otherwise noted 2. All output delays are specified at 1. 5V with 50 pf loading unless otherwise noted 3. Relative to CLK2 rising edge 4. Write bus cycle only 5. Referenced to end of cycle when ADS-is de-asserted 6. Hold time reference to end of cycle when ADS is asserted 7. Delay is measured with respect to MIIO-, A31 ..25 8. One CLK2 period 9. Spec only applies when TCB-is high 10. Spec only applies when TCB-is strapped low 11. 85 pf loading 12. 120 pf loading 13. Tri-State timing is guaranteed, but not tested </TH><TD/></TR><Caption><P>Figure 10. AC characteristics, continued </P></Caption></Table><Figure><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_16.jpg"/></Figure><P>TIMING 
</P><P>Output 0-----. </P><P>CL = 120pf for 031 ..0</P><P>pin ~ </P><P>CL = 85pf for RDY</P></Sect></Sect><Sect><H3>--L CL </H3><P><Figure ActualText="I "><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_17.jpg"/>I </Figure>CL = 50pf for all other other signals </P><P>CL includes parasitic capacitance </P><P>Figure 11. Test load for delay measurement </P><P>3.4V -----,-----......,. 
2.5V --+-~#-------~ 
<Figure><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_18.jpg"/></Figure></P><P>CLK2 2.0V -+-::I~f-------+--T-+-------4 </P><P>O.BV -..-...-t--+---------I----tl---+-----~ </P><P>1+---TCHb ---.t TCLb--+I ~------ThHa ---~~---TCLa----~ ~------------Tcy -----------~ </P><P>Figure 12. CLK2 timing diagram </P><P>PRELIMINARY DATA </P><P>September 1988 </P></Sect><Sect><H4>Hardware Designer's Section, continued </H4><P>NON-PIPE LINED BUS CYCLES </P><P>Figure 13 shows two WTL 3167 write cycles with TCBhigh, or NC. Write cycles are performed every time the 80386 broadcasts instructions to the coprocessor. The ROY-output of the WTL 3167 handles the handshaking between the WTL 3167 and the 80386. To acknowledge the current bus cycle, the WTL 3167 asserts RDY-and the 80386 terminates the bus cycle. The first bus write operation does not have the READY-input delayed while the second does. In the delayed READY-write operation, even though the bus does not advance and 031 ..0 is held constant, it is latched in the same cycle it would be if READY-were not delayed. Thus, if the data changes in the time slots indicated in figure 13 with crosshatching, the new data is not used by the WTL 3167. </P><Figure><ImageData src=""/>ClK2 ClK ADSW/R-MilO A31 .. 25 MCS RDYREADY-<Caption><P>Figure 13. Non-pipelined bus write cycle with and without delayed ready, TCB-high, or NC </P></Caption></Figure><Figure><ImageData src=""/><Caption><P>Figure 14 shows a new pipelined bus write cycle with TCB-low. The bus cycle now takes a minimum of three clock cycles. </P></Caption>ClK2 elK </Figure></Sect></Sect></Part><Part><H1>I ~T2LL I, </H1><P>ADS</P></Part><Part><H1>~T~{ ;Ll </H1><P>I I I </P><Figure><ImageData src=""/></Figure><Figure><ImageData src=""/>W/R-MilO A31 ..25 READYRDYAF32I I <Caption><P>Figure 14. Non-pipelined bus write cycle without delayed ready, TCB-low </P><P>© Copyright WEITEK 1988 </P><P>14</P><P>All Rights Reserved </P></Caption></Figure><P>PRELIMINARY DATA </P><P>September 1988 </P><Sect><H4>Hardware Designer's Section, continued </H4><P>Read cycles are performed every time data must be read from the WTL 3167 into the 80386. Figure 15 shows a typical WTL 3167 read cycle. At least one wait state is always inserted during a read cycle to allow the WTL 3167 time to respond. As shown in figure 15, the minimum read cycle takes the same number of clock cycles, independent of the value of TCB-. </P><P>Wait states are fully transparent to the programmer. If READY-is delayed, the data will continue to be driven until READY-is asserted. When the WTL 3167 receives a bus read operation, it turns on its bus drivers even before the data is ready. The dotted lines in figure 15 shows the time slots during which the WTL 3167 is driving the bus with invalid data. Valid data is only present when RDY-is asserted. </P><P>© Copyright WEITEK 1988 </P><Figure><ImageData src=""/>ClK2 ClK </Figure><P>1 1 1 1 1 1 1 I, 1 </P><P>ADS</P><P>!~ </P><P>1 I 1 I 1 1 1 I I I I 1 1 I I I </P><P>W/R</P><P>I~ </P><P>MilO </P><P>A31 ..25 </P><P>I 
I I 
I (Float) I 
</P><P>D31 ..0 I I </P><P>I I </P><P>I I </P><P>I I </P><P>READY-I I I 
1 I I I I I 1 I I 
</P><P>--------~---~---~---~---4---~---~---~---~---~-----</P><P>I I I I T19A I I I 1 </P><P>RDY-: I : 
I I I I I I I I I
</P><P>--------1------1---1---1---·---1---1---1---1-----</P><P>I T21 I I T19A T22 I I I 
I I I I 
</P><P>TCB-low I</P><P>RDY</P><P>198</P></Sect><Sect><H1>: : : l : 0 : :</H1><P>: : </P><P>--------~---~---~---~---~---~---~---~---~---~-----</P><P>I I I I I I I I I 
I I I I I 1 I I 
</P><P>AF32</P><P><Figure><ImageData src=""/></Figure>I I 
I I 
</P><P>Figure 15. Non-pipelined bus read cycle without delayed ready, with both TCB-high and TCB-low </P><P>© Copyright WEITEK 1988 </P><P>PRELIMINARY DATA </P><P>September 1988 </P><Table><TR><TH>Hardware Designer's Section, continued </TH></TR><TR><TH>PIPELINED BUS CYCLES </TH></TR><TR><TH>The WTL 3167 is capable of operating with or without </TH><TD>write cycle. The minimum write bus'. cycle takes the </TD></TR><TR><TH>address pipelining </TH><TD>on </TD><TD>a </TD><TD>cycle-by-cycle basis. </TD><TD>It uses </TD><TD>same number of clock cycles, independent of the value </TD></TR><TR><TH>ADS-and READY-from the 80386 to determine when </TH><TD>of TCB-. </TD></TR><TR><TH>a bus cycle begins. Figure 16 shows a typical pipelined </TH><TD/></TR></Table><P>ClK2 </P><P>ClK </P><Figure><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_25.jpg"/></Figure><P>I </P></Sect><Sect><H1>~tl I.</H1><Sect><H1>~T~2f ;Ll</H1><P>ADS</P><P>I I I I 
I I I I I I I I I I 
</P><P>W/R-</P><P>Wi WI ~ 
cixlT3~ ~T4~~:----r-:~~~I
</P><P>~I............-.,I~I~I-.............. +mT5 ~ i T\rr i </P><P>A31 .. 25 </P></Sect><Sect><H1>MIlO ~~~~I I~ </H1><Sect><H2>I 1 1 ~=fT8azll</H2><P>IILT7_~_ I <Figure ActualText="1 "><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_26.jpg"/>11</Figure></P></Sect></Sect><Sect><H1>)1---1---11 </H1><P>&quot;&quot;&quot;'&quot;r.........--...,.............,.I&amp;&quot;.,,;ILy-&amp;-+-&quot;--...------'''i-''-!r-''--l''-----r-~-1 ---.,----, 
</P><P>~ </P><Figure><ImageData src=""/></Figure><P>1 I I T10 1 I I 1 1 1 T9 1 1 1 </P><P>1 </P><P>READY</P><P>I I </P><Figure><ImageData src=""/>I 1 </Figure><P>I 1 I I I 1 I </P><P>--------~---~---~---~---~---~---~---~---~---~-----</P><P>I I Tl0At t ~T20r I I T~B-Hi9! I i </P><P>RDY-(f;ttt£jj I _ _. I \ I , , I / I 
I 1 1 1 1 1 1 1 1
</P><P>--------1---1---1---,---1---1---1---1---1---1-----</P><P>I T19A' 1 1 1 1 T22 1 T20 I I I 1 1 </P><P>I I 1 I 1 1 1 1 I 1 I I I I I </P><P>AF32</P><Figure><ImageData src=""/></Figure><Figure><ImageData src=""/>I : TCB-Low 1 ....1__RDYI I 1 : --------~---~---~---~---~---~---~---~---</Figure><Figure><ImageData src=""/>1 </Figure><Figure><ImageData src=""/></Figure><Figure><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_33.jpg"/>ClK2 ClK ADSW/R-:-MilO A31 ..25 MCSI I I I I I I I I I I I I I I i I I I I I I I I I I I I I I I I I~ I I ,-J---~~1+r-_&quot;&quot;&quot;&quot;-+------~------~~( I l H--+'--I---~-+-'-----.--' I I I I READYI l I I I I I--------1---1---1---1----I I I I T19A RDYI TCB-High I I I I I I I I I I ---------1-----1-----1-----1-----1-----1-----1-----1-----1-----1------I I I . I I I I I I I RDYAF32Figure 17. Pipelined bus read cycle without delayed ready, with both TCB-high and TCB-low © Copyright WEITEK 1988 All Rights Reserved 18 </Figure><P>PRELIMINARY DATA </P><P>September 1988 </P><Sect><H4>Hardware Designer's Section, continued </H4><P>RESET AND INTERRUPT TIMING </P><P>RESET set-up and hold time and interrupt valid delays are shown in figures 18 and 19. RESET must be synchronous with the 80386' s clock to guarantee proper operation. </P><Figure><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_34.jpg"/>ClK2 ClK <Caption><P>Figure 18. RESET timing </P></Caption></Figure><Figure><ImageData src=""/>ClK2 </Figure><P>ClK </P><P>-I I </P><Figure><ImageData src=""/></Figure><P>Figure 19. Interrupt timing </P><P>The WTL 3167 coprocessor is supported by the UNIX operating system (System V release 3.0). Operating system support includes coprocessor addressing, presence detection at power-up, context-switch handling and emulation. For UNIX operating systems information contact your UNIX supplier. XENIX 386 support is forthcoming. </P><P>The WTL 3167 is also supported by Phar Lap, IGC, and AI architects MS-DOS protected mode environments. MS-DOS protected mode environment support for the WTL 3167 includes coprocessor addressing and presence detection. </P><P>The WEITEK coprocessor can be supported under real mode MS-DOS as well. OEMs that intend to provide MS-DOS real mode support for the WEITEK coprocessor must refer to the Systems Programmer's section. </P><P>C, FORTRAN and Pascal Compilers for the 80386 and WTL 3167 under UNIX V.3 and MS-DOS protected mode are provided by Green Hills, Metaware, Microway, and Silicon Valley Software. </P><P>Lahey Computer Systems offers an MS-DOS real mode FORTRAN compiler. Metaware also provides MSDOS real mode C and Pascal compilers. Contact vendors for details. </P><P>The WEITEK Coprocessor is fully transparent to the programmer using these compilers, as the floating-point operations are specified with familiar high-level language commands. The compilers include a run-time library for transcendental operations. </P><P>Compiler designers and programmers who intend to write WTL 3167 assembly code should refer to the Applications Programmer's section. Systems programmers who need to modify existing operating systems to support the WTL 3167 should refer to the Systems Programmer's section. </P><P>TRANSCENDENTAL ROUTINES LIBRARY </P><P>WEITEK provides a library of transcendental routines to compiler developers. Routines are available through a simple license agreement. </P><Table><TR><TH>Vendor </TH><TH>Product </TH><TH>Phone </TH></TR><TR><TD>AI Architects </TD><TD>OS 386 (MS-DOS protected mode environment) </TD><TD>(617) 577-8052 </TD></TR><TR><TD>Green Hills Software </TD><TD>C, F, P Compilers (UNIX and MS-DOS protected mode) </TD><TD>(818) 246-5555 </TD></TR><TR><TD>IGC </TD><TD>X-AM (MS-DOS protected mode environment) </TD><TD>(408) 986-8373 </TD></TR><TR><TD>Lahey Computer Systems </TD><TD>F Compiler (MS-DOS real mode) </TD><TD>(702) 831-2500 </TD></TR><TR><TD>Metaware </TD><TD>C, P Compilers (UNIX, MS-DOS real and protected mode) </TD><TD>(408) 429-6382 </TD></TR><TR><TD>Microway </TD><TD>C, F, P Compilers (UNIX and MS-DOS protected mode) </TD><TD>(617) 746-7341 </TD></TR><TR><TD>Phar-Lap Software </TD><TD>RUN386 (MS-DOS protected mode environment) </TD><TD>(617) 661-1510 </TD></TR><TR><TD>Silicon Valley Software </TD><TD>C, F, P Compilers (UNIX and MS-DOS protected mode) </TD><TD>(408) 725-8890 </TD></TR><TR><TD>Note: F =Fortran, P =Pascal </TD><TD/></TR><Caption><P>Figure 20. Software tools information </P></Caption></Table><Table><TR><TD>Product </TD><TD>Part Number </TD></TR><TR><TD>UNIX Diagnostics </TD><TD>4800-1167-02 </TD></TR><TR><TD>DOS Diagnostics and Macros </TD><TD>4800-1167-03 </TD></TR><TR><TD>DOS Demos </TD><TD>4800-1167-04 </TD></TR><Caption><P>Figure 21. WEITEK-supplied support software </P></Caption></Table><P>© Copyright WEITEK 1988 </P><P>PRELIMINARY DATA </P><P>September 1988 </P><P>Applications Programmer's Section </P><P>This section provides the information necessary to program the WTL 3167 coprocessor in 80386 assembly language. It is complemented by the WTL 1167 Software Designer's Guide. The WTL 3167 is a code-compatible upgrade of the WTL 1167 coprocessor daughter board. </P><P>The WTL 3167 internal registers and instruction set are first described in detail. Programming the WEITEK coprocessor can be greatly simplified by defining a set of macro instructions. Macro examples and a simple programming example are part of this section. </P><P>REGISTERS </P><P>The WTL 3167 provides a register set of 32 single-precision registers, named wsO through ws31. Pairs of WTL 3167 registers can be used for double-precision operations, allowing up to 16 double-precision registers, numbered wdO, wd2, wd4, ... , wd30. The MSW is stored in the even register and the LSW is stored in the next contiguous odd register (that is, MSW in wsN, LSW in wsN+1). In addition, any 80386 doubleword register can be used to move data, or as the source operand to an arithmetic instruction. The use of register wsO is restricted. (Refer to page 34 for more details on register wsO.) </P><P>PROCESS CONTEXT REGISTER </P><P>The WTL 3167 also provides a 32-bit process context register (PCR) , which can be written to control rounding modes and exception handling. The context register can also be read to save control settings and read various status flags. The format of this register is defined in figure 23. </P><P>MODE SELECTION FIELD </P><P>The uppermost byte of the process context register includes the mode selection field and the mode field. </P><P>The mode selection field (MOSEL) is used during system initialization to set the mode register in the floating-point chips. If MOSEL is set to 1100 when loading the Context Register, only the EM, ee, and AE fields are updated. If MOSEL is set to 0000 the EM, ee, AE fields, and the rounding mode field (MD) are updated. (See figure 24.) </P><P>wdO ~ wd2 ~ wd4 ~ </P><P>wd30 ~ </P><Table><TR><TD>wsO (Restricted) </TD><TD>ws1 </TD></TR><TR><TD>ws2 </TD><TD>ws3 </TD></TR><TR><TD>ws4 </TD><TD>ws5 </TD></TR><TR><TD/><TD/></TR><TR><TD>ws30 </TD><TD>ws31 </TD></TR><Caption><P>Figure 22. WTL 3167 register file </P></Caption></Table><P>31 28 27 24 23 16 15 8 7 o </P><P>MDSEL MD EM cc AE </P><P>Figure 23. Process context register </P><P>MODE FIELD </P><P>The mode field (MD) is used to specify rounding options. Two bits specify one of four rounding modes as defined by the IEEE standard (RN, RZ, RP, RM). A third bit determines the rounding mode used in floating-point-to-integer conversion instructions. It selects either the current rounding mode or the round-to-zero mode. The least-significant bit of the mode field specifies fast mode, (see IEEE Considerations, page 42) and must always be set to 1. </P><P>ACCUMULATED EXCEPTION FIELD </P><P>The accumulated exception field (AE) contains the five exception flags required by the IEEE standard and other WTL 3167-specific exceptions. The AE field is cleared by writing zeros into the corresponding bits of byte zero of the PCR. The accumulated exception flags are formed by the logic &quot;OR&quot; of the AE field and the current instruction's exception status. The flags accumulate all exceptions which have occurred since the user last cleared the AE field. Exceptions are accumulated regardless of the value of the corresponding exception mask field. </P><P>The AE field is shown in figure 25. </P><P>EXCEPTION MASK FIELD </P><P>The next lower PCR byte is the exception mask field (EM). Seven bits are used to enable exception traps. At the conclusion of an instruction, the accumulated exception field is updated and, if an exception occurred and the corresponding bit in the EM field is set low, the WTL 3167 generates an 80386 interrupt by driving the interrupt request output high. The exception mask byte is shown in figure 26. </P><P>Most of the exceptions have the same name as a corresponding 80387 exception and work the same way. The WTL 3167 has an undefined opcode exception, flagged whenever the instruction broadcast by the 80386 is not recognized as a WEITEK instruction. The invalid operation exception is flagged when an invalid operation occurs. The data chain exception is never flagged by the WTL 3167. It has been documented for consistency with the WTL 1167 product. (For a detailed description of the WTL 3167 exception handling refer to IEEE Considerations, page 42.) </P><P>31 30 29 28 27 26 25 24 </P><P>0 0 0 0 RND IIRNDI </P><Table><TR><TH>RND: </TH><TH>00 = Round toward Nearest Value (RN) o 1 = Round toward Zero (RZ) 1 0 = Round toward Positive Infinity (RP) 1 1 = Round toward Negative Infinity (RM) </TH></TR><TR><TD>IRND: </TD><TD>0 1 </TD><TD>= Integer Rounding based on RND = Integer Rounding always toward Zero </TD></TR></Table><P>Figure 24. Mode field </P><P>765 4 3 2 o </P><P>DE IUOEI PE UE OE ZE EE IE </P><Table><TR><TD>DE: </TD><TD>Data Chain Exception </TD></TR><TR><TD>UOE: </TD><TD>Undefined Opcode Exception </TD></TR><TR><TD>PE: </TD><TD>Precision Exception </TD></TR><TR><TD>UE: </TD><TD>Underflow Exception </TD></TR><TR><TD>OE: </TD><TD>Overflow Exception </TD></TR><TR><TD>ZE: </TD><TD>Zero Divide Exception </TD></TR><TR><TD>EE: </TD><TD>Enabled Exception (contains the value of INTR) </TD></TR><TR><TD>IE: </TD><TD>Invalid Operation Exception </TD></TR><Caption><P>Figure 25. Accumulated exception field </P></Caption></Table><P>23 22 21 20 19 18 17 16 </P><P>OM IUOM IPM </P><P>UM OM ZM 1M </P><Table><TR><TD>DM: </TD><TD>Data Chain exception Mask </TD></TR><TR><TD>UOM: </TD><TD>Undefined Opcode exception Mask </TD></TR><TR><TD>PM: </TD><TD>Precision exception Mask </TD></TR><TR><TD>UM: </TD><TD>Underflow exception Mask </TD></TR><TR><TD>OM: </TD><TD>Overflow exception Mask </TD></TR><TR><TD>ZM: </TD><TD>Zero Divide exception Mask </TD></TR><TR><TD>1M: </TD><TD>Invalid Operation exception Mask </TD></TR></Table><P>Figure 26. Exception mask field </P><P>CONDITION CODE FIELD </P><P>The Condition Code Field (CC) is updated only when test or compare instructions are executed. The CC field is updated to reflect the status of the compare operation. At the end of the compare operation the coprocessor status output is encoded and stored in PCR15.. 8. The encoding is shown in figure 27. </P><P>INSTRUCTION SET </P><P>WTL 3167 instructions can be divided into: </P><L><LI><LI_Label>1. </LI_Label><LI_Title>Data movement instructions </LI_Title></LI><LI><LI_Label>2. </LI_Label><LI_Title>Format conversion instructions </LI_Title></LI><LI><LI_Label>3. </LI_Label><LI_Title>Arithmetic instructions </LI_Title></LI><LI><LI_Label>4. </LI_Label><LI_Title>Compare and test instructions </LI_Title></LI><LI><LI_Label>5. </LI_Label><LI_Title>Sign manipulation instructions </LI_Title></LI></L><P>Most WTL 3167 instructions operate on either two WTL 3167 registers or on one WTL 3167 register and the contents of the 80386 data bus. WEITEK coprocessor macro instructions have the format: </P><P>OPCODE Source2/Destination, Source1 </P><P>Source1 and Source2/Destination specify the operand addresses. The operation result is always stored in the same location as Source2. While Source2/Destination always specifies one of the thirty-two WTL 3167 inter</P><P>nal registers, Source1 can either specify an internal </P><P>WTL 3167 FLOATING-POINT COPROCESSOR </P><P>PRELIMINARY DATA </P><P>September 1988 </P><P>register (for register-to-register operations), an immediate constant or the content of a 80386 register (for memory-to-register operations). </P><P>DATA MOVEMENT INSTRUCTIONS </P><P>Data movement instructions move data between the 80386 and a WTL 3167 register, or between two WTL 3167 registers. </P><P>9 8 </P></Sect><Sect><H2>X co </H2><Table><TR><TH>Z </TH><TH>C2 </TH><TH>CO </TH><TH>Meaning </TH></TR><TR><TH>1 </TH><TD>0 </TD><TD>0 </TD><TD>Equal </TD></TR><TR><TH>0 </TH><TD>0 </TD><TD>1 </TD><TD>Less than </TD></TR><TR><TH>0 </TH><TD>0 </TD><TD>0 </TD><TD>Greater than </TD></TR><TR><TH>1 </TH><TD>1 </TD><TD>1 </TD><TD>Unordered </TD></TR></Table><P>15 14 13 12 11 10 </P><P>X z o X X C2 </P><P>X: not defined </P><P>0: bit 13 must be set to zero </P><P>Figure 27. Condition code field </P><P>WFLD ws1, ws2 ; load ws 1 from ws2 </P><P>WFLD ws21 , EAX load ws21 from EAX </P><P>WFLD ws4, PI load ws4 with constant PI (declared elsewhere) </P><P>WFLD wd4, wd12 load ws4 from ws 12, then load ws5 from ws 13 </P><P>WFLDCTX EAX load Context Register from EAX </P><P>WFPOP ws1 pop a number from 386 stack to ws1 </P><P>WFLDSD ws1, ARRAY, 31 ; load 31 numbers from ARRAY to registers ws1 through ws31 </P><P>WFLDSD ws10, ESI, ECX ; load ECX numbers from ESI to registers starting with ws 10 </P><P>WFST EDX, ws21 ; store ws21 to EDX </P><P>WFSTCTX EAX ; store Context register to EAX </P><P>WFPUSH ws1 ; push ws1 onto the 386 stack </P><P>WFSTSD wsO, ARRAY, 32 ; store all 32 registers to ARRAY </P><P>WFSTSD ws10, EDI, ECX ; store ECX registers from ws10 to EDI </P><P>WFSTRL EAX ; store revision level to EAX </P><P>Figure 28. Examples of data movement instructions </P><P>FORMAT CONVERSION INSTRUCTIONS </P><P>The WTL 3167 provides instructions for converting from any data type supported (single-precision, double-precision, 32-bit integer) to any other type. See figure 29. </P><Table><TR><TD>WFLOAT </TD><TD>ws1, ws10 </TD><TD>; convert integer ws10 to single-precision ws 1 </TD></TR><TR><TD>WFLOAT </TD><TD>wd4, ws13 </TD><TD>; convert integer ws13 to double-precision wd4 </TD></TR><TR><TD>WFLOAT </TD><TD>ws3, EAX </TD><TD>; convert integer EAX to single-precision ws3 </TD></TR><TR><TD>WFLOAT </TD><TD>wd6, EBX </TD><TD>; convert integer EBX to double-precision wd6 </TD></TR><TR><TD>WFLOAT </TD><TD>wd10, 123456 </TD><TD>; load wd 10 with the constant 123456.0 </TD></TR><TR><TD>WFIX </TD><TD>ws1, ws4 </TD><TD>; convert single-precision ws4 to integer ws1 </TD></TR><TR><TD>WFIX </TD><TD>ws3, wd10 </TD><TD>; convert double-precision wd10 to integer ws3 </TD></TR><TR><TD>WFIX </TD><TD>ws5, EBX </TD><TD>; convert Single-precision EBX to integer ws5 </TD></TR><TR><TD>WFCVT </TD><TD>ws1, wd14 </TD><TD>; convert double-precision wd14 to single-precision ws1 </TD></TR><TR><TD>WFCVT </TD><TD>ws8, EBX </TD><TD>; convert double-precision (EBX, ws1) to single-precision ws8 </TD></TR><TR><TD>WFCVT </TD><TD>wd10, ws9 </TD><TD>; convert single-precision ws9 to double-precision wd 10 </TD></TR><TR><TD>WFCVT </TD><TD>wd26, EAX </TD><TD>; convert single-precision EAX to double-precision wd26 </TD></TR><Caption><P>Figure 29. Examples of format conversion instructions </P></Caption></Table><P>© Copyright WEITEK 1988 </P><P>PRELIMINARY DATA </P><P>September 1988 </P><P>Applications Programmer's Section, continued </P><P>ARITHMETIC INSTRUCTIONS </P><P>The WTL 3167 provides the four basic arithmetic functions as well as square root. In the subtraction instruction, the Source2/Destination operand is subtracted from the Source1 operand. The reverse subtraction reverses the operands from the standard subtract instruction. The division instruction divides the Source1 operand by the Source2/Destination. The single-precision multiply/accumulate operation multiplies the operands specified by Source1 and Source2 and adds the result to the contents of register ws2. The double-precision multiply/accumulate operation with single-precision inputs multiplies the single-precision operands specified by Source1 and Source2 and adds the result to the contents of register wd2. The doubleprecision multiply/accumulate operation with doubleprecision inputs mUltiplies the double-precision operands specified by Source1 and Source2 and adds the result to the contents of register wd2. </P><Table><TR><TH>WFADD </TH><TH>ws6, ws13 </TH><TH>; add ws13 into ws6 </TH></TR><TR><TD>WFADD </TD><TD>wd14, wd20 </TD><TD>; add wd20 into wd14 </TD></TR><TR><TD>WFADD </TD><TD>ws3, EAX </TD><TD>; add EAX into ws3 </TD></TR><TR><TD>WFADD </TD><TD>wd2, EBX </TD><TD>; add (ESX, ws1) into wd2 </TD></TR><TR><TD>WFADD </TD><TD>ws1, 9.0 </TD><TD>; add the constant 9.0 into ws1 </TD></TR><TR><TD>WFSUBR </TD><TD>ws5, ws30 </TD><TD>; set ws5 to ws30 -ws5 </TD></TR><TR><TD>WFSUBR </TD><TD>wd12, wd14 </TD><TD>; set wd12 to wd14 -wd12 </TD></TR><TR><TD>WFSUBR </TD><TD>ws3, EDX </TD><TD>; set ws3 to EDX -ws3 </TD></TR><TR><TD>WFSUB </TD><TD>ws5, ws30; </TD><TD>; set ws5 to ws5 -ws30 </TD></TR><TR><TD>WFSUB </TD><TD>ws8, EDX </TD><TD>; set ws8 to ws8 -EDX </TD></TR><TR><TD>WFMUL </TD><TD>ws1, ws2 </TD><TD>; multiply ws2 into ws1 </TD></TR><TR><TD>WFMULN </TD><TD>wd4, wd6 </TD><TD>; set wd4 to (-wd4 X wd6) </TD></TR><TR><TD>WFAMUL </TD><TD>ws5, EAX </TD><TD>; set ws5 to the absolute value of ws5 X </TD><TD>EAX </TD></TR><TR><TD>WFMUL </TD><TD>ws23, 2.0 </TD><TD>; multiply the constant 2.0 into ws23 </TD><TD/></TR><TR><TD>WFMAC </TD><TD>ws10, ws11 </TD><TD>; add ws10 X ws11 into ws2 </TD><TD/></TR><TR><TD>WFMAC </TD><TD>ws9, EAX </TD><TD>; add ws9 X EAX into ws2 </TD><TD/></TR><TR><TD>WFMACD </TD><TD>ws13, ws29 </TD><TD>; add ws13 X ws29 into wd2 </TD><TD/></TR><TR><TD>WFMACD </TD><TD>ws1, ESP </TD><TD>; add ws1 X EBP into wd2 </TD><TD/></TR><TR><TD>WFMACD </TD><TD>wd12, wd28 </TD><TD>; add wd12 X wd28 into wd2 </TD><TD/></TR><TR><TD>WFDIVR </TD><TD>ws3, ws5 </TD><TD>; set ws3 to ws5 -+-ws3 </TD><TD/></TR><TR><TD>WFDIVR </TD><TD>wd16, wd18 </TD><TD>; set wd16 to wd 18 -+-wd 16 </TD><TD/></TR><TR><TD>WFDIVR </TD><TD>ws2, EAX </TD><TD>; set ws2 to EAX -+-ws2 </TD><TD/></TR><TR><TD>WFDIVR </TD><TD>ws7, PI </TD><TD>; set ws2 to PI -+-ws7 </TD><TD/></TR><TR><TD>WFSQRT </TD><TD>ws3, ws5 </TD><TD>; set ws3 to SQRT(ws5) </TD><TD/></TR><TR><TD>WFSQRT </TD><TD>wd10, wd12 </TD><TD>; set wd10 to SQRT(wd12) </TD><TD/></TR><Caption><P>Figure 30. Examples of arithmetic instructions </P></Caption></Table><P>© Copyright WEITEK 1988</P><P>COMPARE AND TEST INSTRUCTIONS </P><P>Compare and test instructions either compare two floating-point values or compare a single floating-point value to zero. The compare instructions compare Source 1 to Source2. Besides comparing the operand to zero, as does the test operation (wftst), test with trap (wftstt) generates an invalid operation exception if the operand is not a valid number (Not a Number, NaN). Test instructions always operate on Source1. Compare and test instructions affect the condition code field of the process context register as shown in figure 27 on page 23. </P><P>SIGN MANIPULATION INSTRUCTIONS </P><P>The WTL 3167 has two functions that manipulate the sign of a floating-point number: negate and absolute value. </P><Table><TR><TD>WFCMPR </TD><TD>ws3, ws4 </TD><TD>; perform reversed comparison </TD></TR><TR><TD>WFCMPRT </TD><TD>wd8, wd10 </TD><TD>; perform reversed comparison and generate </TD></TR><TR><TD/><TD/><TD>; invalid exception if one (or both) of the operands is not a </TD></TR><TR><TD/><TD/><TD>; valid number </TD></TR><TR><TD>WFTST </TD><TD>wd4 </TD><TD>perform the test of wd4 </TD></TR><TR><TD>WFTSTT </TD><TD>ws1 </TD><TD>perform the test of ws 1 and generate </TD></TR><TR><TD/><TD/><TD>invalid exception if the operand is not a valid number </TD></TR></Table><P>Figure 31. Examples of compare and test instructions </P><Table><TR><TD>WFNEG </TD><TD>wS1, ws1 </TD><TD>; negate ws1 </TD></TR><TR><TD>WFNEG </TD><TD>ws1, ws2 </TD><TD>; set ws 1 to -ws2 </TD></TR><TR><TD>WFNEG </TD><TD>wd4, wd6 </TD><TD>; set wd4 to -wd6 </TD></TR><TR><TD>WFNEG· </TD><TD>ws3, EAX </TD><TD>; set ws3 to -EAX </TD></TR><TR><TD>WFABS </TD><TD>ws3, ws4 </TD><TD>; set ws3 to the absolute value of ws4 </TD></TR><TR><TD>WFABS </TD><TD>wd10, wd10 </TD><TD>; coerce wd10 to its absolute value </TD></TR></Table><P>Figure 32. Examples of sign manipulation instructions </P><P>© Copyright WEITEK 1988 </P><P>PRELIMINARY DATA </P><P>September 1988 </P><P>Applications Programmer's Section, continued </P><P>PROGRAMMING EXAMPLE </P><P>The following example shows the code for a 4 X 4 The variables x, y, z, and ware in memory locations X, matrix transformation written using the macros proY, Z, and W. The variables x', y', z', and w' are stored vided by WEITEK. back in memory location X, Y, Z, and W. </P><P>The matrix coefficients all, ..., a44 are assumed to be already stored in the WTL 3167 registers ws16-ws31. </P><P>r-</P><P>-</P><P>a11 a12 a13 a14 a21 a22 a23 a24 </P><P>y' z'</P><P>[x y z ~ [x' w] </P></Sect><Sect><P>a31 a32 a33 a34 a41 a42 a43 a44 </P><P>...... </P><P>-</P><P>Figure 33. Matrix multiplication </P><Table><TR><TH>Mav </TH><TH>EAX, X </TH><TH>; load x into 386 EAX register </TH></TR><TR><TD>WFLD </TD><TD>ws4, EAX </TD><TD>; load x into ws4 </TD></TR><TR><TD>MaV </TD><TD>EAX, V </TD><TD>; load y into 386 EAX register </TD></TR><TR><TD>WFLD </TD><TD>ws5, EAX </TD><TD>; load y into ws5 </TD></TR><TR><TD>MaV </TD><TD>EAX, Z </TD><TD>; load z into 386 EAX register </TD></TR><TR><TD>WFLD </TD><TD>ws6, EAX </TD><TD>; load z into ws6 </TD></TR><TR><TD>MaV </TD><TD>EAX, W </TD><TD>; load w into 386 EAX register </TD></TR><TR><TD>WFLD </TD><TD>ws7, EAX </TD><TD>; load w into ws 7 </TD></TR><TR><TD>WFLD </TD><TD>ws2, ws16 </TD><TD>; move 811 </TD><TD>into ws2 </TD></TR><TR><TD>WFMUL </TD><TD>ws2, ws4 </TD><TD>; ws2 =811 </TD><TD>X x </TD></TR><TR><TD>WFMAC </TD><TD>ws17, ws5 </TD><TD>; ws2 </TD><TD>= (811 </TD><TD>X x) + (821 </TD><TD>X </TD><TD>y) </TD></TR><TR><TD>WFMAC </TD><TD>ws18, ws6 </TD><TD>; ws2 </TD><TD>= (811 </TD><TD>X x) + (821 </TD><TD>X </TD><TD>y) + (831 </TD><TD>X z) </TD></TR><TR><TD>WFMAC </TD><TD>ws19, ws7 </TD><TD>; ws2 </TD><TD>= (811 </TD><TD>X x) + (821 </TD><TD>X </TD><TD>y) + (831 </TD><TD>X </TD><TD>z) + (841 </TD><TD>X </TD><TD>w) </TD></TR><TR><TD>WFST </TD><TD>EAX, ws2 </TD><TD>; store x' </TD><TD/><TD/><TD/></TR><TR><TD>MaV </TD><TD>X, EAX </TD><TD>; store x' into memory location X </TD><TD/><TD/><TD/></TR><TR><TD>WFLD </TD><TD>ws2, ws20 </TD><TD>; move 812 into R2 </TD><TD/><TD/><TD/></TR><TR><TD>WFMUL </TD><TD>ws2, ws4 </TD><TD>; ws2 </TD><TD>=812 </TD><TD>X </TD><TD>X </TD><TD/><TD/><TD/></TR><TR><TD>WFMAC </TD><TD>ws21, ws5 </TD><TD>; ws2 </TD><TD>= (812 </TD><TD>X x) + (822 </TD><TD>X </TD><TD>y) </TD><TD/><TD/><TD/></TR><TR><TD>WFMAC </TD><TD>ws22, ws6 </TD><TD>; ws2 </TD><TD>= (812 </TD><TD>X x) + (822 </TD><TD>X </TD><TD>y) + (832 </TD><TD>X </TD><TD>z) </TD><TD/><TD/></TR><TR><TD>WFMAC </TD><TD>ws23, ws7 </TD><TD>; ws2 </TD><TD>= (812 </TD><TD>X </TD><TD>x) + (822 </TD><TD>X </TD><TD>y) + (832 </TD><TD>X </TD><TD>z) + (a42 </TD><TD>X </TD><TD>w) </TD></TR><TR><TD>WFST </TD><TD>EAX, ws2 </TD><TD>; store y' </TD><TD/><TD/><TD/></TR><TR><TD>MaV </TD><TD>V, EAX </TD><TD>. ; store y' into memory location V </TD><TD/><TD/><TD/></TR><TR><TD>WFLD </TD><TD>ws2, ws24 </TD><TD>; move a13 into ws2 </TD><TD/><TD/><TD/></TR><TR><TD>WFMUL </TD><TD>ws2, ws4 </TD><TD>; ws2 </TD><TD>=a13 </TD><TD>X </TD><TD>x </TD><TD/><TD/><TD/></TR><TR><TD>WFMAC </TD><TD>ws25, ws5 </TD><TD>; ws2 </TD><TD>= (a13 </TD><TD>X </TD><TD>x) + (a23 X </TD><TD>y) </TD><TD/><TD/><TD/></TR><TR><TD>WFMAC </TD><TD>ws26, ws6 </TD><TD>; ws2 </TD><TD>= (a13 </TD><TD>Xx) + (823 </TD><TD>X </TD><TD>y) + (a33 </TD><TD>X </TD><TD>z) </TD><TD/><TD/></TR><TR><TD>WFMAC </TD><TD>ws27, ws7 </TD><TD>; ws2 </TD><TD>= (a13 </TD><TD>X </TD><TD>x) + (a23 X </TD><TD>y) + (a33 </TD><TD>X </TD><TD>z) + (a43 </TD><TD>X </TD><TD>w) </TD></TR><TR><TD>WFST </TD><TD>EAX, ws2 </TD><TD>; store z' </TD><TD/><TD/><TD/></TR><TR><TD>MaV </TD><TD>Z, EAX </TD><TD>.; </TD><TD>store z' into memory location Z </TD><TD/><TD/><TD/></TR><TR><TD>WFLD </TD><TD>ws2, ws28 </TD><TD>; move a14 into ws2 </TD><TD/><TD/><TD/></TR><TR><TD>WFMUL </TD><TD>ws2, ws4 </TD><TD>; ws2 </TD><TD>=a14 </TD><TD>X </TD><TD>x </TD><TD/><TD/><TD/></TR><TR><TD>WFMAC </TD><TD>ws29, ws5 </TD><TD>; ws2 </TD><TD>= (a14 </TD><TD>X x) + (a24 </TD><TD>X </TD><TD>y) </TD><TD/><TD/><TD/></TR><TR><TD>WFMAC </TD><TD>ws30, ws6 </TD><TD>; ws2 </TD><TD>= (a14 </TD><TD>X </TD><TD>x) + (824 </TD><TD>X </TD><TD>y) + (a34 </TD><TD>X </TD><TD>z) </TD><TD/><TD/></TR><TR><TD>WFMAC </TD><TD>ws31, ws7 </TD><TD>; ws2 </TD><TD>= (a14 X </TD><TD>x) + (a24 </TD><TD>X </TD><TD>y) + (a34 </TD><TD>X z) + (a44 </TD><TD>X </TD><TD>w) </TD></TR><TR><TD>WFST </TD><TD>EAX, ws2 </TD><TD>; store w' </TD><TD/><TD/><TD/></TR><TR><TD>MaV </TD><TD>W, EAX </TD><TD>; store w' into memory location W </TD><TD/><TD/><TD/></TR><Caption><P>Figure 34. Matrix transformation in assembly language </P></Caption></Table><Sect><H4>PRELIMINARY DATA </H4><P>September 1988 </P><P>Applications Programmer's Section, continued </P><P>INSTRUCTION SUMMARY </P><P>Figure 35 summarizes the WTL 3167 instruction set macros. All WTL 3167 register names begin with &quot;w&quot;. We follow the &quot;w&quot; with either &quot;s&quot; for single, &quot;d&quot; for double, or &quot;x&quot; meaning either &quot;s&quot; or &quot;d&quot;. The register name ends with the letter &quot;t&quot; or &quot;f&quot;. &quot;t&quot; stands for &quot;to&quot; and &quot;f&quot; stands for &quot;from&quot;. For most instructions, wxt is the destination register and wxf is the source register. </P><P>Data Movement 
WFLD wst, wsf ; load: wst =wsf 
WFLD wst, data ; load: wst = 386 data 
WFLD wdt, wdf ; load: wdt = wdf 
WFLDCTX ereg ; load: CTX = 386 E-register 
WFPOP wst ; pop wst from the 386 stack 
WFPOP wdt ; pop two doublewords from the 386 stack to wdt 
WFLDSD wst, addr, count ; block move: wst array = 386 memory 
</P><P>WFST ereg, wst ; store: 386 E-register = wst 
WFST ereg, wst, opcode ; store: 386 ereg = ereg &lt;opcode&gt; wst 
WFSTCTX ereg ; store: 386 E-register = CTX 
WFSTCTX ereg, opcode ; store: 386 ereg = ereg &lt;opcode&gt; CTX 
WFPUSH wst ; push wst onto the 386 stack 
WFPUSH wdt ; push wdt (two doublewords) onto the 386 stack 
WFSTSD wst, addr, count ; block move: 386 memory = wst array 
WFSTRL EAX ; store revision level to EAX 
</P><P>. Format Conversion WFLOA T wxt, wsf ; convert integer wsf to floating wxt WFLOA T wxt, data ; convert integer 386 data to floating wxt WFIX wst, wxf ; convert floating wxf to integer wst WFIX wst, data ; convert floating (386 data) to integer wst </P><P>WFCVT wst, wdf ; convert wdf to wst 
WFCVT wst, data ; convert double-precision (386 data and ws1) to wst 
WFCVT wdt, wsf ; convert wsf to wdt 
WFCVT wdt, data ; convert single-precision 386. data to wdt 
</P><P>(continued next page) </P><P>Figure 35. The WTL 3167 instruction set macros </P><Table><TR><TH>Four-Function Arithmetic WFADD wxt, wxf WFADD wxt, data WFSUBR wxt, wxf WFSUBR wxt, data WFSUB wxt, wxf WFSUB wxt, data WFMUL wxt, wxf WFMUL wxt, data WFMULN wxt, wxf WFMULN wxt, data WFAMUL wxt, wxf WFAMUL wxt, data WFMAC wst, wsf WFMAC wst, data WFMACD wst, wsf WFMACD wst, data WFMACD wdt, wdf WFDIVR wxt, wxf WFDIVR wxt, data WFSQRT wxt, wxf WFSQRT wxt, data Compare and Test WFCMPR wxt, wxf; WFCMPR wxt, data WFCMPRT wxt, wxf WFCMPRT wxt, data WFTST wxf WFTST data WFTST ata, ws1 WFTSTT wxf WFTSTT data WFTSTT data, ws1 Sign Manipulation WFNEG wxt, wxf WFNEG wxt, data WFABS wxt, wxf WFABS wxt, data Paging Directives WFSPAGE WFDPAGE ; add: wxt = wxt + wxf ; add: wxt = wxt + (386 data) ; reversed subtract: wxt = wxf -wxt ; reversed subtract: wxt = (386 data) -wxt ; subtract: wxt = wxt -wxf (1) ; subtract: wxt = wxt -(386 data) (1) ; multiply: wxt = wxt X wxf ; multiply: wxt = wxt X (386 data) ; negative multiply: wxt = -wxt X wxf ; negative multiply: wxt = -wxt X (386 data) ; absolute multiply: wxt = Iwxt X wxfl ; absolute multiply: wxt = Iwxt X (386 data) I ; multiply and accumulate: ws2 = ws2 + wst X wsf ; multiply and accumulate: ws2 = ws2 + wst x (386 data) ; multiply and accumulate: wd2 = wd2 + wst X wsf (1) ; multiply and accumulate: wd2 = wd2 + wst X (386 data) (1) ; multiply and accumulate: wd2 = wd2 X wdf (1) ; reversed divide: wxt = wxf + wxt ; reversed divide: wxt = (386 data) Iwxt ; square root: wxt = sqrt (wxf) (1) ; square root: wxt = sqrt (data) (1) ; reversed compare: set CTX flags for (wxf -wxt) ; reversed compare: set CTX for (386 data) -wxt ; reversed compare with trap: set CTX flags for (wxf -wxt) ; reversed compare with trap: set CTX for (386 data) -wxt ; test: set CTX flags for (wxf -0) ; test: set CTX flags for (386 data) -0 ; test: set CTX flags for double-precision (386 data, ws1) -0 ; test with trap: set CTX flags for (wxf -0) ; test with trap: set CTX flags for (386 data) -0 ; test with trap: set CTX flags for (386 data, ws 1) -0 ; negate: wxt = -wxf ; negate: wxt = -(386 data) ; absolute value: wxt = Iwxfl ; absolute value: wxt = 1386 datal ; force next wfld/wfst to single-precision page ; force next wfld/wfst to double-precision page </TH></TR><TR><TH>(1) These instructions are not available on the WTL 11 67 </TH></TR><Caption><P>Figure 35. The WTL 3167 instruction set macros, continued © Copyright WEITEK 1988 </P></Caption></Table><P>30</P><P>All Rights Reserved </P><P>PRELIMINARY DATA </P><P>September 1988 </P><Sect><H4>Applications Programmer's Section, continued </H4><P>INSTRUCTION SET-MACHINE'S POINT OF VIEW </P><P>The WTL 3167 is a memory-mapped device. The coprocessor is mapped in the physical memory area ranging from COOOOOOO hex to COOOFFFF hex. A given address in this memory area selects the coprocessor, indicates the instruction which the WTL 3167 has to perform, and specifies the location of Source 1 and Source2/Destination. Figure 36 shows how the WTL 3167 views a 32-bit address word. </P><P>COPROCESSOR SELECT </P><P>The most-significant 16 bits of the physical address identify a coprocessor instruction. If the upper bits do not fall in the COOO-C1 FF range, the address does not specify a WEITEK command and is then ignored by the WTL 3167. To ensure compatibility with future devices, we recommend that you set the coprocessor select field to COOO when specifying a WTL 3167 instruction. </P><P>OPCODE FIELD </P><P>The next six bits specify the coprocessor instruction to be executed. Figure 37 provides the binary and hexadecimal offset, the hexadecimal number obtained by placing the six opcode bits into the opcode field of the address, for the WTL 3167 instructions. </P><P>OPERAND FIELDS </P><P>The five bits of the Source1 and Source2/Destination fields identify the registers that will provide sources and destination for the instruction. If Source1 is set to zero, the Source1 data is moved over the system data bus. In order to take advantage of the 80386 blockmove instruction (refer to Arrangement of Fields to Accommodate Block Moves on page 34) the Source1 field is split into a three-bit and a two-bit field. The two-bit field occupies the two least-significant bits of the address. </P><P>31 16 15 10 9 7 6 2 1 0 </P><Table><TR><TH>Coprocessor Select Field </TH><TH>Opcode </TH><TH>Source1 MSBs </TH><TH>Source21 Destination </TH><TH>.~ </TH></TR></Table><P>source1~ </P><P>LSBs </P><P>Figure 36. WTL 3167 view of 80386 address word </P><P>© Copyright WEITEK 1988</P><P>INSTRUCTION ENCODING </P><P>Figures 37 and 38 show the mnemonic and the encoding for both opcode and operands (Source 1 and Source2/destination) . </P><Table><TR><TD>OpcodeMnemonic </TD><TD>BinaryValue </TD><TD>Hex Offset </TD><TD>OpcodeMnemonic </TD><TD>BinaryValue </TD><TD>Hex Offset </TD></TR><TR><TD>ADD.S </TD><TD>000000 </TD><TD>0000 </TD><TD>ADD.D </TD><TD>100000 </TD><TD>8000 </TD></TR><TR><TD>LOAD.S </TD><TD>000001 </TD><TD>0400 </TD><TD>LOAD.D </TD><TD>100001 </TD><TD>8400 </TD></TR><TR><TD>MUL.S </TD><TD>000010 </TD><TD>0800 </TD><TD>MUL.D </TD><TD>100010 </TD><TD>8800 </TD></TR><TR><TD>STOR.S </TD><TD>000011 </TD><TD>OCOO </TD><TD>STOR.D </TD><TD>100011 </TD><TD>8COO </TD></TR><TR><TD>SUBR.S </TD><TD>000100 </TD><TD>1000 </TD><TD>SUBR.D </TD><TD>100100 </TD><TD>9000 </TD></TR><TR><TD>DIV.S </TD><TD>000101 </TD><TD>1400 </TD><TD>DIV.D </TD><TD>100101 </TD><TD>9400 </TD></TR><TR><TD>MULN.S </TD><TD>000110 </TD><TD>1800 </TD><TD>MULN.D </TD><TD>100110 </TD><TD>9800 </TD></TR><TR><TD>FLOAT.S </TD><TD>000111 </TD><TD>1COO </TD><TD>FLOAT.D </TD><TD>100111 </TD><TD>9COO </TD></TR><TR><TD>CMPT.S </TD><TD>001000 </TD><TD>2000 </TD><TD>CMPT.D </TD><TD>101000 </TD><TD>AOOO </TD></TR><TR><TD>TSTT.S </TD><TD>001001 </TD><TD>2400 </TD><TD>TSTT.D </TD><TD>101001 </TD><TD>A400 </TD></TR><TR><TD>NEG.S </TD><TD>001010 </TD><TD>2800 </TD><TD>NEG.D </TD><TD>101010 </TD><TD>A800 </TD></TR><TR><TD>ABS.S </TD><TD>001011 </TD><TD>2COO </TD><TD>ABS.D </TD><TD>101011 </TD><TD>ACOO </TD></TR><TR><TD>CMP.S </TD><TD>001100 </TD><TD>3000 </TD><TD>CMP.D </TD><TD>101100 </TD><TD>BOOO </TD></TR><TR><TD>TST.S </TD><TD>001101 </TD><TD>3400 </TD><TD>TST.D </TD><TD>101101 </TD><TD>B400 </TD></TR><TR><TD>AMUL.S· </TD><TD>001110 </TD><TD>3800 </TD><TD>AMUL.D </TD><TD>101110 </TD><TD>B800 </TD></TR><TR><TD>FIX.S </TD><TD>001111 </TD><TD>3COO </TD><TD>FIX.D </TD><TD>101111 </TD><TD>BCOO </TD></TR><TR><TD>CVTS.D </TD><TD>010000 </TD><TD>4000 </TD><TD>LDCTX </TD><TD>110000 </TD><TD>COOO </TD></TR><TR><TD>CYTD.S </TD><TD>010001 </TD><TD>4400 </TD><TD>STCTX </TD><TD>110001 </TD><TD>C400 </TD></TR><TR><TD>MAC.S </TD><TD>010010 </TD><TD>4800 </TD><TD>MACD.S </TD><TD>110010 </TD><TD>C800 </TD></TR><TR><TD>SQRT.S </TD><TD>010011 </TD><TD>4COO </TD><TD>SQRT.D </TD><TD>110011 </TD><TD>CCOO </TD></TR><TR><TD>MACD.D </TD><TD>010100 </TD><TD>5000 </TD><TD>LOADD.D </TD><TD>110100 </TD><TD>0000 </TD></TR><TR><TD>SUB.S </TD><TD>010101 </TD><TD>5400 </TD><TD>STORD,D </TD><TD>110100 </TD><TD>0000 </TD></TR><TR><TD/><TD/><TD/><TD>SUB.D </TD><TD>110101 </TD><TD>D400· </TD></TR><TR><TD>Note: .S in the opcode field stands for single-precision while .D stands for double-precision. </TD></TR><Caption><P>Figure 37. Opcode encoding </P></Caption></Table><P>© Copyright WEITEK 1988 </P><P>32</P><P>PRELIMINARY DATA </P><P>September 1988 </P><P>Applications Programmer's Section, continued </P><P>GENERATING WTL 3167 INSTRUCTIONS WITH 80386 MEMORY MOVES </P><P>Suppose that two single-precision numbers, stored in the WTL 3167 registers F1 and T2, need to be added and the result stored in T2. Since the coprocessor is mapped in the memory range COOOOOOO-COOOEFFF hex, the instruction will be specified by the following coprocessor select, opcode, and operand address fields: </P><P>COPROCESSOR SELECT = COOO 0000 hex OPCODE = ADD. S = 0000 hex Source1 = F1 = 01 hex Source2/Destination = T2 = 08 hex </P><P>The 80386 address specifying the floating-point instruction is then given by: </P><P>A31 ..Ao = C0000009 hex </P><P>An 80386 move instruction which generates a physical address of C0000009 hex causes the WTL 3167 to execute the floating-point addition. </P><P>A LOW-LEVEL REPRESENTATION OF THE WTL 3167 INSTRUCTION SET </P><P>We can see from the previous example that the singleprecision WFADD instruction appears in the 80386's memory space as an array of 1024 consecutive addresses, one for each combination of 32 X 32 operands. Thus, there is a natural low-level representation of WTL 3167 instructions as arrays of memory addresses. The array starting location is determined by the specific opeode shown in figure 37. The elements of the array can be represented by the operand offset values provided in figure 38. </P><Table><TR><TH>Source21 Destination Mnemonic </TH><TH>Decimal Value </TH><TH>Hex Offset </TH><TH>Source1 Mnemonic </TH><TH>Decimal Value </TH><TH>Hex Offset </TH></TR><TR><TH>TO </TH><TD>0 </TD><TD>00 </TD><TD>FO </TD><TD>0 </TD><TD>00 </TD></TR><TR><TH>T1 </TH><TD>1 </TD><TD>04 </TD><TD>F1 </TD><TD>1 </TD><TD>01 </TD></TR><TR><TH>T2 </TH><TD>2 </TD><TD>08 </TD><TD>F2 </TD><TD>2 </TD><TD>02 </TD></TR><TR><TH>T3 </TH><TD>3 </TD><TD>OC </TD><TD>F3 </TD><TD>3 </TD><TD>03 </TD></TR><TR><TH>T4 </TH><TD>4 </TD><TD>10 </TD><TD>F4 </TD><TD>4 </TD><TD>80 </TD></TR><TR><TH>T5 </TH><TD>5 </TD><TD>14 </TD><TD>F5 </TD><TD>5 </TD><TD>81 </TD></TR><TR><TH>T6 </TH><TD>6 </TD><TD>18 </TD><TD>F6 </TD><TD>6 </TD><TD>82 </TD></TR><TR><TH>T7 </TH><TD>7 </TD><TD>1C </TD><TD>F7 </TD><TD>7 </TD><TD>83 </TD></TR><TR><TH>T8 </TH><TD>8 </TD><TD>20 </TD><TD>F8 </TD><TD>8 </TD><TD>100 </TD></TR><TR><TH>T9 </TH><TD>9 </TD><TD>24 </TD><TD>F9 </TD><TD>9 </TD><TD>101 </TD></TR><TR><TH>T10 </TH><TD>10 </TD><TD>28 </TD><TD>F10 </TD><TD>10 </TD><TD>102 </TD></TR><TR><TH>T11 </TH><TD>11 </TD><TD>2C </TD><TD>F11 </TD><TD>11 </TD><TD>103 </TD></TR><TR><TH>T12 </TH><TD>12 </TD><TD>30 </TD><TD>F12 </TD><TD>12 </TD><TD>180 </TD></TR><TR><TH>T13 </TH><TD>13 </TD><TD>34 </TD><TD>F13 </TD><TD>13 </TD><TD>181 </TD></TR><TR><TH>T14 </TH><TD>14 </TD><TD>38 </TD><TD>F14 </TD><TD>14 </TD><TD>182 </TD></TR><TR><TH>T15 </TH><TD>15 </TD><TD>3C </TD><TD>F15 </TD><TD>15 </TD><TD>183 </TD></TR><TR><TH>T16 </TH><TD>16 </TD><TD>40 </TD><TD>F16 </TD><TD>16 </TD><TD>200 </TD></TR><TR><TH>T17 </TH><TD>17 </TD><TD>44 </TD><TD>F17 </TD><TD>17 </TD><TD>201 </TD></TR><TR><TH>T18 </TH><TD>18 </TD><TD>48 </TD><TD>F18 </TD><TD>18 </TD><TD>202 </TD></TR><TR><TH>T19 </TH><TD>19 </TD><TD>4C </TD><TD>F19 </TD><TD>19 </TD><TD>203 </TD></TR><TR><TH>T20 </TH><TD>20 </TD><TD>50 </TD><TD>F20 </TD><TD>20 </TD><TD>280 </TD></TR><TR><TH>T21 </TH><TD>21 </TD><TD>54 </TD><TD>F21 </TD><TD>21 </TD><TD>281 </TD></TR><TR><TH>T22 </TH><TD>22 </TD><TD>58 </TD><TD>F22 </TD><TD>22 </TD><TD>282 </TD></TR><TR><TH>T23 </TH><TD>23 </TD><TD>5C </TD><TD>F23 </TD><TD>23 </TD><TD>283 </TD></TR><TR><TH>T24 </TH><TD>24 </TD><TD>60 </TD><TD>F24 </TD><TD>24 </TD><TD>300 </TD></TR><TR><TH>T25 </TH><TD>25 </TD><TD>64 </TD><TD>F25 </TD><TD>25 </TD><TD>301 </TD></TR><TR><TH>T26 </TH><TD>26 </TD><TD>68 </TD><TD>F26 </TD><TD>26 </TD><TD>302 </TD></TR><TR><TH>T27 </TH><TD>27 </TD><TD>6C </TD><TD>F27 </TD><TD>27 </TD><TD>303 </TD></TR><TR><TH>T28 </TH><TD>28 </TD><TD>70 </TD><TD>F28 </TD><TD>28 </TD><TD>380 </TD></TR><TR><TH>T29 </TH><TD>29 </TD><TD>74 </TD><TD>F29 </TD><TD>29 </TD><TD>381 </TD></TR><TR><TH>T30 </TH><TD>30 </TD><TD>78 </TD><TD>F30 </TD><TD>30 </TD><TD>382 </TD></TR><TR><TH>T31 </TH><TD>31 </TD><TD>7C </TD><TD>F31 </TD><TD>31 </TD><TD>383 </TD></TR><Caption><P>Figure 38. Operands encoding </P></Caption></Table><P>Returning to our example, the single-precision WFADD instruction has the low-level mnemonic ADD. S in figure 37. If we declare ADD.S as a memory array starting at location oeOOOOOOO, and we declare the operand offsets F1 as 01h and T2 as 08h, our coding of the ADD.S ws2, ws1 instruction becomes: </P><P>MOV ADD.S [T5 + F1], AL </P><P>It is important to notice that when Source 1 is set to zero (FO), it actually specifies an operand not resisting is the register file and being provided by the data bus. When Source2/Destination is set to zero (TO), it looks like any other register in the register file. </P><P>AVOIDING OVERLAPPED DOUBLEWORD REFERENCES </P><P>There is a pitfall to avoid while using the low-level mnemonics to code WTL 3167 instructions: you will obtain incorrect results if you indiscriminately choose to access WTL 3167 memory with a double word transfer when a byte-sized transfer would have sufficed. The pitfall applies to instructions involving only WTL 3167 registers, and not any data on the 80386 bus, as in the previous example. </P><P>For example, suppose we want to provide a lowlevel encoding for WFAMUL ws8,ws14. In this instruction, the 80386 data bus is ignored by the WTL 3167. So any memory access to the address AMUL.S [T8 + F14] will cause the multiplication to be performed. The instruction with the shortest encoding is: </P><P>MOV AMUL.S[T8 + F14], AL </P><P>To understand the pitfall, let us see what happens if we instead code an unnecessary doubleword memory access: </P><P>MOV AMUL.S[T8 + F14], EAX </P><P>By adding the offsets of AMUL.S, T8, and F14 to the WTL 3167 base address oeoOOOOOOh, we find that we have encoded a doubleword write to memory location Oe00039A2h. The memory address is not a multiple of four, so the doubleword being written is not aligned on a doubleword boundary. When doublewords are not aligned, the 80386 splits the memory write into two operations, as shown in figure 39. First it will write the bottom half of EAX to the top half of Oe00039AO; then it will write the top half of EAX to the bottom half of Oe00039A4. The WTL 3167 will misinterpret this as two consecutive floating-point instructions, instead of the single AMUL.S that was intended. </P><P>ARRANGEMENT OF FIELDS TO ACCOMMODATE BLOCK MOVES </P><P>The 80386 has an instruction, REP MOVSD, that moves a block of doublewords from one memory location to another. Three 80386 registers must be initialized before the REP MOVSD is executed: EeX holds the number of doublewords to be moved, ESI points to the source of the move, and EDI points to the destination. (The instruction can also be executed with 8086-style addressing, using the registers ex, SI, and 01.) </P><P>The operand fields of a WTL 3167 address have been specifically designed so that a WTL 3167 address can be given as either the source or the destination to a REP MOVSD instruction. Due to the positioning of the destination operand slot two bits from the bottom of the address, T -offsets increase by four for successive WTL 3167 registers. The registers appear as successive doubleword addresses in the 80386 memory space, allowing the REP MOVSD instruction to work correctly. </P><P>I EAX 1 </P><Table><TR><TH>Low </TH><TH/><TH/><TH>High </TH></TR><TR><TD>to AO </TD><TD>, </TD><TD/><TD>to A4 </TD></TR></Table><P>e00039AO A2 A4 A6 </P><P>Figure 39. Erroneous overlapped doubleword transfer to the WTL 1167 space </P><P>© Copyright WEITEK 1988 </P><P>34</P><P>PRELIMINARY DATA </P><P>September 1988 </P><P>Applications Programmer's Section, continued </P><P>SPECIAL INSTRUCTION FORMS NOT PROVIDED BY THE MACRO SET </P><P>The low-level interface presented in this chapter allows for some interesting possibilities not offered by the macro set. Be forewarned, however, that most WTL 3167 software emulation packages will not duplicate the functionality of the low-level interface. Thus, if there is the possibility that your program will run in a system that emulates the WTL 3167 in software, you should restrict yourself to the standard forms of the macro set. </P><P>Single-precision vector arithmetic is accomplished by applying the 80386 block move instruction REP MOVSD to a WTL 3167 address involving arithmetic instead of loading or storing. For example, the following instruction sequence multiplies each element of the doubleword array VECTOR in 80386 memory, into the corresponding element of the WTL 3167 register array ws11 through ws20: </P><Table><TR><TD>MOV </TD><TD>ECX, 10 </TD><TD>load the number of elements of the vector array </TD></TR><TR><TD>MOV </TD><TD>ESI, OFFSET VECTOR </TD><TD>point to the memory vector </TD></TR><TR><TD>MOV </TD><TD>EDI, OFFSET MUL.S[T10] </TD><TD>point to the WFMUL address for ws 10 </TD></TR><TR><TD>REP MOVSD </TD><TD>multiply each VECTOR element into a WTL 3167 register </TD></TR></Table><P>Figure 40. </P><P>Similarly, the REP STOSD instruction could be used to fill an array of WTL 3167 registers with the same value, or to perform arithmetic of the same value applied to consecutive WTL 3167 registers. For example, the following sequence clears the entire WTL 3167 register set to zero: </P><Table><TR><TD>SUB </TD><TD>EAX, EAX </TD><TD>; integer 0 is also floating-point 0 </TD></TR><TR><TD>MOV </TD><TD>ECX, 32 </TD><TD>; there are 32 registers to fill </TD></TR><TR><TD>MOV </TD><TD>EDI, OFFSET LOAD.S[TO] </TD><TD>; first STOSD will load EAX=O to wsO </TD></TR><TR><TD>REP STOSD </TD><TD/><TD>; load each WTL 1167 register with a zero value </TD></TR></Table><P>Figure 41. </P><P>The following sequence multiplies each of the registers ws11 through ws 18 by two: </P><P>MOV EAX, 40000000h ; load single-precision&quot; 2.0&quot; into EAX MOV ECX, 8 ; there are 8 registers to multiply MOV EDI, OFFSET MUL. S [T11 ] ; first STOSD will multiply EAX into ws11 REP STOSD ; multiply each of 8 registers by EAX </P><P>Figure 42. </P><P>© Copyright WEITEK 1988 </P><P>PHYSICAL VERSUS LOGICAL ADDRESSES </P><P>The 80386 has three distinct address spaces: logical, linear, and physical. A logical address consists of a selector and an offset. The segmentation unit translates the logical address space into a 32-bit linear address space. If the paging unit is not enabled, then the 32-bit linear address corresponds to the physical address. Otherwise, the paging unit translates the linear address space into the physical address space. The physical address is what appears on the address pins and is responsible for specifying WTL 3167 instructions. (For more details refer to the Intel 80386 data sheet and the 80386 Programmer's Reference Manual). The logical to physical address translation is fully transparent to the applications programmer. Applications programmers need only to know which logical addresses will be mapped into WTL 3167 physical addresses. </P><P>WTL 3167 MS-DOS REAL MODE ADDRESSING </P><P>This paragraph describes how logical addresses are mapped into physical addresses for the WTL 3167 in the MS-DOS environment. OEMs that support the WTL 3167 under real mode MS-DOS must implement the same address translation scheme described in this paragraph. </P><P>While the 8086 can form addresses only up to 20 bits long, the 80386 has access to 21 bits in real-address mode. For example, assuming a selector value equal to OFFFF hex and an offset of OFFFF hex, in real mode the effective address would be 10FFEF hex (Selector x 6 + Offset = FFFFO hex + FFFF hex = </P><P>10FFEF hex). The 8086 would truncate the high order bit, wrapping this address to OFFEF hex, while the 80386 would preserve the entire 21 bits. 80386 users then have access to extra 65520 bytes of memory that do not conflict with the traditional one megabyte address range for MS-DOS. Such extra memory is enough to accommodate the WEITEK coprocessor. </P><P>In MS-DOS the WTL 3167 resides at logical base address 100000 hex with instructions mapped into addresses 100000 hex to 10EFFF hex. The 80386 paging unit is then used to map logical addresses 100000 hex through 10EFFF hex to the physical address space ranging from COOOOOOO hex through COOOEFFF hex. More details on how to implement this address translation scheme are presented in the Systems Programmer's Section. Thanks to this address translation, real mode programs can access the WTL 3167 coprocessor. MS-DOS applications can address the WTL 3167 by setting a segment register (for example fs) to FFFF hex, adding an address offset of 0010 hex (to access base address 100000 hex), then executing move instructions that generate coprocessor addresses between 100000 hex and 10EFFF hex. </P><Figure><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_37.jpg"/>r-------------------------------Offset Calculation t-Linear ....... Segmentation AddJess Paging Selector Unit ' 32 Unit __________________~_____________J Physical Add~ess WTL ' 32 3167 <Caption><P>Figure 43. Address translation </P></Caption></Figure><P>© Copyright WEITEK 1988 </P><P>36</P><P>PRELIMINARY DATA </P><P>September 1988 </P><P>Applications Programmer's Section, continued </P><P>Assuming that the single-precision add instruction of registers ws1 and ws2 has to be coded under MS-DOS, the following instruction would do: </P><P>mov FFFF:0019h, al </P><P>The address FFFF:0019h is derived as follows: </P><P>COPROCESSOR SEGMENT = FFFF:OOOOh OFFSET TO ADDRESS 100000h = 0010h OPCODE = ADD. S = OOOOh Source1 = F1 = 0001h Source2/Destination = T2 = 0008h </P><P>ACTUAL ADDRESS GENERATED = FFFF:0019h </P><P>The segmented address, written FFFF:0019h, is equivalent to address 100009 hex. The use of the fs segment and the offset of 10 hex is pre-programmed into the WTL 3167 real mode macro set. </P><P>EXECUTION TIMES FOR INDIVIDUAL INSTRUCTIONS </P><P>To estimate WTL 3167 performance, the table in figure 44 may be used. The double-precision memoryto-register estimates include a load ws1 instruction. </P><P>The figures below assume that new instructions are sent to the WTL 3167 within six cycles of the acknowledgment of a transfer by the coprocessor. </P><P>ESTIMATED TIMES FOR TRANSCENDENTAL FUNCTIONS </P><P>Figure 45 gives the execution times for procedures in our library of transcendental functions. The exact times may vary according to the values of the operands handed to the functions; the times in the table are average times. Transcendental routines are provided to compiler vendors with WTL 3167 support. </P><Table><TR><TD>Instruction Type </TD><TD>Single-Precision Register-to-Register </TD><TD>Double-Precision Register-to-Register </TD></TR><TR><TD>LOAD, Compare, ABS ADD, SUB, NEG, Conversion MUL AMUL MULN DIV SQRT MAC MACD.S STORE* </TD><TD>3 cycles 6 cycles 6 cycles 9 cycles 12 cycles 38 cycles 60 cycles 12 cycles 12 cycles 3 cycles </TD><TD>3 cycles 6 cycles 10 cycles 13 cycles 16 cycles 66 cycles 118 cycles 16 cycles </TD></TR><TR><TD>*Store operations require a variable number of cycles because they cannot be performed if any other operation is in progress. </TD></TR><Caption><P>Figure 44. Latency </P></Caption></Table><P>© Copyright WEITEK 1988</P><P>Function Single-Double-Absolute Relative Monotonicity Precision Precision Accuracy(1 ) Accuracy(17) </P><P>SQRT (2) 117 cycles 285 cycles nla (3) 5 ULPs TOT (4) 
SIN (5) 146 292 1 . 6 ULPs (1 8) 5 TOT 
COS (5) 140 285 2.2 5 TOT 
ATAN (6) 157 398 3.0 5 TOT 
EXP (7) 179 401 2.2 5 TOT 
LOG (8) 171 365 2.7 5 TOT 
TAN (9) 188 340 (10) nla (3) 5 ULPs nla (11) 
COTAN (9) 150 372 (10) nla (3) 5 ULPs nla (11) 
ASIN (12) 175 467 nla (3) 5 ULPs nla (11) 
ACOS (12) 175 467 nla (3) 5 ULPs nla (11) 
SINH (13) 185 400 (14) nla (3) 5 ULPs nla (11) 
COSH (13) 185 400 (14) nla (3) 5 ULPs nla (11) 
TANH (15) 194 350 nla (3) 5 ULPs nla (11) 
REM (6) nla nla nla (3) 5 ULPs nla (11) 
MOD (6) nla nla nla (3) 5 ULPs nla (11) 
ASCII-+BINARY (16) .01 ULP .01 ULP To .01 ULP 
BINARY-+ASCII (16) .01 ULP .01 ULP To .01 ULP 
</P><P>Notes: </P><L><LI><LI_Label>1. </LI_Label><LI_Title>As determined by Alex Liu' s II Elefunt&quot; program </LI_Title></LI><LI><LI_Label>2. </LI_Label><LI_Title>Square root can be implemented much faster using the SQRT instruction. The routine is used when running code written for the WTL 1167. The number shown is an average for 100,000 uniformly distributed numbers from 0 through 50,000 </LI_Title></LI><LI><LI_Label>3. </LI_Label><LI_Title>Absolute accuracy tests do not exist for these functions </LI_Title></LI><LI><LI_Label>4. 	</LI_Label><LI_Title>TDT is an abbreviation for lito the degree tested&quot; </LI_Title></LI><LI><LI_Label>5. 	</LI_Label><LI_Title>Average for 50,000 uniformly distributed numbers from 0 through 7T/4, 25,000 uniformly distributed numbers from 7T/4 through 7T/2, and 25,000 uniformly distributed numbers in the range of 7T/2 through 7T </LI_Title></LI><LI><LI_Label>6. 	</LI_Label><LI_Title>Average for 100,000 uniformly distributed numbers from -1 through 1 </LI_Title></LI><LI><LI_Label>7. 	</LI_Label><LI_Title>Average for 100,000 uniformly distributed numbers from -10 through 10 </LI_Title></LI><LI><LI_Label>8. 	</LI_Label><LI_Title>Average for 100,000 uniformly distributed numbers from e-10 through e10 • </LI_Title></LI><LI><LI_Label>9. 	</LI_Label><LI_Title>Average from 0 to 4.1 X 103 </LI_Title></LI><LI><LI_Label>10. </LI_Label><LI_Title>Average from 0 to 6.7 X 107 11 ..Monotonicity has yet to be determined </LI_Title></LI></L><L><LI><LI_Label>12. </LI_Label><LI_Title>Average from 0 to 1 </LI_Title></LI><LI><LI_Label>13. </LI_Label><LI_Title>Average from 0 to 89 </LI_Title></LI><LI><LI_Label>14. </LI_Label><LI_Title>Average from 0 to 710 </LI_Title></LI><LI><LI_Label>15. </LI_Label><LI_Title>Average from 0 to 00 </LI_Title></LI><LI><LI_Label>16. </LI_Label><LI_Title>See figures 46 and 47 </LI_Title></LI><LI><LI_Label>17. </LI_Label><LI_Title>As determined by Cody and Waite's transcendental routines. </LI_Title></LI><LI><LI_Label>18. </LI_Label><LI_Title>ULP is an abbreviation for II units in the last place&quot; </LI_Title></LI></L><P>Figure 45. Average execution times for transcendental functions </P><P>© 	Copyright WEITEK 1988 </P><P>38</P><P>PRELIMINARY DATA </P><P>September 1988 </P><Table><TR><TD>String </TD><TD>Single </TD><TD>Double </TD><TD/></TR><TR><TD>0 1 1.23456 123456. 123456789012345. 1234567890.12345 12345678901234567890. 1234567890.1234567890 1234567890.12345678ge10 12345678901234567890.e10 1.2345678901234567890e38 12.345678901234567890e-38 1.23456e15 1 .23456e-15 </TD><TD>310 384 704 672 1120 1088 1376 1344 1568 1568 1600 1664 832 896 </TD><TD>310 416 704 }672 1152 }1184 1696 1696 1888 1856 1856 2048 864 }896 </TD><TD>6 Digits 15 Digits 20 Digits(andoptionalexponent) 6 Digits </TD></TR><TR><TD>Counts are ± 30 cycles </TD><TD/><TD/><TD/></TR><Caption><P>Figure 46. ASCII-.float (cycles) </P></Caption></Table><P>© Copyright WEITEK 1988</P><Table><TR><TH>Format </TH><TH>Number </TH><TH>Single </TH><TH>Double </TH></TR><TR><TD>f9.2 f17.10 f27.20 </TD><TD>.12345 1 1234.567 .00000000001 .0001 1.23456789 12345.6 1e-20 1e-10 1 12345.6 </TD><TD>672 672 736 576 800 864 864 768 960 960 928 </TD><TD>704 736 768 576 832 992 1056 800 1088 1344 1440 </TD></TR><TR><TD>e9.2 e17.10 e27.10 </TD><TD>1 1e10 1e38 1 1e10 1e38 1 1e10 1e38 </TD><TD>936 936 944 1104 1104 1112 1152 1160 1168 </TD><TD>960 1040 1408 1216 1240 1488 1560 1592 1648 </TD></TR><TR><TD>g9.2 g17.10 g27.20 </TD><TD>1e-37 .01 .5 90 1000 1e38 1e-37 1e-10 .01 .5 1000 1e9 1e38 1e-307 1e-37 .01 .5 1000 1 e19 1e38 1e308 </TD><TD>1048 1048 736 744 1056 1056 1208 1208 1208 904 912 936 1232 -1264 1264 960 968 984 1312 -</TD><TD>1512 1088 776 776 1160 1528 1760 1352 1344 1088 1040 1056 1600 1936 1944 1776 1376 1400 1488 1768 1968 </TD></TR><TR><TD>Counts are ±30 cycles </TD><TD/><TD/><TD/></TR><Caption><P>Figure 47. Float -+ASCII (cycles) </P></Caption></Table><P>© Copyright WEITEK 1988 </P><P>40</P><P>PRELIMINARY DATA </P><P>September 1988 </P><P>Applications Programmer's Section, continued </P><P>DATA TYPES </P><P>The WTL 3167 floating-point coprocessor provides compatibility with the formats specified in IEEE Standard 754 , Version 10.0. Several number types are required to implement the standard. The types supported by the WTL 3167 are described below. </P><P>NORMALIZED NUMBERS (NRM) </P><P>Most calculations are performed on normalized numbers. Single-precision normalized numbers have an exponent that ranges from binary 00000001 to binary 11111110 (1 to 254) and a normalized fraction field (the leftmost or hidden bit is a one). In decimal notation, this allows one to represent a range of both positive and negative numbers from roughly 10+38 to 10-38 with accuracy to seven decimal places. Double-precision numbers have an exponent ranging from one to 2,046 and a normalized fraction field. </P><P>INFINITY (INF) </P><P>Infinity has an exponent of all ones and a fraction field equal to zero. Both positive and negative infinity are allowed. </P><P>ZERO </P><P>ZERO has an exponent of zero, a hidden bit equal to zero, and a value of zero in the fraction field. Both +0 and -0 are supported. </P><P>Single-Precision 
31 30 23 22 0 
</P><P>e f</P></Sect></Sect><Sect><H2>lsi I I </H2><P>8 23 </P><Table><TR><TD>e </TD><TD>f </TD><TD>Value </TD><TD>Name </TD></TR><TR><TD>255 </TD><TD>not 0 </TD><TD>none </TD><TD>NaN (Not A Number) </TD></TR><TR><TD>255 </TD><TD>0 </TD><TD>(-1) S X infinity </TD><TD>Infinity </TD></TR><TR><TD>1 .. 254 </TD><TD>any </TD><TD>(-1) S X 2e-127 X (1 .f) </TD><TD>Normalized number </TD></TR><TR><TD>0 </TD><TD>0 </TD><TD>(-1) s x 0 </TD><TD>Zero </TD></TR></Table><P>Double-Precision </P><P>63 62 52 51 </P><P>lsi e I f </P><P>11 52 </P><Table><TR><TD>e </TD><TD>f </TD><TD>Value </TD><TD>Name </TD></TR><TR><TD>2047 </TD><TD>not 0 </TD><TD>none </TD><TD>NaN (Not A Number) </TD></TR><TR><TD>2047 </TD><TD>0 </TD><TD>(-1) S X infinity </TD><TD>Infinity </TD></TR><TR><TD>1 .. 2046 </TD><TD>any </TD><TD>(-1) S X 2e-1023 X (1 .f) </TD><TD>Normalized number </TD></TR><TR><TD>0 </TD><TD>0 </TD><TD>(-1)Sx 0 </TD><TD>Zero </TD></TR><Caption><P>Figure 48. IEEE data types </P></Caption></Table><P>© Copyright WEITEK 1988</P><P>NOT A NUMBER (NaN) </P><P>NaN is a special data format usually used as a flag for data flow control, for uninitialized variables, or to signify an invalid operation such as 0 times infinity. The format for a NaN is an exponent of all ones and a non-zero fraction. </P><P>DENORMALIZED NUMBERS (DNRM) </P><P>Denormalized numbers have a zero exponent and a denormalized (hidden bit equal to zero) non-zero fraction field. They represent numbers smaller than 2-127 (single-precision) or 2-1023 (double-precision) . </P><P>ROUNDING OPTIONS </P><P>The WTL 3167 supports all four rounding modes of the IEEE standard: round to nearest, round toward zero, round toward plus infinity, and round toward minus infinity. Rounding may be biased or unbiased. Biased rounding introduces a small offset in the direction of the bias. Positive bias, negative bias, or a bias toward zero are specified in the IEEE format. Unbiased rounding rounds the result to the nearest representable number. In the case of a number exactly halfway between two representable numbers, the number is rounded toward the closest even number, resulting in half of the numbers rounding up and half rounding down, on average. </P><P>ROUND TO NEAREST (RN) </P><P>Rounds the result to the nearest representable value. If two numbers are equally near the result, the even number is chosen. </P><P>ROUND TOWARD ZERO (RZ) </P><P>Rounds the result to the value closest to but not greater than the magnitude of the result. </P><P>ROUND TOWARD PLUS INFINITY (RP) </P><P>Rounds the result to the value closest to but not less than the result. </P><P>ROUND TOWARD MINUS INFINITY (RM) </P><P>Rounds the result to the value closest to but not greater than the result. </P><P>IEEE CONSIDERATIONS </P><P>While the IEEE floating-point formats are supported by the WTL 3167, some features of the IEEE standard are not provided due to the design focus on high speed. </P><P>EXCEPTION HANDLING </P><P>The occurrence of an enabled exception causes an interrupt. Due to extensive instruction overlapping, the exact location of an exception is not maintained. In the debugging stage of a program it is possible to identify the instruction which caused the exception by performing a store context after every floating-point instruction and then testing the enabled exception bit. </P><P>The following exceptions are flagged by the WTL 3167: </P><P>Undefined Opcode Exception (UOE) </P><P>Whenever an illegal opcode is detected, the undefined opcode exception is set. On a read bus operation, for example, only store-type opcodes are allowed. If a read bus operation specifies any other instruction, such as MUL.S, then the undefined opcode exception bit is set. </P><P>Precision Exception (PE) </P><P>The precision exception (PE) flag of the accumulated exception field is set whenever there is a loss of accuracy. The coprocessor data paths compute results to higher precision than the number of mantissa bits that appear in the result. If any of the fraction bits less than the LSB was equal to one prior to rounding, then the PE bit will be set high. The precision exception will also be signaled if there is a partial or complete loss of significance in a float-to-fixed operation. </P><P>© Copyright WEITEK 1988 </P><P>PRELIMINARY DATA </P><P>September 1988 </P><P>Applications Programmer's Section, continued </P><P>Overflow Exception (DE) </P><P>An overflow exception (DE) is generated when the result of a floating-point operation overflows the largest representable number. The result produced at the output is either infinity or the largest representable positive or negative number, depending upon the rounding mode as follows: </P><P>Largest positive if ((RM or RZ) 
normalized number and the result is positive) 
</P><P>Largest negative if ((RP or RZ) 
normalized number and the result is negative) 
</P><P>+Infinity if ((RN or RP) and the result is positive) </P><P>-Infinity 	if ((RN or RM) and the result is negative) </P><P>Overflow is also generated when converting floatingpoint-to-fixed point and the result overflows the 32-bit format. </P><P>Underflow Exception (UE) </P><P>When the result of an operation after rounding is less than the minimum normalized number in the destination format, UE is asserted and the result is flushed to zero. A result of exactly zero does not underflow. </P><P>Zero Divide Exception 	(ZE) </P><P>The WTL 3167 will assert a ZE exception when performing division on a normalized dividend and a zero divisor. The result is a properly signed infinity. </P><P>Invalid Operation Exception (IE) </P><P>IE is asserted if a NaN input or if an invalid operation occurs. The invalid WTL 3167 operations are ooXO, 0/0, 00/00, subtraction of like infinities (00 -00) and addition of opposite infinities 00+ (-00). The result of any invalid operation is a NaN with the fraction and exponent of all ones. The sign bit is zero. </P><P>FAST MODE </P><P>The WTL 3167 always operates in Fast Mode: denormalized inputs to either the multiplier or ALU are flushed to zero as well as unnormalized outputs. The minimum normalized number has an exponent of one and a fraction field of zero. Zero has an exponent of zero and a fraction field of all zeros. This allows to represent numbers between the smallest normalized number and zero. These numbers are known as denormals (DNRM). Since denormals are very close to zero, most applications can substitute zero for a denormal without a significant loss of accuracy. </P><P>© Copyright WEITEK 1988</P><P>OPERATION STATUS AND RESULT </P><P>The following tables show the results which are obtained for various combinations of input data formats and rounding options. The format used in these tables is: (status) result. When OK is indicated for the status, no exception is flagged. </P><P>Source1 Source2 </P><P>ZERO DNRM </P><P>NRM </P><P>INF NaN </P><P>(IE) NaN (IE) NaN </P><P>(IE) NaN </P><P>(IE) NaN (IE) NaNNaN (OK) INF (1) (IE) NaN(OK) INF (OK) INF </P><P>(OK) INF</P><P>INF (IE) NaN (2) </P><P>(OE) (4) (OK) NRM(OK) NRM (OK) NRM (OK) INF (IE) NaN</P><P>NRM </P><P>(UE) ZERO (OK) ZERO (OK) INF (IE) NaNDNRM (OK) ZERO (3) (OK) ZERO </P><P>(OK) NRM </P><P>(IE) NaN(OK) ZERO (3) (OK) ZERO (3) </P><P>(OK) NRM </P><P>(OK) INFZERO </P><P>Notes: </P><L><L><LI><LI_Label>1. </LI_Label><LI_Title>+INF+INF --. +INF </LI_Title></LI><LI>-INF-INF --. -INF </LI></L><LI><LI_Label>2. </LI_Label><LI_Title>+INF-INF 	--. NaN (invalid operation) 
-INF+INF --. NaN (invalid operation) 
</LI_Title></LI><LI><LI_Label>3. </LI_Label><LI_Title>+ZERO+ZERO --. +ZERO (RN,RZ,RP,RM) </LI_Title></LI></L><P>-ZERO-ZERO --. -ZERO (RN,RZ,RP,RM) </P><P>+ZERO-ZERO --. +ZERO (RN,RZ,RP) </P><P>+ZERO-ZERO --. -ZERO (RM) </P><P>-ZERO+ZERO --. +ZERO (RN,RZ,RP) </P><P>-ZERO+ZERO --. -ZERO (RM) </P><P>4. OVF will 	produce INF or maximum normalized number (MAX.NRM), depending upon the rounding mode: +MAX.NRM IF [(RM, RZ) AND (RESULT IS +)] -MAX.NRM IF [ (RP, RZ) AND (RESULT IS -)] +INF IF [(RN,RP) AND (RESULT IS +)] -INF IF [(RN, RM) AND (RESULT IS -)] </P><P>Figure 49. Status and result output for add and subtract </P><P>© 	Copyright WEITEK 1988 </P><P>PRELIMINARY DATA </P><P>September 1988 </P><Table><TR><TH>Source1 </TH><TH/><TH/><TH>Source2 </TH><TH/><TH/></TR><TR><TD>ZERO </TD><TD/><TD>DNRM </TD><TD>NRM </TD><TD>INF </TD><TD>NaN </TD></TR><TR><TH>NaN </TH><TD>(IE) NaN </TD><TD/><TD>(IE) NaN </TD><TD>(IE) NaN </TD><TD>(IE) NaN </TD><TD>(IE) NaN </TD></TR><TR><TH>INF </TH><TD>(OK) INF </TD><TD/><TD>(OK) INF </TD><TD>(OK) INF </TD><TD>(IE) NaN </TD><TD>(IE) NaN </TD></TR><TR><TH>NRM </TH><TD>(ZE) INF </TD><TD/><TD>(ZE) INF </TD><TD>(OE) (4) (OK) NRM (UE) ZERO </TD><TD>(OK) ZERO </TD><TD>(IE) NaN </TD></TR><TR><TH>DNRM </TH><TD>(IE) NaN </TD><TD/><TD>(IE) NaN </TD><TD>(OK) ZERO </TD><TD>(OK) ZERO </TD><TD>(IE) NaN </TD></TR><TR><TH>ZERO </TH><TD>(IE) NaN </TD><TD/><TD>(IE) NaN </TD><TD>(OK) ZERO </TD><TD>(OK) ZERO </TD><TD>(IE) NaN </TD></TR><TR><TH>Note: 4. Refer to Note 4 on page 44. </TH><TD/><TD/><TD/><TD/></TR><Caption><P>Figure 50. Operation status and result output for divide </P></Caption></Table><P>© Copyright WEITEK 1988</P><P>The following table shows the compare status for different input combinations; the compare status is encoded in the condition code field of the peR. </P><Table><TR><TH>Source1 </TH><TH>Source2 </TH><TH/><TH/></TR><TR><TD>NaN </TD><TD>-INF </TD><TD>-NRM </TD><TD>-ONRM </TD><TD>ZERO </TD><TD>+DNRM </TD><TD>+NRM </TD><TD>+INF </TD></TR><TR><TH>NaN </TH><TD>U </TD><TD>U </TD><TD>U </TD><TD>U </TD><TD>U </TD><TD>U </TD><TD>U </TD><TD>U </TD></TR><TR><TH>+INF </TH><TD>U </TD><TD>G </TD><TD>G </TD><TD>G </TD><TD>G </TD><TD>G </TD><TD>G </TD><TD>E </TD></TR><TR><TH>+NRM </TH><TD>U </TD><TD>G </TD><TD>G </TD><TD>G </TD><TD>G </TD><TD>G </TD><TD>0, 1, 2 </TD><TD>L </TD></TR><TR><TH>+DNRM </TH><TD>U </TD><TD>G </TD><TD>G </TD><TD>E </TD><TD>E </TD><TD>E </TD><TD>L </TD><TD>L </TD></TR><TR><TH>ZERO </TH><TD>U </TD><TD>G </TD><TD>G </TD><TD>E </TD><TD>E </TD><TD>E </TD><TD>L </TD><TD>L </TD></TR><TR><TH>-DNRM </TH><TD>U </TD><TD>G </TD><TD>G </TD><TD>E </TD><TD>E </TD><TD>E </TD><TD>L </TD><TD>L </TD></TR><TR><TH>-NRM </TH><TD>U </TD><TD>G </TD><TD>0, 1, 2 </TD><TD>L </TD><TD>L </TD><TD>L </TD><TD>L </TD><TD>L </TD></TR><TR><TH>-INF </TH><TD>U </TD><TD>E </TD><TD>L </TD><TD>L </TD><TD>L </TD><TD>L </TD><TD>L </TD><TD>L </TD></TR><TR><TH>U: Unordered E: Source1 =Source2 L: Source 1 &lt; Source2 G: Source1 &gt; Source2 0, 1, 2 may be: Source1 =Source2, Source1 &lt; Source2, or Source1 &gt; Source2 </TH><TD/><TD/></TR><Caption><P>Figure 51. Status for floating-point compare </P></Caption></Table><P>© Copyright WEITEK 1988 </P><Table><TR><TH/><TH/><TH>WTL 3167 FLOATING-POINT </TH></TR><TR><TH/><TD/><TD>COPROCESSOR </TD></TR><TR><TH/><TD/><TD>PRELIMINARY DATA </TD></TR><TR><TH/><TD/><TD>September 1988 </TD></TR><TR><TH>Applications Programmer's Section, continued </TH><TD/><TD/></TR><TR><TH/><TD/><TD/></TR><TR><TH/><TD/><TD/><TD/><TD/><TD/></TR><TR><TH/><TD/><TD/><TD/><TD/><TD/></TR><TR><TH/><TD/><TD/><TD/><TD/><TD/></TR><TR><TH/><TD/><TD/><TD/><TD/><TD/></TR><TR><TH/><TD/><TD/><TD/><TD/><TD/></TR><TR><TH/><TD/><TD/><TD/><TD/><TD/></TR><Caption><P>Figure 52. Integer to double-precision conversions (I32-+F64) </P></Caption></Table><Table><TR><TD>Source1 </TD><TD>Source2/Destination </TD><TD/><TD>Status </TD><TD/><TD>Comments </TD></TR><TR><TD>7FFFFFFF </TD><TD>41DFFFFF FFCOOOOO </TD><TD/><TD>OK </TD><TD/><TD>Largest positive integer </TD></TR><TR><TD>00000001 </TD><TD>3FFOOOOO 00000000 </TD><TD/><TD>OK </TD><TD/><TD>+1 </TD></TR><TR><TD>00000000 </TD><TD>00000000 00000000 </TD><TD/><TD>OK </TD><TD/><TD>ZERO </TD></TR><TR><TD>FFFFFFFF </TD><TD>BFFOOOOO 00000000 </TD><TD/><TD>OK </TD><TD/><TD>-1 </TD></TR><TR><TD>80000000 </TD><TD>C1EOOOOO 00000000 </TD><TD/><TD>OK </TD><TD/><TD>Largest negative integer </TD></TR></Table><Table><TR><TD>Source1 </TD><TD>Source2/Destination </TD><TD>Status </TD><TD>Comments </TD></TR><TR><TD>7FFFFFFF </TD><TD>4FOOOOOO </TD><TD>OK </TD><TD>Largest positive integer </TD></TR><TR><TD>7FFFFFCO </TD><TD>4FOOOOOO </TD><TD>PE </TD><TD>Inexact </TD></TR><TR><TD>7FFFFF80 </TD><TD>4EFFFFFF </TD><TD>OK </TD><TD>Exact </TD></TR><TR><TD>00000001 </TD><TD>3F800000 </TD><TD>OK </TD><TD>+1 </TD></TR><TR><TD>00000000 </TD><TD>00000000 </TD><TD>OK </TD><TD>ZERO </TD></TR><TR><TD>FFFFFFFF </TD><TD>BF800000 </TD><TD>OK </TD><TD>-1 </TD></TR><TR><TD>80000080 </TD><TD>CEFFFFFF </TD><TD>OK </TD><TD>Exact </TD></TR><TR><TD>80000040 </TD><TD>CFOOOOOO </TD><TD>PE </TD><TD>Inexact </TD></TR><TR><TD>80000000 </TD><TD>CFOOOOOO </TD><TD>OK </TD><TD>Largest negative integer </TD></TR><Caption><P>Figure 53. Integer to single-precision conversions (I32-+F32) </P></Caption></Table><P>The system software is responsible for mapping logical addresses to the physical address space of the WTL 3167, detecting the presence of the WEITEK coprocessor, handling exceptions, saving the coprocessor registers when switching between tasks, and emulating the device when it is not present. In non-multi-tasking environments like MS-DOS, only address mapping, and presence detection need to be performed. </P><P>SETTING-UP WTL 3167 ADDRESSING </P><P>The Operating System must provide a mechanism to map logical addresses into the proper WTL 3167 physical addresses. </P><P>MS-DOS ENVIRONMENT </P><P>Ordinarily, the WTL 3167 memory space is inaccessible in real mode, since Intel intended only the first megabyte of the 386 memory space to be used. However, there is an anomaly of real-mode memory addressing that allows an extra 65520 bytes of the memory space to be accessed, which is enough to accommodate the WTL 3167. The anomaly occurs when a segment register is loaded with the value FFFF hex, and an offset of 10 hex or greater is provided for a memory address. After multiplying the segment register value by 16 and adding the offset, an address exceeding the I-megabyte boundary is obtained. On the original 8086/8088, the address wraps around to zero. On the 386, the address extends into the second megabyte of the memory space. This allows a real-mode program to access linear addresses from 100000 hex to 10FFEF hex. The 386's paging mechanism can map those linear addresses to physical addresses in the WTL 3167's memory space. </P><P>The paging must be set up by an initialization program run at boot time. The program must enter the 386's Virtual 8086 mode, set up paging tables and segment descriptor tables, address memory according to those tables, an then go back to real mode. The paging mechanism must map the first megabyte of memory to itself, and must map the addresses from 100000 hex to 10EFFF hex to the WTL 3167 space at OCOOOOOOO hex through OCOOOEFFF hex. </P><P>If there is an Extended Memory Manager, the page mapping should be handled at the same time. Because there exist programs which rely on the wraparound of the addresses greater than one megabyte, the Extended Memory Manager should provide for the ability to dynamically turn the WTL 3167 mapping on and off. The steps to perform memory-mapping in a Virtual 8086 environment are explained in detail in the Memory Management chapter of the Intel 80386 Programmer's Reference Manual. </P><P>Once the paging is set up, the WTL 3167 space can be accessed starting at OFFFF: 1 0 hex. </P><P>DOS PROTECTED MODE ENVIRONMENT </P><P>In the MS-DOS protected mode environment the application program runs in 386 protected mode to execute native 386 code andlor access the larger memory space. Currently there are three tools available for running programs in protected mode under MS-DOS: RUN386 by Phar Lap, X-AM by IGC, and OS 386 by AI Architects. The RUN386 program sets up the addressing for the WTL 3167, by pointing the fs register to a segment containing the WTL 3167 memory space. The WTL 3167 space starts at offset 0 hex within the fs segment. Under X-AM, the processor assumes a flat segmentation model: all segment registers are set to zero, and the entire 386 memory space is accessed via 32-bit offset values. The WTL 3167 memory space is re-mapped from OCOOOOOOO hex to the location OFFCOOOOO hex. </P><P>Since all segment registers point to the same zero value, no segment override bytes are necessary when running under X-AM. The default registers ds, es and ss will always suffice to access the WTL 3167's space. </P><P>UNIX AND XENIX ENVIRONMENTS </P><P>UNIX and XENIX provide a flat memory space, with all 386 segment registers pointing to zero, and the entire memory space addressed through 32-bit offsets. UNIX handles the page re-mapping of the WTL 3167 memory space, so that the applications program can immediately access the WTL 3167 starting at offset OFFCOOOOO hex. </P><P>48</P><P>PRELIMINARY DATA </P><P>September 1988 </P><P>Systems Programmer's Section, continued </P><P>COPROCESSOR PRESENCE DETECTION </P><P>Many application programs will need to test for the existence of the WEITEK coprocessor (either WTL 3167 or WTL 1167). If an application program needs to decide whether to run on the WEITEK coprocessor or the 80387, this information is necessary. </P><P>MS-DOS ENVIRONMENT </P><P>In the MS-DOS real mode environment, a simple program in the ROM BIOS, or resident in main memory must detect the presence of the WEITEK coprocessor, and modify the interrupt 11 hex routine so that bits 23 and 24 of the value returned in register eax by the interrupt 11 hex call are set if the WEITEK coprocessor is present. </P><P>To detect the presence of the WEITEK coprocessor systems programmers will use a simple detection routine consisting of a software sequence that loads a coprocessor register with a specific data pattern and then reads it back. The code fragment in figure 54, based on the MS-DOS macros offered by WEITEK, can be used to detect the WEITEK coprocessor presence and modify the interrupt 11 hex routine. It is important to note that this code assumes that the page tables for real mode addressing have been set up. It also takes advantage of the fact that a reference to memory that does not exist will eventually return some undefined result and the system will not hang. It finally assumes that the physical address of the WEITEK coprocessor is the standard address of OCOOOOOOO hex. </P><P>If the hardware designer has connected the PRES-signal of the WEITEK coprocessor to an I/O port, the systems software designer can determine the coprocessor presence by reading such I/O port. This method is simpler than the previous one but it is system dependent. It may be necessary to change the I/O port address for each machine. </P><P>Once the operating system has detected the presence of the WEITEK coprocessor and modified the interrupt 11 routine, available DOS compilers and applications can detect the presence of the WEITEK coprocessor by calling Interrupt 11 hex and checking the eax bits 23 and 24 status as shown in figure 55. </P><P>DIS Power-up Sequence for 
WEITEK Coprocessor 
</P><P>WEITEK coprocessor 
Addressing Set-up 
</P><Figure><ImageData src=""/></Figure><P>Set up U Presence Flag&quot; to be used by applications programs </P><Figure><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_39.jpg"/></Figure><P>Figure 54. Operating systems power-up sequence for WTL 3167 </P><P>; see if WEITEK coprocessor is present </P><Table><TR><TD>XOR </TD><TD>EAX, EAX </TD></TR><TR><TD>INT </TD><TD>11 h </TD></TR><TR><TD>AND </TD><TD>EAX, 11 shl 23 </TD></TR><TR><TD>JNZ </TD><TD>short J3167 </TD></TR><TR><TD>K3167: </TD><TD>; WEITEK coprocessor not present </TD></TR><TR><TD>J3167: </TD><TD>; WEITEK coprocessor is present </TD></TR></Table><P>Figure 55. Compiler test for presence of WTL 3167 </P><P>MS-DOS PROTECTED MODE ENVIRONMENT </P><P>The MS-DOS protected mode environment (RUN386, X-AM, or OS 386) is responsible for detecting the presence of the WEITEK coprocessor. Code similar to that proposed in figure 56, properly modified for protected mode addressing, can be used by MS-DOS protected mode development environment manufacturers to detect the presence of the WEITEK coprocessor. </P><P>Once the environment has detected the presence or absence of the coprocessor it must provide a way to communicate it to application programs. Such method is specific to the environment. Clearly the INT llh mechanism cannot be used in protected mode. For Phar Lap-based environments, for example, identical ds and fs segment registers indicate to the application that the WEITEK coprocessor is present. For other environments the reader should consult the manufacturer's documentation. </P><P>UNIX AND XENIX ENVIRONMENTS </P><P>UNIX and XENIX environments detect the presence of the WEITEK coprocessor using routines similar to that shown in figure 56. In both UNIX and XENIX environments a program can detect the presence of the WEITEK coprocessor through system call &quot;sysi86&quot;. See the appropriate system documentation for the name of the system call and the parameter definitions. </P><P>PRELIMINARY DATA </P><P>September 1988 </P><Table><TR><TH>; see if WEITEK coprocessor is present ; (this code assumes that page tables for real mode addressing have already been set up) ; load FFFFh into fs segment register MOV fs, FFFFh ; save contents of memory which may change if WEITEK coprocessor is not present MOV ECX, fs:0404h MOV EDX, fs:0408h ; read register ws1 into eax WFST EAX, ws 1 ; write the data now in EAX into WEITEK coprocessor register ws2 WFLD ws2, EAX ; complement data in EAX, save it in EBX, and write it back into register ws1 NOT EAX MOV EBX, EAX WFLD ws 1, EAX ; read the two WEITEK coprocessor registers ws 1 and ws2, and compare them to EBX WFST EAX, ws 1 CMP EAX, EBX WFST EAX, ws2 ; restore memory which may have changed WFLD ws 1, EAX WFLD ws2, EDX ; restore Interrupts STI ; branch if either register does not compare JNZ short iOinit NOT EAX CMP EAX, EBX JNZ short iOinit ; if the WEITEK coprocessor is present the system must modify the interrupt 11 h routine so that bits ; 23 and 24 of the value returned by interrupt 11 h in EAX is set (See Note). Application software ; will then use this mechanism to determine whether the WEITEK coprocessor is present. MOY di, offset Handlerjump MOY dword ptr [di-4], 11 shl 23 iOinit: ; WEITEK coprocessor is not present </TH></TR><TR><TH>Note: the code that modifies interrupt 11 h assumes that the interrupt handler has been previously loaded as follows: Handler: MOY EAX,O Handlerjump: JMP far ptr original ; Jump to original interrupt 11 h handler routine </TH></TR><Caption><P>Figure 56. Test for presence of WEITEK coprocessor (WTL 3167 or WTL 1167) </P></Caption></Table><P>© Copyright WEITEK 1988</P><P>INITIALIZATION </P><P>Multitasking operating systems and application programs must initialize the WEITEK coprocessor. The code in figure 58, written using WEITEK macros, will suffice to initialize any WEITEK coprocessor: WTL 3167 old or new, WTL 1167, WTL 1167 type A. </P><P>The rounding mode, the exception mask field and the accumulated exception field of the PCR need to be initialized as well. The instruction in figure 57, for example, will set round to nearest rounding mode and will mask and clear all exceptions. </P><P>; initialize exception masks and rounding mode WFLDCTX 003FFOOOOh </P><P>Figure 57. Exception mask and rounding mode initializa tion </P><P>WFLDCTX 88000000h ; load 88000000h int PCR WFSTRL EAX ; store revision level CMP ah, OOh JNE short j 1 init k1 init: WFLDCTX 016000000h ; initialize Multiplier and ALU units flowthrough timers in </P><P>; WTL 1167 JMP short i 1 init j1 init: WFLDCTX 056000000h ; initialize Multiplier flowthrough timer in WTL 1167 type A WFLDCTX 098000000h ; initialize ALU flowthrough timer in WTL 1167 type A i1 init: ; regardless of the coprocessor type load the following remaining power-up sequence WFLDCTX 064000000h WFLDCTX OAOOOOOOOh WFLDCTX 030000000h </P><P>Figure 58. Initializing the WEITEK coprocessor </P><P>PRELIMINARY DATA </P><P>September 1988 </P><P>Systems Programmer's Section, continued </P><P>EXCEPTION HANDLING </P><P>When an enabled exception occurs, the WTL 3167 signals an interrupt to the host pro'cessor. The 80287/80387 and the WTL 3167 interrupt requests are &quot;ORed&quot; to generate the exception interrupt (see page 8). Whenever an interrupt occurs, the operating system must first check both the WTL 3167 and the 80287/80387 to assess which device flagged the exception. To handle the WTL 3167 exception interrupt the operating system must first clear the interrupt, in order to allow processing to continue, and then transmit the interrupt information to the executing program. The operating system can simply notify the executing program of a problem, expecting the application program to identify and correct the problem, or it can identify the problem and then pass the information to the application program. In the first case it should clear the interrupt by setting the appropriate bits in the enable exception byte, but leave untouched the accumulated exception byte. </P><P>This allows the executing program to determine exactly which exceptions occurred by reading the context register itself. In the second case, the operating system clears the interrupt by storing the value of the accumulated exception byte and then clearing it. The content of the accumulated exception byte is then passed to the application program. </P><P>MS-DOS application programs handle IRQ13 interrupts by trapping INT 75. After resolving WTL 3167 exceptions, the routine clears the exception byte and chains to the INT 75 vector. The INT 75 service routine clears the interrupt controllers and invokes the Non Maskable Interrupt (NMI) handler (for compatibility with 8088/8086 software). </P><P>CONTEXT SWITCHING </P><P>In a multi-tasking environment, such as UNIX and XENIX, the operating system must save the context of the WTL 3167 when switching between two processes. Saving the WTL 3167 simply means saving the thirtytwo registers in the register file and the context register. A block move is very effective in saving the register file. Restoring the WTL 3167 context is simple too. The thirty-two registers must be reloaded as well as the context register. It is also required that the operating system repeat the coprocessor initialization described in figures 57 and 58 in case another program had loaded the WTL 3167, rounding mode, exception mask, and accumulated exception field of the PCR with inappropriate values. UNIX System V.3 and XENIX for the 80386 handle context switching for the WTL 3167. </P><P>COPROCESSOR EMULATION </P><P>If emulation of the WTL 3167 is needed, then it is the operating system's responsibility to provide it. When the WTL 3167 is not present and an address specifying a coprocessor instruction is broadcast by the 80386, the operating system must identify the fault and call the emulator. The emulator needs to decode the address in order to identify the floating-point instruction which it specifies, and it must then execute the instruction with the system's available resources. The emulator must duplicate all of the WTL 3167's internal registers and properly update them after each instruction. UNIX System V.3 already incorporates a complete WTL 3167 emulator. Customers who intend to incorporate WTL 3167 emulation in other operating systems should contact WEITEK for more details. </P><P>© Copyright WEITEK 1988</P><P>This section describes the hardware and software differences between the WTL 3167 and the WTL 1167 coprocessor daughter board. </P><P>HARDWARE COMPATIBILITY </P><P>The single-chip WTL 3167 is pin for pin compatible with the WTL 1167 and will fit into the standard 121-pin extended math coprocessor socket. The WTL 1167 coprocessor daughter board features a socket for the 80387, allowing both the WEITEK and the Intel coprocessors to co-exist in the same system. Hardware developers can offer the option of using both the WTL 3167 and the 80387 coprocessors by featuring two separate sockets on the system mother board, or by using a small daughter board that accommodates both coprocessors. Figure 5 shows the physical dimensions of the WEITEK daughter board that accommodates both the 80387 and the WTL 3167. </P><P>The WTL 3167 DC power consumption is less than one fifth that of the WTL 1167 daughter board. The 16 and 20 MHz WTL 3167 AC specs are upward compatible with those of the WTL 1167 daughter board. The WTL 3167 is available in faster speed grades than the WTL 1167. For more details on the coprocessor DC and AC specifications, the reader should refer to pages 9 to 11. The WTL 3167 AC specifications match the new AC specifications for the Intel 80386 microprocessor. </P><P>APPLICATION SOFTWARE COMPATIBILITY </P><P>The WTL 3167 is upward object-code-compatible from the WTL 1167. The application programs and all of the software tools available for the WTL 1167 coprocessor daughter board will run as is on the WTL 3167. The WTL 3167 will respond as a faster WTL 1167. For more details on the single-chip instruction execution times, refer to pages 37 to 40. </P><P>The WTL 3167 features some new instructions that will trigger an Invalid Opcode exception, if used with the WTL 1167. The new instructions include: square root, reverse subtract, and double-precision multiply accumulate. </P><P>SYSTEM SOFTWARE COMPATIBILITY </P><P>Addressing, initialization, presence detection, exception handling, context switching, and coprocessor emulation for the WTL 3167 are the same as they are for the WTL 1167. Therefore, the WTL 3167 works in all of the operating system environments that support the WTL 1167 coprocessor daughter board. </P><P>© Copyright WEITEK 1988 COPROCESSOR BOARD </P><Table><TR><TH/><TH/><TH/><TH>WTL 3167 FLOATING-POINT </TH></TR><TR><TD/><TD/><TD/><TD>COPROCESSOR </TD></TR><TR><TD/><TD/><TD/><TD>PRELIMINARY DATA </TD></TR><TR><TD/><TD/><TD/><TD>September 1988 </TD></TR><TR><TD>Ordering Information </TD><TD/><TD/><TD/></TR><TR><TD>COPROCESSOR </TD><TD/><TD/><TD/></TR><TR><TD/><TD/><TD/><TD/><TD/></TR><TR><TD/><TD/><TD/><TD/><TD/><TD/></TR><TR><TD/><TD/><TD/><TD/><TD/><TD/></TR><TR><TD/><TD/><TD/><TD/><TD/><TD/></TR><Caption><P>Figure 59. WTL 3167 Coprocessor ordering information </P></Caption></Table><Table><TR><TH>Part Description </TH><TH/><TH>Temperature Range </TH><TH/><TH>Order Number </TH></TR><TR><TD>16 MHz WTL 3167 Coprocessor </TD><TD/><TD>TeAsE </TD><TD>=0 to 85° C </TD><TD/><TD>3167-016-GCU </TD></TR><TR><TD>20 MHz WTL 3167 Coprocessor </TD><TD/><TD>TeAsE </TD><TD>=0 to 85° C </TD><TD/><TD>3167-020-GCU </TD></TR><TR><TD>25 MHz WTL 3167 Coprocessor </TD><TD/><TD>TeAsE </TD><TD>=0 to 85° C </TD><TD/><TD>3167-025-GCU </TD></TR></Table><P>Customers ordering the coprocessor along with the small daughter board shown in figure 5, should refer to the order numbers below. </P><Table><TR><TD>Part Description </TD><TD>Temperature Range </TD><TD>Order Number </TD></TR><TR><TD>16 MHz WTL 3167 Coprocessor Board </TD><TD>TeAsE =0 to 85° C </TD><TD>3167-016-BRD </TD></TR><TR><TD>20 MHz WTL 3167 Coprocessor Board </TD><TD>TeAsE =0 to 85° C </TD><TD>3167-020-BRD </TD></TR><TR><TD>25 MHz WTL 3167 Coprocessor Board </TD><TD>TeAsE =0 to 85° C </TD><TD>3167-025-BRD </TD></TR><Caption><P>Figure 60. WTL 3167 Coprocessor board ordering information </P></Caption></Table><P>This table lists many of the most major changes since the September, 1986 printing of this data sheet. The data sheet has undergone a complete transformation since then. It is now more accurate, more complete, and much longer. Few, if any, sections from the old data sheet exist unchanged in the new one. </P><Table><TR><TH>Change </TH><TH>Description </TH></TR><TR><TH>1. </TH><TD>Specifications </TD><TD>Revised, page 10-11 </TD></TR><TR><TH>2. </TH><TD>Software Tools Overview </TD><TD>Revised, page 20 </TD></TR><TR><TH>3. </TH><TD>Instruction Encoding </TD><TD>Revised, page 32 </TD></TR><TR><TH>4. </TH><TD>Ordering Information </TD><TD>Revised, page 55 </TD></TR></Table><P>PRELIMINARY DATA </P><P>September 1988 </P><Figure><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_40.jpg"/></Figure><Figure><ImageData src=""/></Figure><P>For additional information on WEITEK products, please fill out the form below and mail. </P><P>Name Title </P><P>Company Phone </P><P>Address </P><P>Comments </P><P>I am currently involved in a design with the following Weitek products ______________ and wish to be added to your design data base to insure that I receive status updates. </P><Table><TR><TH>APPLICATION: </TH></TR><TR><TH>o ENGINEERING WORKSTATIONS </TH><TD>o SCIENTIFIC COMPUTERS </TD></TR><TR><TH>o GRAPHICS </TH><TD>o OTHER ________ </TD></TR><TR><TH>o PERSONAL COMPUTERS </TH><TD/></TR><TR><TH>Check the products on which you wish to receive data sheets: </TH><TD/><TD>D Have a sales person call </TD></TR><TR><TH>ATTACHED PROCESSORS </TH><TD>COPROCESSORS </TD><TD>BUILDING BWCKS </TD><TD/><TD/></TR><TR><TH>o XL-SERIES OVERVIEW </TH><TD>o 1167 </TD><TD>o 2264/2265 </TD><TD>o 1066 </TD><TD>o 2516 </TD></TR><TR><TH>o XL-8200 OVERVIEW </TH><TD>o 116411165 </TD><TD>o 3132/3332 </TD><TD>o 2010 </TD><TD>o 2517 </TD></TR><TR><TH/><TD>o 3164/3364 </TD><TD>o 1232/1233 </TD><TD>o 2245 </TD><TD/></TR><TR><TH>o 3167 </TH><TD/><TD/></TR></Table><P>WEITEKuse: Rec'd Out TPT Source: DS </P><P>Status </P><Sect><H3>WEITEKWTL 3167 
Please Comment On The Quality Of This Data Sheet. 
</H3><P>Even though we have tried to make this data sheet as complete as possible, it is conceivable that we have missed something that may be important to you. If you believe this is the case, please describe what the missing information is, and we will consider including it in the next printing of the data sheet. </P><P>Fold, Staple and Mail to Weitek Corp. </P></Sect><Sect><H2>BUSINESS REPLY MAIL </H2><P>FIRST CLASS PERMIT NO. 1374 SUNNYVALE, CA </P><P>NO POSTAGE 
NECESSARY 
IF MAILED 
IN THE 
UNITED STATES 
</P><P>POSTAGE WILL BE PAID BY ADDRESSEE </P><P>WEITEK Corporation 1060 E. Arques Ave. </P><P>Sunnyvale, CA 94086-BRM-9759 </P><P>ATTN: Ed Masuda </P><Figure><ImageData src="images/fpu_ic_weitek_WTL3167_1988_img_42.jpg"/></Figure><Figure><ImageData src=""/></Figure></Sect><Sect><H2>WEITEK ~ </H2><P>WEITEK'S CUSTOMER COMMITMENT: </P><P>Weitek's mission is simple: to provide you with VLSI solutions to solve your compute-intensive problems. We translate that </P><P>~ </P><P>mission into the following corporate objectives: </P><L><LI><LI_Label>1. </LI_Label><LI_Title>To be first to market with performance breakthroughs, allowing you to develop and market systems at the edge of your art. </LI_Title></LI><LI><LI_Label>2. </LI_Label><LI_Title>To understand your product, technology, and market needs, so that we can develop Weitek products and corporate plans that will help you succeed. </LI_Title></LI><LI><LI_Label>3. </LI_Label><LI_Title>To price our products based on the fair value they represent to you, our customers. </LI_Title></LI><LI><LI_Label>4. </LI_Label><LI_Title>To invest far in excess ofthe industry average in Research and Development, giving you the latest products through technological innovation. ' </LI_Title></LI><LI><LI_Label>5. </LI_Label><LI_Title>To invest far in excess of the industry average in Selling, Marketing, and Technical Applications Support, in order to provide you with service and support unmatched in the industry. </LI_Title></LI><LI><LI_Label>6. </LI_Label><LI_Title>To serve as a reliable, resourceful, and quality business partner to our customers. </LI_Title></LI></L><P>These are our objectives. We're committed to making them happen. If you have comments or suggestions on how we can do more for you, please don't hesitate to contact us. </P><Figure><ImageData src=""/>Art Collmeyer </Figure><P>President </P><Table><TR><TH>Headquarters </TH><TH>Domestic Sales Offices </TH><TH/><TH>European Sales Headquarters </TH><TH>Japanese Representative </TH></TR><TR><TD>Weitek Corporation </TD><TD>Weitek Corporation </TD><TD>Corporate Place IV </TD><TD>Greyhound House, 23/24 George St. </TD><TD>4-8-1 Tsuchihashi </TD></TR><TR><TD>1060 E. Arques Avenue </TD><TD>1060 E. Arques Avenue </TD><TD>111 South Bedford St. </TD><TD>Richmond, Surrey, TW9 UY </TD><TD>Miyamae-Ku </TD></TR><TR><TD>Sunnyvale, CA 94086 </TD><TD>Sunnyvale, CA 94086 </TD><TD>Suite 200 </TD><TD>England </TD><TD>Kawasaki, Kanagawa-Pre </TD></TR><TR><TD>TWX 910-339-9545 </TD><TD>TWX 910-339-9545 </TD><TD>Burlington, MA 01803 </TD><TD>TELEX 928940 RICHBI G </TD><TD>213 Japan </TD></TR><TR><TD>WEITEKSVL </TD><TD>WEITEKSVL </TD><TD>FAX (617) 229-4902 </TD><TD>FAX 011-441 940 6208 </TD><TD>FAX 044-877-4268 </TD></TR><TR><TD>FAX (408) 738-1185 </TD><TD>FAX (408) 738-1185 </TD><TD>TEL (617) 229-8080 </TD><TD>TEL 011-441549 0164 </TD><TD>TEL044-852-1135 </TD></TR><TR><TD>TEL (408) 738-8400 </TD><TD>TEL (408) 738-8400 </TD><TD/><TD/><TD/></TR></Table></Sect></Sect></Sect></Sect></Sect></Part></TaggedPDF-doc>