<?xml version="1.0" encoding="UTF-8" ?><!-- Created from PDF via Acrobat SaveAsXML --><!-- Mapping Table version: 28-February-2003 --><TaggedPDF-doc><?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>xml</dc:format>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Xilinx, Inc.</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Provides designers with the means to perform floating-point arithmetic on an FPGA device</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Xilinx DS335 Floating-Point Operator v5.0, data sheet</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/">
         <xmp:CreateDate>2002-11-22T16:13:34Z</xmp:CreateDate>
         <xmp:CreatorTool>FrameMaker 9.0</xmp:CreatorTool>
         <xmp:ModifyDate>2011-01-14T14:37:51Z</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Acrobat Distiller 9.0.0 (Windows)</pdf:Producer>
         <pdf:Keywords>ds335, floating-point operator, operation, wordlength, latency, interface, Virtex, Spartan, Virtex-7, Kintex-7, Virtex-6, Virtex-5, Virtex-4, Spartan-6, Spartan-3/XA, Spartan-3E/XA, Spartan-3A/3AN/3A DSP/XA</pdf:Keywords>
         <pdf:Copyright>2005-2006, 2008-2009, 2011</pdf:Copyright>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:Copyright>2005-2006, 2008-2009, 2011</pdfx:Copyright>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/">
         <xmpMM:DocumentID>uuid:f0c3a2ec-b8e0-46e6-9989-3e641f82e123</xmpMM:DocumentID>
         <xmpMM:InstanceID>uuid:7735ae6c-8787-3f46-8936-27a0cb0853ea</xmpMM:InstanceID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?><?xpacket end='r'?><bookmark-tree><bookmark title="LogiCORE IP Floating-Point Operator v5.0"><destination structID="LinkTarget_2675"/><bookmark title="Introduction"><destination structID="LinkTarget_2676"/></bookmark><bookmark title="Features"><destination structID="LinkTarget_2677"/></bookmark><bookmark title="Overview"><destination structID="LinkTarget_2678"/></bookmark><bookmark title="Functional Description"><destination structID="LinkTarget_2679"/><bookmark title="Floating-Point Number Representation"><destination structID="LinkTarget_2680"/><bookmark title="Special Values"><destination structID="LinkTarget_2681"/></bookmark></bookmark><bookmark title="IEEE-754 Support"><destination structID="LinkTarget_2682"/><bookmark title="Non-Standard Wordlengths"><destination structID="LinkTarget_2683"/></bookmark><bookmark title="Denormalized Numbers"><destination structID="LinkTarget_2684"/></bookmark><bookmark title="Rounding Modes"><destination structID="LinkTarget_2685"/></bookmark><bookmark title="Signaling and Quiet NaNs"><destination structID="LinkTarget_2686"/></bookmark></bookmark><bookmark title="Fixed-Point Number Representation"><destination structID="LinkTarget_2687"/></bookmark></bookmark><bookmark title="Port Description"><destination structID="LinkTarget_2688"/><bookmark title="A"><destination structID="LinkTarget_2689"/></bookmark><bookmark title="B"><destination structID="LinkTarget_2690"/></bookmark><bookmark title="CLK"><destination structID="LinkTarget_2691"/></bookmark><bookmark title="CE"><destination structID="LinkTarget_2692"/></bookmark><bookmark title="SCLR"><destination structID="LinkTarget_2693"/></bookmark><bookmark title="OPERATION"><destination structID="LinkTarget_2694"/></bookmark><bookmark title="OPERATION_RFD"><destination structID="LinkTarget_2695"/></bookmark><bookmark title="RESULT"><destination structID="LinkTarget_2696"/></bookmark><bookmark title="UNDERFLOW"><destination structID="LinkTarget_2697"/></bookmark><bookmark title="OVERFLOW"><destination structID="LinkTarget_2698"/></bookmark><bookmark title="INVALID_OP"><destination structID="LinkTarget_2699"/></bookmark><bookmark title="DIVIDE_BY_ZERO"><destination structID="LinkTarget_2700"/></bookmark><bookmark title="RDY"><destination structID="LinkTarget_2701"/></bookmark><bookmark title="Example Timing"><destination structID="LinkTarget_2702"/></bookmark></bookmark><bookmark title="CORE Generator Graphical User Interface"><destination structID="LinkTarget_2703"/><bookmark title="Main Configuration Screen"><destination structID="LinkTarget_2704"/></bookmark><bookmark title="Second and Third Configuration Screens"><destination structID="LinkTarget_2705"/></bookmark><bookmark title="Penultimate Configuration Screen"><destination structID="LinkTarget_2706"/></bookmark><bookmark title="Final Configuration Screen"><destination structID="LinkTarget_2707"/></bookmark></bookmark><bookmark title="Using the Floating Point IP Core"><destination structID="LinkTarget_2708"/><bookmark title="Simulation Models"><destination structID="LinkTarget_2709"/></bookmark><bookmark title="XCO Parameters"><destination structID="LinkTarget_2710"/></bookmark></bookmark><bookmark title="Modeling"><destination structID="LinkTarget_2711"/></bookmark><bookmark title="Migrating to Floating-Point Operator v5.0 from v4.0"><destination structID="LinkTarget_2712"/><bookmark title="Port Changes"><destination structID="LinkTarget_2713"/></bookmark><bookmark title="Latency Changes"><destination structID="LinkTarget_2714"/></bookmark></bookmark><bookmark title="Resource Utilization and Performance"><destination structID="LinkTarget_2715"/><bookmark title="Custom Format: 17-Bit Fraction and 24-Bit Total Wordlength"><destination structID="LinkTarget_2716"/></bookmark><bookmark title="Single-Precision Format"><destination structID="LinkTarget_2717"/></bookmark><bookmark title="Double-Precision Format"><destination structID="LinkTarget_2718"/></bookmark></bookmark><bookmark title="Support"><destination structID="LinkTarget_2719"/></bookmark><bookmark title="Ordering Information"><destination structID="LinkTarget_2720"/></bookmark><bookmark title="References"><destination structID="LinkTarget_2721"/></bookmark><bookmark title="Revision History"><destination structID="LinkTarget_2722"/></bookmark><bookmark title="Notice of Disclaimer"><destination structID="LinkTarget_2723"/></bookmark></bookmark></bookmark-tree><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_0.jpg"/></Figure><Part><H2 id="LinkTarget_2675">LogiCORE IP Floating-Point Operator v5.0 </H2><Sect><H5>DS335 March 1, 2011 	Product Specification </H5><P id="LinkTarget_2676">Introduction </P><P>The Xilinx® Floating-Point core provides designers with the means to perform floating-point arithmetic on an FPGA device. The core can be customized for operation, word length, latency, and interface. </P></Sect><Sect><H3 id="LinkTarget_2677">Features </H3><L><LI><LI_Label>• 	</LI_Label><LI_Title>Available for Kintex™-7, Virtex®-7, Virtex-6, Virtex-5, Virtex-4, Spartan®-6, Spartan-3/XA, Spartan-3E/XA, Spartan-3A/AN/3A DSP/XA FPGAs </LI_Title></LI><L><LI><LI_Label>• 	</LI_Label><LI_Title>Supported operators: </LI_Title></LI><L><LI><LI_Label>• 	</LI_Label><LI_Title>multiply </LI_Title></LI><LI><LI_Label>• 	</LI_Label><LI_Title>add/subtract </LI_Title></LI><LI><LI_Label>• 	</LI_Label><LI_Title>divide </LI_Title></LI><LI><LI_Label>• 	</LI_Label><LI_Title>square-root </LI_Title></LI><LI><LI_Label>• 	</LI_Label><LI_Title>comparison </LI_Title></LI><LI><LI_Label>• 	</LI_Label><LI_Title>conversion from floating-point to fixed-point </LI_Title></LI><LI><LI_Label>• 	</LI_Label><LI_Title>conversion from fixed-point to floating-point </LI_Title></LI><LI><LI_Label>• 	</LI_Label><LI_Title>conversion between floating-point types </LI_Title></LI></L></L><LI><LI_Label>• 	</LI_Label><LI_Title>Compliance with IEEE-754 Standard (with only minor documented deviations) </LI_Title></LI><LI><LI_Label>• 	</LI_Label><LI_Title>Parameterized fraction and exponent wordlengths </LI_Title></LI><LI><LI_Label>• 	</LI_Label><LI_Title>Use of XtremeDSP™ slice for multiply </LI_Title></LI><LI><LI_Label>• 	</LI_Label><LI_Title>Use of XtremeDSP slice for single and double precision add/subtract operations on Virtex and Kintex families </LI_Title></LI><LI><LI_Label>• 	</LI_Label><LI_Title>Optimizations for speed and latency </LI_Title></LI><LI><LI_Label>• 	</LI_Label><LI_Title>Fully synchronous design using a single clock </LI_Title></LI><LI><LI_Label>• 	</LI_Label><LI_Title>For use with CORE Generator™ software which is available in the Xilinx ISE® 13.1 software </LI_Title></LI></L><Table><TR><TD/><TD>LogiCORE IP Facts Table </TD></TR><TR><TD/><TD>Core Specifics </TD></TR><TR><TD>Supported Device Family1 </TD><TD>Virtex-7, Kintex-7, Virtex-6, Virtex-5, Virtex-4, Spartan®-6, Spartan-3/XA, Spartan-3E/XA, Spartan-3A/3AN/3A DSP/XA </TD></TR><TR><TD>Supported User Interfaces </TD><TD>N/A </TD></TR><TR><TD/><TD>Provided with Core </TD></TR><TR><TD>Documentation </TD><TD>Product Specification </TD></TR><TR><TD>Design Files </TD><TD>Netlist </TD></TR><TR><TD>Example Design </TD><TD>Not Provided </TD></TR><TR><TD>Test Bench </TD><TD>Not Provided </TD></TR><TR><TD>Constraints File </TD><TD>N/A </TD></TR><TR><TD>Simulation Model </TD><TD>Verilog, VHDL </TD></TR><TR><TD/><TD>Tested Design Tools </TD></TR><TR><TD>Design Entry Tools </TD><TD>CORE Generator 13.1 </TD></TR><TR><TD>Simulation </TD><TD>Mentor Graphics ModelSim 6.6d, Cadence Incisive Enterprise Simulator (IES) 10.2, Synopsys VCS and VCS MX 2010.06, ISIM 13.1 </TD></TR><TR><TD>Synthesis Tools </TD><TD>Not Provided </TD></TR><TR><TD/><TD>Support </TD></TR><TR><TD/><TD>Provided by Xilinx, Inc. </TD></TR></Table><P>1. For a complete listing of supported devices, see the <Link>release </Link><Link>notes</Link> for this core. </P><P>© 2005-2006, 2008-2009, 2011 Xilinx, Inc. XILINX, the Xilinx logo, Artix, ISE, Kintex, Spartan, Virtex, and other designated brands included herein are trademarks of Xilinx in the United States and other countries. All other trademarks are the property of their respective owners. </P><P>DS335 March 1, 2011 	<Link>www.xilinx.com </Link></P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_1.jpg"/></Figure></Sect><Sect><H3 id="LinkTarget_2678">Overview </H3><P>The Xilinx Floating-Point core allows a range of floating-point arithmetic operations to be performed on FPGA. The operation is specified when the core is generated, and each operation variant has a common interface. This interface is shown in <Link>Figure 1</Link>. When a user selects an operation that requires only one operand, the B input is omitted. </P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_2.jpg"/>Floating-Point Operator Result = A op B A B OPERATION OPERATION_ND OPERATION_RFD SCLR CE CLK RESULT UNDERFLOW OVERFLOW INVALID_OPERATION DIVIDE_BY_ZERO RDY </Figure><P>DS335_01_021508 </P><P>Figure 1: Block Diagram of Generic Floating-Point Binary Operator Core </P></Sect><Sect><H3 id="LinkTarget_2679">Functional Description </H3><P>The floating-point and fixed-point representations employed by the core are described in <Link>Floating-Point Number Representation</Link> and <Link>Fixed-Point Number Representation</Link>. </P><Sect><H4 id="LinkTarget_2680">Floating-Point Number Representation </H4><P>The core employs a floating-point representation that is a generalization of the IEEE-754 Standard to allow for non-standard sizes <Link>[Ref 1]</Link>. When standard sizes are chosen, the format and special values employed are identical to those described by the IEEE-754 Standard. </P><P>Two parameters have been adopted for the purposes of generalizing the format employed by the Floating-Point core. These specify the total format width and the width of the fractional part. For standard single precision types, the format width is 32 bits and fraction width 24 bits. In the following description, these widths are abbreviated to w and wf, respectively. </P><P>A floating-point number is represented using a sign, exponent, and fraction (which are denoted as ’s,’ ’E,’ and b0.b1b2b , respectively). </P><P>wf –1 </P><P>The value of a floating-point number is given by: v= s2Eb0.b1b2b</P><P>–1</P><P>wf –1 </P><P>2–i</P><P>The binary bits, bi, have weighting , where the most significant bit b0  is a constant 1. As such, the combination is bounded such that1b0.b1b22  and the number is said to be normalized. To </P><P>bp1</P><P>– </P><P>provide increased dynamic range, this quantity is scaled by a positive or negative power of 2 (denoted here as E). The sign bit provides a value that is negative when s=1, and positive when s=0. </P><P><Link>www.xilinx.com </Link>DS335 March 1, 2011 </P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_3.jpg"/></Figure><P>The binary representation of a floating-point number contains three fields as shown in <Link>Figure 2</Link>. </P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_4.jpg"/>fes 3wf -11 2we-1 0Bit significance (i) </Figure><Table><TR><TH>Bit position </TH><TD>w -1 </TD><TD>wf -1 </TD><TD>wf -2 </TD><TD>wf -1 </TD><TD>0 </TD></TR><TR><TH/><TD/><TD/><TD>w </TD><TD/></TR><TR><TH/><TD/><TD/><TD/><TD>DS335_02_050609 </TD></TR></Table><P>Figure 2: Bit Fields within the Floating-Point Representation </P><P>As  is a constant, only the fractional part is retained, that is, f= b. This requires only </P><P>b0 b1wf– 1 wf – 1 bits. Of the remaining bits, one bit is used to represent the sign, and w=wwf  bits represent </P><P>– </P><P>e </P><P>the exponent. </P><P>The exponent field, e, employs a biased unsigned integer representation, whose value is given by: </P><P>we –1 </P><P>e = ei2i</P><P> </P><P>i=0 </P><P>The index, i, of each bit within the exponent field is given in <Link>Figure 2</Link>. </P><P>we– 1 </P><P>The signed value of the exponent, E, is obtained by removing the bias, that is, E = e– 2–1. </P><P>In reality, wf is not the wordlength of the fraction, but the fraction with the hidden bit, b0, included. This terminology has been adopted to provide commonality with that used to describe fixed-point parameters (as employed by Xilinx System Generator™ for DSP). </P><Sect><H5 id="LinkTarget_2681">Special Values </H5><P>A number of values for s, e and f  have been reserved for representing special numbers, such as Not a Number (NaN), Infinity ( ), Zero (0), and denormalized numbers (see <Link>Denormalized Numbers</Link> for an explanation of the latter). These special values are summarized in <Link>Table 1</Link>. </P><P>Table  1: Special Values </P><Table><TR><TH>Symbol for Special Value </TH><TH>s Field </TH><TH>e Field </TH><TH>f Field </TH></TR><TR><TD>NaN </TD><TD>don’t care</TD><TD> -1 (that is, )2we e = 11...11 </TD><TD>Any non-zero field. For results that are NaN the most significant bit of fraction is set (that is, )f = 10...00 </TD></TR><TR><TD> </TD><TD>sign of  </TD><TD>-1 (that is, )2we e = 11...11 </TD><TD>Zero (that is, )f = 00...00 </TD></TR><TR><TD>0 </TD><TD>sign of 0 </TD><TD>0 </TD><TD>Zero (that is, )f = 00...00 </TD></TR><TR><TD>denormalized </TD><TD>sign of number </TD><TD>0 </TD><TD>Any non-zero field </TD></TR></Table><P>Note that in <Link>Table 1</Link> the sign bit is undefined when a result is a NaN. The core generates NaNs with the sign bit set to 1 (that is, negative). Also, infinity and zero are signed. Where possible, the sign is handled in the same way as finite non-zero numbers. For example, –0 –0 =–0,–0+0 = 0 and</P><P>+ </P><P>–  –=–. A meaningless operation such as – + raises an invalid operation exception and </P><P>+ </P><P>produces a NaN as a result. </P><P>DS335 March 1, 2011 <Link>www.xilinx.com </Link></P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_5.jpg"/></Figure></Sect></Sect><Sect><H4 id="LinkTarget_2682">IEEE-754 Support </H4><P>The Xilinx Floating-Point core complies with much of the IEEE-754 Standard. The deviations generally provide a better trade-off of resources against functionality. Specifically, the core deviates in the following ways: </P><L><LI><LI_Label>• </LI_Label><LI_Title><Link>Non-Standard Wordlengths </Link></LI_Title></LI><LI><LI_Label>• </LI_Label><LI_Title><Link>Denormalized Numbers </Link></LI_Title></LI><LI><LI_Label>• </LI_Label><LI_Title><Link>Rounding Modes </Link></LI_Title></LI><LI><LI_Label>• </LI_Label><LI_Title><Link>Signaling and Quiet NaNs </Link></LI_Title></LI></L><Sect><H5 id="LinkTarget_2683">Non-Standard Wordlengths </H5><P>The Xilinx Floating-Point core supports a greater range of fraction and exponent wordlength than defined in the IEEE-754 Standard. </P><P>Standard formats commonly implemented by programmable processors: </P><L><LI><LI_Label>• </LI_Label><LI_Title>Single Format – uses 32 bits, with a 24-bit fraction and 8-bit exponent. </LI_Title></LI><LI><LI_Label>• </LI_Label><LI_Title>Double Format – uses 64 bits, with 53-bit fraction and 11-bit exponent. Less commonly implemented standard formats are: </LI_Title></LI><LI><LI_Label>• </LI_Label><LI_Title>Single Extended – wordlength extensions of 43 bits and above </LI_Title></LI><LI><LI_Label>• </LI_Label><LI_Title>Double Extended – wordlength extensions of 79 bits and above </LI_Title></LI></L><P>The Xilinx core supports formats with fraction and exponent wordlengths outside of these standard wordlengths. </P></Sect><Sect><H5 id="LinkTarget_2684">Denormalized Numbers </H5><P>The exponent limits the size of numbers that may be represented. It is possible to extend the range for small numbers using the minimum exponent value (0) and allowing the fraction to become denormalized. That is, the hidden bit b0  becomes zero such that b0.b1b2bp11. Now the value is </P><P>– </P><P>given by: </P><P></P><P>– 2we–1–2 v= –1s2 0.b1b2</P><P>b </P><P>wf –1 </P><P>These denormalized numbers are extremely small. For example, with single precision the value is </P><P>2–126</P><P>bounded </P><P>v </P><P> . As such, in most practical calculation they do not contribute to the end result. Furthermore, as the denormalized value becomes smaller, it is represented with fewer bits and the relative rounding error introduced by each operation is increased. </P><P>The Xilinx Floating-Point core does not support denormalized numbers. In FPGAs, the dynamic range can be increased using fewer resources by increasing the size of the exponent (and a 1-bit increase for </P><P>2256</P><P>single precision increases the range by ). If necessary, the overall wordlength of the format can be maintained by an associated decrease in the wordlength of the fraction. </P><P>To provide robustness, the core treats denormalized operands as zero with a sign taken from the denormalized number. Results that would have been denormalized are set to an appropriately signed zero. </P><P><Link>www.xilinx.com </Link>DS335 March 1, 2011 </P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_6.jpg"/></Figure><P>The support for denormalized numbers cannot be switched off on some processors. Therefore, there may be very small differences between values generated by the Floating-Point core and a program running on a conventional processor when numbers are very small. If such differences must be avoided, the arithmetic model on the conventional processor should include a simple check for denormalized numbers. This check should set the output of an operation to zero when denormalized numbers are detected to correctly reflect what happens in the FPGA implementation. </P></Sect><Sect><H5 id="LinkTarget_2685">Rounding Modes </H5><P>Only the default rounding mode, Round to Nearest (as defined by the IEEE-754 Standard), is currently supported. </P></Sect><Sect><H5 id="LinkTarget_2686">Signaling and Quiet NaNs </H5><P>The IEEE-754 Standard requires provision of Signaling and Quiet NaNs. However, the Xilinx Floating-Point core treats all NaNs as Quiet NaNs. When any NaN is supplied as one of the operands to the core, the result is a Quiet NaN, and an invalid operation exception will not be raised (as would be the case for signaling NaNs). The exception to this rule is floating-point to fixed-point conversion. For detailed information, see the behavior of <Link>INVALID_OP</Link>. </P></Sect></Sect><Sect><H4 id="LinkTarget_2687">Fixed-Point Number Representation </H4><P>For the purposes of fixed-point to floating-point conversion, a fixed-point representation is adopted that is consistent with the signed integer type used by Xilinx System Generator for DSP. Fixed-point values are represented using a two’s complement number that is weighted by a fixed power of 2. The binary representation of a fixed-point number contains three fields as shown in <Link>Figure 3</Link> (although it is still simply a weighted two’s complement number). </P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_7.jpg"/>fractionintegers 0wf -1wfw -1 w wf -1Bit position (i) </Figure><P>DS335_03_050609 </P><P>Figure 3: Bit Fields within the Fixed-Point Representation </P><P>In <Link>Figure 3</Link>, the bit position has been labeled with an index i. Based upon this, the value of a fixed-point number is given by: </P><P>w1–wf </P><P>– v=–1s2 +bb.bbb</P><P></P><P>w2–ww–1</P><P>ff1 0 </P><P>w2</P><P>– bw1w1w – f</P><P>––f iw</P><P>–1–2+2bi</P><P>= 0 </P><P>For example, a 32-bit signed integer representation is obtained when a total width of 32 and a fraction width of 0 are specified. Round to Nearest is employed within the conversion operations. </P><P>To provide for the sign bit, the width of the integer field must be at least 1, requiring that the fractional width be no larger than w-1. </P><P>DS335 March 1, 2011 <Link>www.xilinx.com </Link></P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_8.jpg"/></Figure></Sect></Sect><Sect><H3 id="LinkTarget_2688">Port Description </H3><P>The ports employed by the core were shown in <Link>Figure 1</Link>. They are described in more detail in <Link>Table 2</Link>. All control signals are active High. </P><P>Table  2: Core Ports </P><Table><TR><TH>Name </TH><TH>Width </TH><TH>Direction </TH><TH>Description </TH></TR><TR><TD>A1 </TD><TD>w </TD><TD>INPUT </TD><TD>Operand A </TD></TR><TR><TD>B1 </TD><TD>w </TD><TD>INPUT </TD><TD>Operand B: Only present on binary operation. </TD></TR><TR><TD>OPERATION1 </TD><TD>6 </TD><TD>INPUT </TD><TD>Operation: Specifies the operation to be performed. Implemented when the core is configured for both add and subtract operations, or as a programmable comparator. </TD></TR><TR><TD>OPERATION_ND </TD><TD>1 </TD><TD>INPUT </TD><TD>New Data: Must be set High to indicate that operand A, operand B and OPERATION, the latter when required as described above, are valid. </TD></TR><TR><TD>OPERATION_RFD </TD><TD>1 </TD><TD>OUTPUT </TD><TD>Ready For Data: Set High by core to indicate that it is ready for new operands. </TD></TR><TR><TD>SCLR </TD><TD>1 </TD><TD>INPUT </TD><TD>Synchronous Reset (optional): This resets control path and not the data path (that is, only RDY and OPERATION_RFD outputs are affected). SCLR takes priority over CE. </TD></TR><TR><TD>CE </TD><TD>1 </TD><TD>INPUT </TD><TD>Clock Enable (optional) </TD></TR><TR><TD>CLK </TD><TD>1 </TD><TD>INPUT </TD><TD>Clock </TD></TR><TR><TD>RESULT </TD><TD>w </TD><TD>OUTPUT </TD><TD>Result Output: Result of operation. </TD></TR><TR><TD>UNDERFLOW </TD><TD>1 </TD><TD>OUTPUT </TD><TD>Underflow: Set High by core when underflow occurs. Supplied in synchronism with associated RESULT. </TD></TR><TR><TD>OVERFLOW </TD><TD>1 </TD><TD>OUTPUT </TD><TD>Overflow: Set High by core when overflow occurs. Supplied in synchronism with associated RESULT. </TD></TR><TR><TD>INVALID_OP </TD><TD>1 </TD><TD>OUTPUT </TD><TD>Invalid Operation: Set High by core when operands cause an invalid operation. Supplied in synchronism with associated RESULT. </TD></TR><TR><TD>DIVIDE_BY_ZERO </TD><TD>1 </TD><TD>OUTPUT </TD><TD>Divide By Zero: Set High by a divide operation to indicate that a division by zero was performed. Supplied in synchronism with associated RESULT. </TD></TR><TR><TD>RDY </TD><TD>1 </TD><TD>OUTPUT </TD><TD>Output Ready: Set High by core when RESULT is valid. </TD></TR></Table><P>1 A, B, and OPERATION are not registered on the input to the core, as the assumption is that they will be coming from registered outputs of other cores. Should this be required, registers can be added to these inputs externally to the core. </P><P><Link>www.xilinx.com </Link>DS335 March 1, 2011 </P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_9.jpg"/></Figure><P id="LinkTarget_2689">A </P><P>Operand A input. </P><P id="LinkTarget_2690">B </P><P>Operand B input. </P><P id="LinkTarget_2691">CLK </P><P>All signals are synchronous to the CLK input. </P><P id="LinkTarget_2692">CE </P><P>When CE is deasserted, the clock is disabled, and the state of the core and its outputs are maintained. Note that SCLRtakes priority over CE. </P><Sect><H5 id="LinkTarget_2693">SCLR </H5><P>When SCLR is asserted, the core control circuits are synchronously set to their initial state. Any incomplete results are discarded, and RDYwill not be generated for them. While SCLR is asserted both OPERATION_RFD and RDY are synchronously deasserted. The core is ready for new input one cycle after SCLR is deasserted, at which point OPERATION_RFD is asserted. SCLR takes priority over CE. If SCLRis required to be gated by CE, then this can be done externally to the core. </P></Sect><Sect><H5 id="LinkTarget_2694">OPERATION </H5><P>OPERATION is present when add and subtract operations are selected together, or when a programmable comparator is selected. The operations are binary encoded as specified in <Link>Table 3</Link>. </P><P>Table  3: Encoding of OPERATION </P><Table><TR><TH/><TH>FP Operation </TH><TH>OPERATION(5 downto 0) </TH></TR><TR><TH/><TD>Add </TD><TD>000000 </TD></TR><TR><TH/><TD>Subtract </TD><TD>000001 </TD></TR><TR><TH>Compare (Programmable) </TH><TD/><TD>Unordered </TD><TD>000100 </TD></TR><TR><TD>Less Than </TD><TD>001100 </TD></TR><TR><TD>Equal </TD><TD>010100 </TD></TR><TR><TD>Less Than or Equal </TD><TD>011100 </TD></TR><TR><TD>Greater Than </TD><TD>100100 </TD></TR><TR><TD>Not Equal </TD><TD>101100 </TD></TR><TR><TD>Greater Than or Equal </TD><TD>110100 </TD></TR></Table><P>OPERATION_ND should be asserted when operands are valid on inputs A and B and the FP Operation is valid on OPERATION (should it be required). Deasserting OPERATION_ND prevents the initiation of new operations and the subsequent assertion of RDY. </P><P>Note: OPERATION_ND is required to synchronize operations when the core is configured to perform a multi-cycle divide or square root. </P></Sect><Sect><H5 id="LinkTarget_2695">OPERATION_RFD </H5><P>OPERATION_RFDis asserted by the core to indicate that it is ready to accept new operands on inputs A, B and OPERATION. A new operation is initiated by the core when both OPERATION_ND and OPERATION_RFD are asserted together. </P><P>DS335 March 1, 2011 <Link>www.xilinx.com </Link></P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_10.jpg"/></Figure></Sect><Sect><H5 id="LinkTarget_2696">RESULT </H5><P>If the operation is compare, then the valid bits within the result depend upon the compare operation selected. If the compare operation is one of those listed in <Link>Table 3</Link>, then only the least significant bit of the result indicates whether the comparison is true or false. If the operation is condition code, then the result of the comparison is provided by 4-bits using the encoding summarized in <Link>Table 4</Link>. See IEEE-754 Standard for a more complete listing of the meanings of all the valid comparison results. </P><P>Table  4: Condition Code Summary </P><Table><TR><TH>Compare Operation </TH><TH>RESULT(3 downto 0) </TH><TH/><TH>Result </TH></TR><TR><TD>3 </TD><TD>2 </TD><TD>1 </TD><TD/><TD>0 </TD></TR><TR><TH>Programmable </TH><TD/><TD/><TD>0 </TD><TD>A OP B = False </TD></TR><TR><TD/><TD>1 </TD><TD>A OP B = True </TD></TR><TR><TH>Condition Code </TH><TD>Unordered </TD><TD>&gt; </TD><TD>&lt; </TD><TD/><TD>EQ </TD><TD>Meaning </TD></TR><TR><TD>0 </TD><TD>0 </TD><TD>0 </TD><TD/><TD>1 </TD><TD>A = B </TD></TR><TR><TD>0 </TD><TD>0 </TD><TD>1 </TD><TD/><TD>0 </TD><TD>A &lt; B </TD></TR><TR><TD>0 </TD><TD>0 </TD><TD>1 </TD><TD/><TD>1 </TD><TD>A &lt;= B </TD></TR><TR><TD>0 </TD><TD>1 </TD><TD>0 </TD><TD/><TD>0 </TD><TD>A &gt; B </TD></TR><TR><TD>0 </TD><TD>1 </TD><TD>0 </TD><TD/><TD>1 </TD><TD>A &gt;= B </TD></TR><TR><TD>0 </TD><TD>1 </TD><TD>1 </TD><TD/><TD>0 </TD><TD>A &lt;&gt; B </TD></TR><TR><TD>1 </TD><TD>See Standard </TD><TD/><TD>A, B or both are NaN. </TD></TR></Table><P>The following signals provide exception information. Additional detail on their behavior can be found in the IEEE-754 Standard. </P></Sect><Sect><H5 id="LinkTarget_2697">UNDERFLOW </H5><P>Underflow is signaled when the operation generates a non-zero result which is too small to be represented with the chosen precision. The result is set to zero. Underflow is detected after rounding. </P><P>Note: A number that becomes denormalized before rounding is set to zero and underflow signaled. </P></Sect><Sect><H5 id="LinkTarget_2698">OVERFLOW </H5><P>Overflow is signaled when the operation generates a result that is too large to be represented with the chosen precision. The output is set to a correctly signed  . </P><P><Link>www.xilinx.com </Link>DS335 March 1, 2011 </P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_11.jpg"/></Figure></Sect><Sect><H5 id="LinkTarget_2699">INVALID_OP </H5><P>Invalid operation is signaled when the operation performed is invalid. According to the IEEE-754 Standard, the following are invalid operations: </P><L><LI><LI_Label>1. 	</LI_Label><LI_Title>Any operation on a signaling NaN. (Note that this is not relevant to the core as all NaNs are treated as Quiet NaNs). </LI_Title></LI><LI><LI_Label>2. 	</LI_Label><LI_Title>Addition or subtraction of infinite values where the sign of the result cannot be determined. For example, magnitude subtraction of infinities such as (+ ) +(-). </LI_Title></LI><LI><LI_Label>3. 	</LI_Label><LI_Title>Multiplication where 0 . </LI_Title></LI><LI><LI_Label>4. 	</LI_Label><LI_Title>Division where 0/0 or  </LI_Title></LI><LI><LI_Label>5. 	</LI_Label><LI_Title>Square root if the operand is less than zero. </LI_Title></LI><LI><LI_Label>6. 	</LI_Label><LI_Title>When the input of a conversion precludes a faithful representation that cannot otherwise be signaled (for example NaN or infinity). When an invalid operation occurs, the associated result is a Quiet NaN. In the case of floating-point to fixed-point conversion, NaN and infinity raise an invalid operation exception. If the operand is out of </LI_Title></LI></L><P>range, or an infinity, then an overflow exception is raised. By analyzing the two exception signals it is possible to determine which of the three types of operand was converted. (See <Link>Table 5</Link>.) </P><P>Table  5: Invalid Operation Summary </P><Table><TR><TH>Operand </TH><TH>Invalid Operation </TH><TH>Overflow </TH><TH>Result </TH></TR><TR><TD>+ Out of Range </TD><TD>0 </TD><TD>1 </TD><TD>011...11 </TD></TR><TR><TD>- Out of Range </TD><TD>0 </TD><TD>1 </TD><TD>100...00 </TD></TR><TR><TD>+ Infinity </TD><TD>1 </TD><TD>1 </TD><TD>011...11 </TD></TR><TR><TD>- Infinity </TD><TD>1 </TD><TD>1 </TD><TD>100...00 </TD></TR><TR><TD>NaN </TD><TD>1 </TD><TD>0 </TD><TD>100...00 </TD></TR></Table><P>When the operand is a NaN the result is set to the most negative representable number. When the operand is infinity or an out-of-range floating-point number, the result is saturated to the most positive or most negative number, depending upon the sign of the operand. </P><P>Note: Floating-point to fixed-point conversion does not treat a NaN as a Quiet NaN, because NaN is not representable within the resulting fixed-point format, and so can only be indicated through an invalid operation exception. </P></Sect><Sect><H5 id="LinkTarget_2700">DIVIDE_BY_ZERO </H5><P>DIVIDE_BY_ZERO is asserted when a divide operation is performed where the divisor is zero and the dividend is a finite non-zero number. The result in this circumstance is a correctly signed infinity. </P><P id="LinkTarget_2701">RDY </P><P>RDY is asserted by the core to indicate that RESULT is valid. RDY can be used to qualify the result of a multi-cycle operation (that is, divide or square root operations with rate greater than 1). </P><P>DS335 March 1, 2011 	<Link>www.xilinx.com </Link></P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_12.jpg"/></Figure></Sect><Sect><H5 id="LinkTarget_2702">Example Timing </H5><P>An example of signal timing is given in <Link>Figure 4</Link> for square-root with latency 4 and rate 3. The result is provided four cycles after an active OPERATION_ND. In this example, new inputs are applied every three cycles, in accordance with the maximum rate and OPERATION_RFD output. (Data could be applied less frequently, in which case OPERATION_RFD would stay high until OPERATION_ND was asserted with the new input.) The RDY output indicates when RESULT, and any exception flags, are valid. In this example, an invalid operation exception has been generated with result R2. </P><P>CLK </P><P>CE A OPERATION _N D OPERATION_R FD </P><P>RDY RESU LT IN VALID _OP </P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_13.jpg"/>A 1 A 2 A 3 R1 R2 </Figure><P>Figure 4: Example Timing Diagram </P></Sect></Sect><Sect><H3 id="LinkTarget_2703">CORE Generator Graphical User Interface </H3><P>The Floating Point core GUI provides several screens with fields to set the parameter values for the particular instantiation required. This section provides a description of each GUI field. </P><P>The GUI allows configuration of the following: </P><L><LI><LI_Label>• </LI_Label><LI_Title>Core operation </LI_Title></LI><LI><LI_Label>• </LI_Label><LI_Title>Wordlength </LI_Title></LI><LI><LI_Label>• </LI_Label><LI_Title>Implementation optimizations, such as use of XtremeDSP slices </LI_Title></LI><LI><LI_Label>• </LI_Label><LI_Title>Optional pins </LI_Title></LI></L><Sect><H5 id="LinkTarget_2704">Main Configuration Screen </H5><P>The main configuration screen allows the following parameters to be specified: </P><L><LI><LI_Label>• </LI_Label><LI_Title><Link>Component Name </Link></LI_Title></LI><LI><LI_Label>• </LI_Label><LI_Title><Link>Operation Selection </Link></LI_Title></LI></L><Sect><H5>Component Name </H5><P>The component name is used as the base name of the output files generated for the core. Names must start with a letter and be composed using the following characters: a to z, 0 to 9, and “_”. </P><P><Link>www.xilinx.com </Link>DS335 March 1, 2011 </P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_14.jpg"/></Figure></Sect><Sect><H5>Operation Selection </H5><P>The floating-point operation may be one of the following: </P><L><LI><LI_Label>• </LI_Label><LI_Title>Add/Subtract </LI_Title></LI><LI><LI_Label>• </LI_Label><LI_Title>Multiply </LI_Title></LI><LI><LI_Label>• </LI_Label><LI_Title>Divide </LI_Title></LI><LI><LI_Label>• </LI_Label><LI_Title>Square-root </LI_Title></LI><LI><LI_Label>• </LI_Label><LI_Title>Compare </LI_Title></LI><LI><LI_Label>• </LI_Label><LI_Title>Fixed-to-float </LI_Title></LI><LI><LI_Label>• </LI_Label><LI_Title>Float-to-fixed </LI_Title></LI><LI><LI_Label>• </LI_Label><LI_Title>Float-to-float When Add/Subtract is selected, it is possible for the core to perform both operations, or just add or </LI_Title></LI></L><P>subtract. When both are selected, the operation performed on a particular set of operands is controlled by the OPERATION input (with encoding defined earlier in <Link>Table 3</Link>). </P><P>When Add/Subtract or Multiply is selected, the level of embedded multiplier or XtremeDSP slice usage can be specified according to FPGA family as described in the <Link>Penultimate Configuration Screen </Link>section. </P><P>When Compare is selected, the compare operation may be programmable or fixed. If programmable, then the compare operation performed should be supplied via the OPERATION input (with encoding defined earlier in <Link>Table 3</Link>). If a fixed operation is required, then the operation type should be selected. </P><P>When Float-to-float conversion is selected, and exponent and fraction widths of the input and result are the same, the core provides a means to condition numbers, that is, convert denormalized numbers to zero, and signaling NaNs to quiet NaNs. </P></Sect></Sect><Sect><H5 id="LinkTarget_2705">Second and Third Configuration Screens </H5><P>Depending on the configuration you select from the first screen, the second and third configuration screens let you specify the precision of the operand and result. </P><Sect><H5>Precision of the Operand and Results </H5><P>This parameter defines the number of bits used to represent quantities. The type of the operands and results depend on the operation requested. For fixed-point conversion operations, either the operand or result is fixed-point. For all other operations, the output is specified as a floating-point type. </P><P>Note: For the condition-code compare operation, RESULT(3 downto 0) indicates the result of the comparison operation. For other compare operations RESULT(0 downto 0) provides the result. </P><P><Link>Table 6</Link> defines the general limits of the format widths. </P><P>Table  6: General Limits of Width and Fraction Width </P><Table><TR><TH>Format Type </TH><TH>Fraction Width </TH><TH>Exponent/Integer Width </TH><TH>Width </TH></TR><TR><TD>Min </TD><TD>Max </TD><TD>Min </TD><TD>Max </TD><TD>Min </TD><TD>Max </TD></TR><TR><TH>Floating-Point </TH><TD>4 </TD><TD>64 </TD><TD>4 </TD><TD>16 </TD><TD>4 </TD><TD>64 </TD></TR><TR><TH>Fixed-Point </TH><TD>0 </TD><TD>63 </TD><TD>1 </TD><TD>64 </TD><TD>4 </TD><TD>64 </TD></TR></Table><P>DS335 March 1, 2011 <Link>www.xilinx.com </Link></P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_15.jpg"/></Figure><P>There are also a number of further limits for specific cases which are enforced by the GUI: </P><P>• 	The exponent width (that is., Total Width-Fraction Width) should be chosen to support normalization of the fractional part. This can be calculated using: </P><P>Minimum Exponent Width = ceil[log2(Fraction Width+3)] + 1 </P><P>For example, a 24-bit fractional part requires an exponent of at least 6 bits (for example, {ceil [log2 (27)]+1}). </P><P>• 	For conversion operations, the exponent width of the floating-point input or output is also constrained by the Total Width of the fixed-point input or output to be a minimum of: </P><P>Minimum Exponent Width = ceil[log2(Total Width+3)] + 1 </P><P>For example, a 32-bit integer requires a minimum exponent of 7 bits. A summary of the width limits imposed by exponent width is provided in <Link>Table 7</Link>. </P><P>Table  7: Summary of Exponent Width Limits </P><Table><TR><TD>Floating-Point Fraction Width or Fixed-Point Total Width </TD><TD>Minimum Exponent Width </TD></TR><TR><TD>4 to 5 </TD><TD>4 </TD></TR><TR><TD>6 to 13 </TD><TD>5 </TD></TR><TR><TD>14 to 29 </TD><TD>6 </TD></TR><TR><TD>30 to 61 </TD><TD>7 </TD></TR><TR><TD>61 to 64 </TD><TD>8 </TD></TR></Table></Sect></Sect><Sect><H5 id="LinkTarget_2706">Penultimate Configuration Screen </H5><P>The final configuration screen lets you specify the following: </P><L><LI><LI_Label>• 	</LI_Label><LI_Title><Link>Architecture Optimizations </Link></LI_Title></LI><LI><LI_Label>• 	</LI_Label><LI_Title><Link>Family Optimizations </Link></LI_Title></LI><LI><LI_Label>• 	</LI_Label><LI_Title><Link>Latency </Link></LI_Title></LI><LI><LI_Label>• 	</LI_Label><LI_Title><Link>Cycles per Operation </Link></LI_Title></LI></L><Sect><H5>Architecture Optimizations </H5><P>On Virtex-5, Virtex-6, Virtex-7, and Kintex-7 FPGAs, for double precision multiplication and addition/subtraction operations, it is possible to specify a latency optimized architecture, or speed optimized architecture. The latency optimized architecture offers reduced latency at the expense of increased resources. </P></Sect><Sect><H5>Family Optimizations </H5><P>• 	<Link>Multiplier Usage</Link> allows the type and level of embedded multiplier usage to be specified. </P><P><Link>www.xilinx.com 	</Link>DS335 March 1, 2011 </P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_16.jpg"/></Figure></Sect><Sect><H5>Multiplier Usage </H5><P>The level of embedded multiplier usage can be specified. The level and type of multiplier usage also depend upon the operation and FPGA family. <Link>Table 8 </Link>summarizes these options for multiplication. </P><P>Table  8: Impact of Family and Multiplier Usage on the Implementation of the Multiplier </P><Table><TR><TH>Multiplier Usage </TH><TH>Spartan-3E/A FPGA Families </TH><TH>Spartan-3A DSP and Spartan-6 FPGA Families </TH><TH>Virtex-4 FPGA Family </TH><TH>Virtex-5, Virtex-6, Virtex-7, Kintex-7 FPGA Families </TH></TR><TR><TD>No usage </TD><TD>Logic </TD><TD>Logic </TD><TD>Logic </TD><TD>Logic </TD></TR><TR><TD>Medium usage </TD><TD>Not supported </TD><TD>DSP48A/A1+logic1 </TD><TD>DSP48+logic1 </TD><TD>DSP48E/E1+logic1 </TD></TR><TR><TD/><TD/><TD>in multiplier body </TD><TD>in multiplier body </TD><TD>in multiplier body </TD></TR><TR><TD>Full usage </TD><TD>MULT18X18 </TD><TD>DSP48A/A1 used </TD><TD>DSP48 used </TD><TD>DSP48E/E1 used </TD></TR><TR><TD/><TD/><TD>in multiplier body </TD><TD>in multiplier body </TD><TD>in multiplier body </TD></TR><TR><TD>Max usage </TD><TD>Not supported </TD><TD>DSP48A/A1 </TD><TD>DSP48 multiplier </TD><TD>DSP48E/E1 </TD></TR><TR><TD/><TD/><TD>multiplier body </TD><TD>body and rounder </TD><TD>multiplier body </TD></TR><TR><TD/><TD/><TD>and rounder </TD><TD/><TD>and rounder </TD></TR></Table><Sect><H5>Notes: </H5><P>1. 	Logic-assisted multiplier variant is available only for single and double precision formats in Virtex-4, Virtex-5, Virtex-6, Virtex-7, and Kintex-7 FPGAs and single precision in Spartan-3A DSP and Spartan-6 FPGAs. </P><P><Link>Table 9</Link> summarizes these options for addition/subtraction. </P><P>Table  9: Impact of Family, Precision, and Multiplier Usage on the Implementation of the Adder/Subtractor </P><Table><TR><TH>Multiplier Usage (only valid values listed) </TH><TH>Other Families </TH><TH>Virtex-4 FPGA Family </TH><TH>Virtex-5, Virtex-6, Virtex-7, Kintex-7 FPGA Families </TH></TR><TR><TD>Any </TD><TD>Other </TD><TD>Single </TD><TD>Double </TD><TD>Other </TD><TD>Single </TD><TD>Double </TD></TR><TR><TH>No usage </TH><TD>Logic </TD><TD>Logic </TD><TD>Logic </TD><TD>Logic </TD><TD>Logic </TD><TD>Logic </TD><TD>Logic </TD></TR><TR><TH>Full usage </TH><TD>Not supported </TD><TD>Not supported </TD><TD>4 DSP48 </TD><TD>3 DSP48 </TD><TD>Not supported </TD><TD>2 DSP48E/E1 </TD><TD>3 DSP48E/E1 </TD></TR></Table><P>Latency </P><P>This parameter describes the number of cycles between an operand input and result output. The latency of all operators (apart from the logic-assisted, double-precision multiplier on Virtex-4 devices) can be set between 0 and a maximum value that is dependent upon the parameters chosen. The maximum latency of the Floating-Point core is tabulated for a range of width and operation types in <Link>Tables 10</Link> through <Link>21</Link>. </P><P>DS335 March 1, 2011 	<Link>www.xilinx.com </Link></P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_17.jpg"/></Figure><P>The maximum latency of the divide and square root operations is Fraction Width + 4, and for compare operation it is two cycles. The float-to-float conversion operation is three cycles when either fraction or exponent width is being reduced; otherwise it is two cycles. Note that it is two cycles, even when the input and result widths are the same, as the core provides conditioning in this situation (see <Link>Operation </Link><Link>Selection</Link> for further details). </P><Table><Caption><P>Table  10: Latency of Floating-Point Multiplication Using Logic Only </P></Caption><TR><TD>Fraction Width </TD><TD>Maximum Latency (clock cycles) </TD></TR><TR><TD>4 to 5 </TD><TD>5 </TD></TR><TR><TD>6 to 11 </TD><TD>6 </TD></TR><TR><TD>12 to 23 </TD><TD>7 </TD></TR><TR><TD>24 to 47 (inc. single) </TD><TD>8 </TD></TR><TR><TD>48 to 64 (inc. double) </TD><TD>9 </TD></TR></Table><P>Table  11: Latency of Floating-Point Multiplication Using MULT18X18S </P><Table><TR><TH>Fraction Width </TH><TH>Maximum Latency (clock cycles) </TH></TR><TR><TD>4 to 17 </TD><TD>4 </TD></TR><TR><TD>18 to 34 (inc. single) </TD><TD>6 </TD></TR><TR><TD>35 to 51 </TD><TD>7 </TD></TR><TR><TD>52 to 64 (inc. double) </TD><TD>8 </TD></TR><Caption><P>Table  12: Latency of Floating-Point Multiplication Using DSP48A/A1 </P></Caption></Table><Table><TR><TH>Fraction Width </TH><TH>Maximum Latency (clock cycles) </TH><TH/></TR><TR><TD>Medium Usage </TD><TD>Full Usage </TD><TD/><TD>Max Usage </TD></TR><TR><TH>4 to 17 </TH><TD/><TD>6 </TD><TD/><TD>5 </TD></TR><TR><TH>18 to 34 (inc. single) </TH><TD>91 </TD><TD>11 </TD><TD/><TD>10 </TD></TR><TR><TH>35 to 51 </TH><TD/><TD>18 </TD><TD/><TD>17 </TD></TR><TR><TH>52 to 64 (inc. double) </TH><TD/><TD>27 </TD><TD/><TD>26 </TD></TR></Table><P>Notes: </P><P>1. Single precision only. </P><Table><Caption><P>Table  13: Latency of Floating-Point Multiplication Using DSP48 </P></Caption><TR><TH>Fraction Width </TH><TH>Maximum Latency (clock cycles) </TH><TH/></TR><TR><TD>Medium Usage </TD><TD>Full Usage </TD><TD/><TD>Max Usage </TD></TR><TR><TH>4 to 17 </TH><TD/><TD>6 </TD><TD/><TD>8 </TD></TR><TR><TH>18 to 34 (inc. single) </TH><TD>91 </TD><TD>10 </TD><TD/><TD>11 </TD></TR><TR><TH>35 to 51 </TH><TD/><TD>15 </TD><TD/><TD>16 </TD></TR><TR><TH>52 to 64 (inc. double) </TH><TD>172 </TD><TD>22 </TD><TD/><TD>23 </TD></TR></Table><P>Notes: </P><L><LI><LI_Label>1. </LI_Label><LI_Title>Single precision only. </LI_Title></LI><LI><LI_Label>2. </LI_Label><LI_Title>Double precision only. </LI_Title></LI></L><P><Link>www.xilinx.com </Link>DS335 March 1, 2011 </P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_18.jpg"/></Figure><Table><Caption><P>Table  14: Latency of Floating-Point Multiplication Using DSP48E/E1 </P></Caption><TR><TH>Fraction Width </TH><TH>Maximum Latency (clock cycles) </TH><TH/></TR><TR><TD>Medium Usage </TD><TD>Full Usage </TD><TD/><TD>Max Usage </TD></TR><TR><TH>single </TH><TD>8 </TD><TD>8 </TD><TD/><TD>6 </TD></TR><TR><TH>double </TH><TD>15 </TD><TD>15 </TD><TD/><TD>16 </TD></TR><TR><TH>4 to 17 </TH><TD/><TD>6 </TD><TD/><TD>8 </TD></TR><TR><TH>18 to 24 </TH><TD/><TD>8 </TD><TD/><TD>9 </TD></TR><TR><TH>25 to 34 </TH><TD/><TD>10 </TD><TD/><TD>11 </TD></TR><TR><TH>35 to 41 </TH><TD/><TD>12 </TD><TD/><TD>13 </TD></TR><TR><TH>42 to 51 </TH><TD/><TD>15 </TD><TD/><TD>16 </TD></TR><TR><TH>52 to 58 </TH><TD/><TD>18 </TD><TD/><TD>19 </TD></TR><TR><TH>59 to 64 </TH><TD/><TD>22 </TD><TD/><TD>23 </TD></TR></Table><P>Table  15: Latency of Floating-Point Multiplication Using DSP48E/E1 and Low Latency Optimization </P><Table><TR><TH>Fraction Width </TH><TD>Maximum Latency (clock cycles) </TD></TR><TR><TD>Max Usage </TD></TR><TR><TH>double </TH><TD>10 </TD></TR><Caption><P>Table  16: Latency of Floating-Point Addition Using Full Usage and DSP48/DSP48E/DSP48E1 </P></Caption></Table><Table><TR><TH>Width </TH><TH>Maximum Latency (clock cycles) </TH></TR><TR><TD>DSP48 </TD><TD>DSP48E/E1 </TD></TR><TR><TH>single </TH><TD>16 </TD><TD>11 </TD></TR><TR><TH>double </TH><TD>15 </TD><TD>14 </TD></TR><Caption><P>Table  17: Latency of Floating-Point Addition Using Logic on Families Other Than Virtex-5, Virtex-6, Virtex-7, Kintex-7, and Spartan-6 FPGAs </P></Caption></Table><Table><TR><TH>Fraction Width </TH><TH>Maximum Latency (clock cycles) </TH></TR><TR><TH>4, 5 </TH><TD>9 </TD></TR><TR><TH>6 to 14 </TH><TD>10 </TD></TR><TR><TH>15 </TH><TD>11 </TD></TR><TR><TH>16, 17 </TH><TD>12 </TD></TR><TR><TH>18 to 29 (inc. single) </TH><TD>13 </TD></TR><TR><TH>30 to 62 (inc. double) </TH><TD>14 </TD></TR><TR><TH>63, 64 </TH><TD>15 </TD></TR><Caption><P>Table  18: Latency of Floating-Point Addition Using Logic and Low-Latency Optimization on Virtex-5, Virtex-6, Virtex-7, and Kintex-7 FPGAs </P></Caption></Table><Table><TR><TH>Fraction Width </TH><TH>Maximum Latency (clock cycles) </TH></TR><TR><TD>single </TD><TD>8 </TD></TR><TR><TD>double </TD><TD>8 </TD></TR></Table><P>DS335 March 1, 2011 <Link>www.xilinx.com </Link></P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_19.jpg"/></Figure><Table><Caption><P>Table  19: Latency of Floating-Point Addition Using Logic and Speed Optimization on Virtex-5, Virtex-6, Virtex-7, Kintex-7, and Spartan-6 FPGAs </P></Caption><TR><TH>Fraction Width </TH><TH>Maximum Latency (clock cycles) </TH></TR><TR><TH>4 to 13 </TH><TD>8 </TD></TR><TR><TH>14 </TH><TD>9 </TD></TR><TR><TH>15 </TH><TD>10 </TD></TR><TR><TH>16, 17 </TH><TD>11 </TD></TR><TR><TH>18 to 61 (single, double) </TH><TD>12 </TD></TR><TR><TH>62 to 64 </TH><TD>13 </TD></TR></Table><P>Table  20: Latency of Fixed-Point to Floating-Point Conversion </P><Table><TR><TH>Operand Width </TH><TH>Maximum Latency (Cycles) </TH></TR><TR><TD>4 to 8 </TD><TD>5 </TD></TR><TR><TD>9 to 32 </TD><TD>6 </TD></TR><TR><TD>33 to 64 </TD><TD>7 </TD></TR><Caption><P>Table  21: Latency of Floating-Point to Fixed-Point Conversion </P></Caption></Table><Table><TR><TH>Maximum of (A Fraction Width+1) and Result Width </TH><TH>Maximum Latency (Cycles) </TH></TR><TR><TD>5 to 16 </TD><TD>5 </TD></TR><TR><TD>17 to 64 </TD><TD>6 </TD></TR><TR><TD>65 </TD><TD>7 </TD></TR></Table><P>Cycles per Operation </P><P>The 'Cycles per Operation' GUI parameter describes the minimum number of cycles that must elapse between inputs. This rate can be specified. A value of 1 allows operands to be applied on every clock cycle, and results in a fully-parallel circuit. A value greater than 1 enables hardware reuse. The resources consumed by the core reduces as the number of cycles per operation is increased. A value of 2 approximately halves the resources used. A fully sequential implementation is obtained when the value is equal to Fraction Width+1 for the square-root operation, and Fraction Width+2 for the divide operation. </P></Sect></Sect></Sect><Sect><H5 id="LinkTarget_2707">Final Configuration Screen </H5><P>The final configuration screen lets you specify the <Link>Optional Control and Exception Pins</Link>. </P><P>Optional Control and Exception Pins </P><P>Pins for the following signals are optional: </P><L><LI><LI_Label>• 	</LI_Label><LI_Title>Handshake and Control Signals: OPERATION_ND, OPERATION_RDY, RDY, CE and SCLR control signals are optional. </LI_Title></LI><LI><LI_Label>• 	</LI_Label><LI_Title>Exception Signals: UNDERFLOW, OVERFLOW, INVALID_OPERATIONand DIVIDE_BY_ZERO signals are optional. The DIVIDE_BY_ZEROsignal is available only when the divide operation is selected. </LI_Title></LI></L><P><Link>www.xilinx.com 	</Link>DS335 March 1, 2011 </P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_20.jpg"/></Figure><P id="LinkTarget_2708">Using the Floating Point IP Core </P><P>The CORE Generator GUI performs error-checking on all input parameters. Resource estimation and optimum latency information are also available. </P><P>Several files are produced when a core is generated, and customized instantiation templates for Verilog and VHDL design flows are provided in the .veo and .vho files, respectively. For detailed instructions, see the CORE Generator software documentation. </P><P id="LinkTarget_2709">Simulation Models </P><P>The core has two options for simulation models: </P><L><LI><LI_Label>• </LI_Label><LI_Title>VHDL behavioral model in xilinxcorelib library </LI_Title></LI><LI><LI_Label>• </LI_Label><LI_Title>Verilog UniSim-based structural simulation model 
The models required may be selected in the CORE Generator project options. 
</LI_Title></LI></L><P>Xilinx recommends that simulations utilizing UniSim-based structural models be run using a resolution of 1 ps. Some Xilinx library components require a 1 ps resolution to work properly in either functional or timing simulation. The UniSim-based structural simulation models may produce incorrect results if simulated with a resolution other than 1 ps. See the “Register Transfer Level (RTL) Simulation Using Xilinx Libraries” section in Chapter 6 of the <Link>Synthesis and Simulation Design Guide </Link>for more information. This document is part of the ISE Software Manuals set available at <Link>www.xilinx.com/support/software_manuals.htm</Link>. </P><P id="LinkTarget_2710">XCO Parameters </P><P><Link>Table 22 </Link>defines valid entries for the XCO parameters. Parameters are not case sensitive. Default values are displayed in bold. Xilinx strongly recommends that XCO parameters not be manually edited in the XCO file; instead, use CORE Generator software GUI to configure the core and perform range and parameter value checking. </P><Table><Caption><P>Table  22: XCO Parameters </P></Caption><TR><TD>XCO Parameter </TD><TD>XCO Values </TD></TR><TR><TD>Component_Name </TD><TD>Name must begin with a letter and be composed of the following characters: a to z, A to Z, 0 to 9 and &quot;_&quot;. </TD></TR><TR><TD>Operation_Type </TD><TD>Add_Subtract, Multiply, Divide, Square_Root, Compare, Fixed_to_float, Float_to_fixed, Float_to_float </TD></TR><TR><TD>Add_Sub_Value </TD><TD>Both, Add, Subtract </TD></TR></Table><P>DS335 March 1, 2011 <Link>www.xilinx.com </Link></P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_21.jpg"/></Figure><Table><Caption><P>Table  22: XCO Parameters </P></Caption><TR><TD>XCO Parameter </TD><TD>XCO Values </TD></TR><TR><TD>C_Compare_Operation </TD><TD>Programmable, Unordered, Less_Than, Equal, Less_Than_Or_Equal, Greater_Than, Not_Equal, Greater_Than_Or_Equal, Condition_Code </TD></TR><TR><TD>A_Precision_Type </TD><TD>Single, Double, Int32, Custom </TD></TR><TR><TD>C_A_Exponent_Width </TD><TD><Link>Integer with range summarized in Table 6 and Table 7. Required when A_Precision_Type is Custom. </Link></TD></TR><TR><TD>C_A_Fraction_Width </TD><TD><Link>Integer with range summarized in Table 6 and Table 7. Required when A_Precision_Type is Custom. </Link></TD></TR><TR><TD>Result_Precision_Type </TD><TD>Single, Double, Int32, Custom. </TD></TR><TR><TD>C_Result_Exponent_Width </TD><TD><Link>Integer with range summarized in Table 6 and Table 7. Required when Result_Precision_Type is Custom. </Link></TD></TR><TR><TD>C_Result_Fraction_Width </TD><TD><Link>Integer with range summarized in Table 6 and Table 7. Required when Result_Precision_Type is Custom. </Link></TD></TR><TR><TD>C_Optimization </TD><TD>Speed_Optimized, Low_Latency </TD></TR><TR><TD>C_Mult_Usage </TD><TD>No_Usage, Medium_Usage, Full_Usage, Max_Usage </TD></TR><TR><TD>Maximum_Latency </TD><TD>False, True </TD></TR><TR><TD>C_Latency </TD><TD><Link>Integer with range 0 to the maximum latency of core as summarized by Tables 10 through 21 (default is maximum latency). Required when Maximum_Latency is False. </Link></TD></TR><TR><TD>C_Rate </TD><TD><Link>Integer with range 1 to maximum rate as described in Cycles per Operation (default is 1). </Link></TD></TR><TR><TD>C_Speed </TD><TD>Maximum_Speed </TD></TR><TR><TD>C_Has_OPERATION_ND </TD><TD>False, True </TD></TR><TR><TD>C_Has_OPERATION_RFD </TD><TD>False, True </TD></TR><TR><TD>C_Has_RDY </TD><TD>False, True </TD></TR><TR><TD>C_Has_SCLR </TD><TD>False, True </TD></TR><TR><TD>C_Has_CE </TD><TD>False, True </TD></TR><TR><TD>C_Has_UNDERFLOW </TD><TD>False, True </TD></TR><TR><TD>C_Has_OVERFLOW </TD><TD>False, True </TD></TR><TR><TD>C_Has_INVALID_OP </TD><TD>False, True </TD></TR><TR><TD>C_Has_DIVIDE_BY_ZERO </TD><TD>False, True </TD></TR></Table><P><Link>www.xilinx.com </Link>DS335 March 1, 2011 </P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_22.jpg"/></Figure><P id="LinkTarget_2711">Modeling </P><P>As described previously, the core performs floating-point arithmetic as defined by the IEEE-754 Standard for single and double precision formats for all but denormalized numbers. The latter are extremely small numbers which very rarely contribute to the final result of a calculation. The following c-code shows how to determine single precision results for a particular operation using standard c-code for comparison with the core: </P><P>#include &lt;stdio.h> 
main() { 
</P><P>union int32_or_single { 
int i; 
float f; 
</P><P>} a, b, r, rs; 
</P><P>union int64_or_double { 
long long int i; // Please specify 64-bit integer type for platform 
double f; 
</P><P>} rd; 
</P><P>// Uncomment to assign values in decimal 
//a.f = 15161.0; 
//b.f = 1077.00048828125; 
// Assign values in hexadecimal 
a.i=0x466CE400; 
b.i=0x4486A004; 
</P><P>//Do the deed (in this example subtraction) 
r.f=a.f - b.f; 
</P><P>//Repeat, but this time do in double precision to avoid rounding 
rd.f=(double) a.f - (double) b.f; 
</P><P>printf(&quot;a: Hex=%08X &quot;, a.i); 
printf(&quot;Float=%.11f\n&quot;, a.f); 
printf(&quot;b: Hex=%08X &quot;, b.i); 
printf(&quot;Float=%.11f\n&quot;, b.f); 
printf(&quot;Single result: Hex=%08X &quot;, r.i); 
printf(&quot;Float=%.11f\n&quot;, r.f); 
printf(&quot;Double result: Hex=%08X%08X &quot;,(int)(rd.i&gt;&gt;32),(int)(rd.i&amp;0xFFFFFFFF)); 
printf(&quot;Float=%.11f\n&quot;, rd.f); 
</P><P>rs.f = (float) rd.f; // Round result from double to single 
</P><P>printf(&quot;Double rounded to single: Hex=%08X &quot;, rs.i); 
printf(&quot;Float=%.11f\n&quot;, rs.f); 
</P><P>// Expect the following output: 
// a: Hex=466CE400 Float=15161.00000000000 
// b: Hex=4486A004 Float=1077.00048828125 
// Single precision result: Hex=465C1000 Float=14084.00000000000 
// Double precision result: Hex=40CB81FFF0000000 Float=14083.99951171875 
// Double rounded to single: Hex=465C1000 Float=14084.00000000000 
</P><P>} 
</P><P>DS335 March 1, 2011 <Link>www.xilinx.com </Link></P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_23.jpg"/></Figure><P id="LinkTarget_2712">Migrating to Floating-Point Operator v5.0 from v4.0 </P><P>The CORE Generator core update feature may be used to update an existing Floating-Point Operator XCO file from version 4.0 to version 5.0 of the Floating-Point Operator core. The core may then be regenerated to create a new netlist. See the CORE Generator documentation for more information on this feature. </P><P id="LinkTarget_2713">Port Changes </P><P>There are no differences in port naming conventions, polarities, priorities or widths between versions. </P><P id="LinkTarget_2714">Latency Changes </P><P>There are no latency differences between versions. If Latency Configuration is Manual, the latency used for v4.0 will be re-used when regenerating for v5.0. </P><P id="LinkTarget_2715">Resource Utilization and Performance </P><P>The resource requirements and maximum clock rates achievable on Spartan-6, Spartan-3A DSP, Virtex-6 and Virtex-5 FPGAs are summarized as follows for the case of maximum latency and no SCLR or CEpins. </P><P>Note: Both LUT and FF resource usage and maximum frequency reduce with latency. Minimizing latency minimizes resources. </P><P>The maximum clock frequency results were obtained by double-registering input and output ports to reduce dependence on I/O placement. The inner level of registers used a separate clock signal to measure the path from the input registers to the first output register through the core. </P><P>The resource usage results do not include the above &quot;characterization&quot; registers and represent the true logic used by the core. LUT counts include SRL16s or SRL32s (according to device family). </P><P>The map options used were: “map -pr b -ol high.“ </P><P>The par options used were: “par -t 1 -ol high.” </P><P>Clock frequency does not take clock jitter into account and should be derated by an amount appropriate to the clock source jitter specification. </P><P>The maximum achievable clock frequency and the resource counts may also be affected by other tool options, additional logic in the FPGA device, using a different version of Xilinx tools, and other factors. </P><P>It is possible to improve performance of the Xilinx Floating-Point Operator within a system context by placing the operator within an area group. Placement of both the logic slices and XtremeDSP slices can be contained in this way. If multiply-add operations are used, then placing them in the same group can be helpful. Groups can also include any supporting logic to ensure that it is placed close to the operators. </P><P><Link>www.xilinx.com </Link>DS335 March 1, 2011 </P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_24.jpg"/></Figure><P id="LinkTarget_2716">Custom Format: 17-Bit Fraction and 24-Bit Total Wordlength </P><P>The resource requirements and maximum clock rates achievable with 17-bit fraction and 24-bit total wordlength on Spartan-6 FPGAs are summarized in <Link>Table 23</Link>. </P><Table><Caption><P>Table  23: Characterization of 17-Bit Fraction and 24-Bit Total Wordlength on Spartan-6 FPGA (Part=XC6SLX16-2) </P></Caption><TR><TH>Operation </TH><TH/><TH>Resources </TH><TH/><TH/><TH>Maximum Frequency (MHz)1, 2 </TH></TR><TR><TD>Embedded </TD><TD/><TD/><TD>Fabric </TD><TD/><TD>Spartan-6 </TD></TR><TR><TD>Type </TD><TD>Number </TD><TD>LUT-FF Pairs</TD><TD> LUTs </TD><TD>FFs </TD><TD>-2 Speed Grade </TD></TR><TR><TH>Multiply </TH><TD>DSP48A1 (max usage) </TD><TD>2 </TD><TD>100 </TD><TD>97 </TD><TD>94 </TD><TD>192 </TD></TR><TR><TD>DSP48A1 (full usage) </TD><TD>1 </TD><TD>117 </TD><TD>108 </TD><TD>122 </TD><TD>245 </TD></TR><TR><TD>Logic (no usage) </TD><TD>0 </TD><TD>366 </TD><TD>355 </TD><TD>396 </TD><TD>213 </TD></TR><TR><TH>Add/Subtract </TH><TD>Logic (no usage) </TD><TD/><TD>341 </TD><TD>332 </TD><TD>432 </TD><TD>236 </TD></TR><TR><TH>Fixed to float </TH><TD>Int24 input </TD><TD/><TD>169 </TD><TD>158 </TD><TD>175 </TD><TD>250 </TD></TR><TR><TH>Float to fixed </TH><TD>Int24 result </TD><TD/><TD>162 </TD><TD>157 </TD><TD>187 </TD><TD>250 </TD></TR><TR><TH>Float to float </TH><TD>Single to 24-17 format </TD><TD/><TD>78 </TD><TD>77 </TD><TD>85 </TD><TD>250 </TD></TR><TR><TD>24-17 to single </TD><TD/><TD>41 </TD><TD>35 </TD><TD>52 </TD><TD>250 </TD></TR><TR><TH>Compare </TH><TD>Programmable </TD><TD/><TD>47 </TD><TD>46 </TD><TD>19 </TD><TD>250 </TD></TR><TR><TH>Divide </TH><TD>C_RATE=1 </TD><TD/><TD>614 </TD><TD>606 </TD><TD>750 </TD><TD>237 </TD></TR><TR><TD>C_RATE=19 </TD><TD/><TD>183 </TD><TD>168 </TD><TD>180 </TD><TD>200 </TD></TR><TR><TH>Sqrt </TH><TD>C_RATE=1 </TD><TD/><TD>412 </TD><TD>389 </TD><TD>462 </TD><TD>250 </TD></TR><TR><TD>C_RATE=18 </TD><TD/><TD>122 </TD><TD>109 </TD><TD>153 </TD><TD>250 </TD></TR></Table><P>Notes: </P><L><LI><LI_Label>1. 	</LI_Label><LI_Title>Area and maximum clock frequencies are provided as a guide and might vary with new releases of the Xilinx implementation tools. </LI_Title></LI><LI><LI_Label>2. 	</LI_Label><LI_Title>Maximum clock frequencies are shown in MHz. Clock frequency does not take jitter into account and should be de-rated by an amount appropriate to the clock source jitter specification. </LI_Title></LI></L><P>DS335 March 1, 2011 	<Link>www.xilinx.com </Link></P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_25.jpg"/></Figure><P>The resource requirements and maximum clock rates achievable with 17-bit fraction and 24-bit total wordlength on Spartan-3A DSP FPGAs are summarized in <Link>Table 24</Link>. </P><Table><Caption><P>Table  24: Characterization of 17-Bit Fraction and 24-Bit Total Wordlength on Spartan-3A DSP FPGA (Part = XC3SD3400A-4) </P></Caption><TR><TH>Operation </TH><TH/><TH>Resources </TH><TH/><TH/><TH>Maximum Frequency (MHz)1,2 </TH></TR><TR><TD>Embedded </TD><TD/><TD/><TD>Fabric </TD><TD/><TD>Spartan-3A DSP </TD></TR><TR><TD>Type </TD><TD>Number </TD><TD>Slices</TD><TD> LUTs </TD><TD>FFs </TD><TD>-4 Speed Grade </TD></TR><TR><TH>Multiply </TH><TD>DSP48A (max usage) </TD><TD>2 </TD><TD>95 </TD><TD>134 </TD><TD>102 </TD><TD>184 </TD></TR><TR><TD>DSP48A (full usage) </TD><TD>1 </TD><TD>107 </TD><TD>105 </TD><TD>134 </TD><TD>207 </TD></TR><TR><TD>Logic (no usage) </TD><TD>0 </TD><TD>250 </TD><TD>352 </TD><TD>407 </TD><TD>166 </TD></TR><TR><TH>Add/Subtract </TH><TD>Logic (no usage) </TD><TD/><TD>333 </TD><TD>471 </TD><TD>429 </TD><TD>194 </TD></TR><TR><TH>Fixed to float </TH><TD>Int24 input </TD><TD/><TD>134 </TD><TD>178 </TD><TD>178 </TD><TD>208 </TD></TR><TR><TH>Float to fixed </TH><TD>Int24 result </TD><TD/><TD>152 </TD><TD>243 </TD><TD>186 </TD><TD>206 </TD></TR><TR><TH>Float to float </TH><TD>Single to 24-17 format </TD><TD/><TD>69 </TD><TD>71 </TD><TD>85 </TD><TD>236 </TD></TR><TR><TD>24-17 to single </TD><TD/><TD>33 </TD><TD>36 </TD><TD>52 </TD><TD>250 </TD></TR><TR><TH>Compare </TH><TD>Programmable </TD><TD/><TD>47 </TD><TD>75 </TD><TD>19 </TD><TD>206 </TD></TR><TR><TH>Divide </TH><TD>C_RATE=1 </TD><TD/><TD>426 </TD><TD>466 </TD><TD>753 </TD><TD>194 </TD></TR><TR><TD>C_RATE=19 </TD><TD/><TD>152 </TD><TD>173 </TD><TD>181 </TD><TD>168 </TD></TR><TR><TH>Sqrt </TH><TD>C_RATE=1 </TD><TD/><TD>282 </TD><TD>334 </TD><TD>462 </TD><TD>202 </TD></TR><TR><TD>C_RATE=18 </TD><TD/><TD>121 </TD><TD>160 </TD><TD>156 </TD><TD>182 </TD></TR></Table><P>Notes: </P><L><LI><LI_Label>1. 	</LI_Label><LI_Title>Area and maximum clock frequencies are provided as a guide and might vary with new releases of the Xilinx implementation tools. </LI_Title></LI><LI><LI_Label>2. 	</LI_Label><LI_Title>Maximum clock frequencies are shown in MHz. Clock frequency does not take jitter into account and should be de-rated by an amount appropriate to the clock source jitter specification. </LI_Title></LI></L><P><Link>www.xilinx.com 	</Link>DS335 March 1, 2011 </P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_26.jpg"/></Figure><P>The resource requirements and maximum clock rates achievable with 17-bit fraction and 24-bit total wordlength on Virtex-6 FPGAs are summarized in <Link>Table 25</Link>. </P><Table><Caption><P>Table  25: Characterization of 17-Bit Fraction and 24-Bit Total Wordlength on Virtex-6 FPGA (Part = XC6VLX75-1) </P></Caption><TR><TH>Operation </TH><TH/><TH>Resources </TH><TH/><TH/><TH>Maximum Frequency (MHz)1,2 </TH></TR><TR><TD>Embedded </TD><TD/><TD/><TD>Fabric </TD><TD/><TD>Virtex-6 </TD></TR><TR><TD>Type </TD><TD>Number </TD><TD>LUT-FF Pairs</TD><TD> LUTs </TD><TD>FFs </TD><TD>-1 Speed Grade </TD></TR><TR><TH>Multiply </TH><TD>DSP48E1 (max usage) </TD><TD>2 </TD><TD>107 </TD><TD>101 </TD><TD>126 </TD><TD>423 </TD></TR><TR><TD>DSP48E1 (full usage) </TD><TD>1 </TD><TD>119 </TD><TD>112 </TD><TD>122 </TD><TD>429 </TD></TR><TR><TD>Logic (no usage) </TD><TD>0 </TD><TD>373 </TD><TD>363 </TD><TD>396 </TD><TD>371 </TD></TR><TR><TH>Add/ Subtract </TH><TD>Logic (no usage) </TD><TD/><TD>361 </TD><TD>351 </TD><TD>407 </TD><TD>403 </TD></TR><TR><TH>Fixed to float </TH><TD>Int24 input </TD><TD/><TD>171 </TD><TD>170 </TD><TD>139 </TD><TD>349 </TD></TR><TR><TH>Float to fixed </TH><TD>Int24 result </TD><TD/><TD>172 </TD><TD>167 </TD><TD>187 </TD><TD>450 </TD></TR><TR><TH>Float to float </TH><TD>Single to 24-17 format </TD><TD/><TD>91 </TD><TD>88 </TD><TD>85 </TD><TD>450 </TD></TR><TR><TD>24-17 to single </TD><TD/><TD>46 </TD><TD>45 </TD><TD>52 </TD><TD>450 </TD></TR><TR><TH>Compare </TH><TD>Programmable </TD><TD/><TD>46 </TD><TD>45 </TD><TD>19 </TD><TD>450 </TD></TR><TR><TH>Divide </TH><TD>C_RATE=1 </TD><TD/><TD>611 </TD><TD>609 </TD><TD>750 </TD><TD>450 </TD></TR><TR><TD>C_RATE=19 </TD><TD/><TD>199 </TD><TD>192 </TD><TD>180 </TD><TD>374 </TD></TR><TR><TH>Sqrt </TH><TD>C_RATE=1 </TD><TD/><TD>410 </TD><TD>403 </TD><TD>462 </TD><TD>450 </TD></TR><TR><TD>C_RATE=18 </TD><TD/><TD>142 </TD><TD>134 </TD><TD>153 </TD><TD>450 </TD></TR></Table><L><LI><LI_Label>1. 	</LI_Label><LI_Title>Area and maximum clock frequencies are provided as a guide and might vary with new releases of the Xilinx implementation tools. </LI_Title></LI><LI><LI_Label>2. 	</LI_Label><LI_Title>Maximum clock frequencies are shown in MHz. Clock frequency does not take jitter into account and should be de-rated by an amount appropriate to the clock source jitter specification. </LI_Title></LI></L><P>DS335 March 1, 2011 	<Link>www.xilinx.com </Link></P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_27.jpg"/></Figure><P>The resource requirements and maximum clock rates achievable with 17-bit fraction and 24-bit total wordlength on Virtex-5 are summarized in <Link>Table 26</Link>. </P><Table><Caption><P>Table  26: Characterization of 17-Bit Fraction and 24-Bit Total Wordlength on Virtex-5 FPGA (Part = XC5VLX30-1) </P></Caption><TR><TH>Operation </TH><TH/><TH>Resources </TH><TH/><TH/><TH>Maximum Frequency (MHz)1,2 </TH></TR><TR><TD>Embedded </TD><TD/><TD/><TD>Fabric </TD><TD/><TD>Virtex-5 </TD></TR><TR><TD>Type </TD><TD>Number </TD><TD>LUT-FF Pairs</TD><TD> LUTs </TD><TD>FFs </TD><TD>-1 Speed Grade </TD></TR><TR><TH>Multiply </TH><TD>DSP48E (max usage) </TD><TD>2 </TD><TD>139 </TD><TD>66 </TD><TD>127 </TD><TD>410 </TD></TR><TR><TD>DSP48E (full usage) </TD><TD>1 </TD><TD>137 </TD><TD>87 </TD><TD>122 </TD><TD>410 </TD></TR><TR><TD>Logic (no usage) </TD><TD>0 </TD><TD>416 </TD><TD>334 </TD><TD>395 </TD><TD>334 </TD></TR><TR><TH>Add/ Subtract </TH><TD>Logic (no usage) </TD><TD/><TD>452 </TD><TD>338 </TD><TD>407 </TD><TD>404 </TD></TR><TR><TH>Fixed to float </TH><TD>Int24 input </TD><TD/><TD>177 </TD><TD>143 </TD><TD>139 </TD><TD>354 </TD></TR><TR><TH>Float to fixed </TH><TD>Int24 result </TD><TD/><TD>202 </TD><TD>155 </TD><TD>187 </TD><TD>414 </TD></TR><TR><TH>Float to float </TH><TD>Single to 24-17 format </TD><TD/><TD>96 </TD><TD>61 </TD><TD>85 </TD><TD>450 </TD></TR><TR><TD>24-17 to single </TD><TD/><TD>54 </TD><TD>34 </TD><TD>52 </TD><TD>450 </TD></TR><TR><TH>Compare </TH><TD>Programmable </TD><TD/><TD>53 </TD><TD>45 </TD><TD>19 </TD><TD>450 </TD></TR><TR><TH>Divide </TH><TD>C_RATE=1 </TD><TD/><TD>773 </TD><TD>450 </TD><TD>751 </TD><TD>433 </TD></TR><TR><TD>C_RATE=19 </TD><TD/><TD>222 </TD><TD>150 </TD><TD>181 </TD><TD>360 </TD></TR><TR><TH>Sqrt </TH><TD>C_RATE=1 </TD><TD/><TD>485 </TD><TD>325 </TD><TD>462 </TD><TD>441 </TD></TR><TR><TD>C_RATE=18 </TD><TD/><TD>161 </TD><TD>127 </TD><TD>153 </TD><TD>429 </TD></TR></Table><P>Notes: </P><L><LI><LI_Label>1. 	</LI_Label><LI_Title>Area and maximum clock frequencies are provided as a guide and might vary with new releases of the Xilinx implementation tools. </LI_Title></LI><LI><LI_Label>2. 	</LI_Label><LI_Title>Maximum clock frequencies are shown in MHz. Clock frequency does not take jitter into account and should be de-rated by an amount appropriate to the clock source jitter specification. </LI_Title></LI></L><P><Link>www.xilinx.com 	</Link>DS335 March 1, 2011 </P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_28.jpg"/></Figure><P id="LinkTarget_2717">Single-Precision Format </P><P>The resource requirements and maximum clock rates achievable with single-precision format on Spartan-6 is summarized in <Link>Table 27</Link>. </P><Table><Caption><P>Table  27: Characterization of Single-Precision Format on Spartan-6 FPGAs (Part = XC6SLX16-2) </P></Caption><TR><TH>Operation </TH><TH/><TH>Resources </TH><TH/><TH/><TH>Maximum Frequency (MHz)1,2 </TH></TR><TR><TH>Embedded </TH><TH/><TH/><TH>Fabric </TH><TH/><TH>Spartan-6 </TH></TR><TR><TH>Type </TH><TH>Number </TH><TH>LUT-FF Pairs </TH><TH>LUTs </TH><TH>FFs </TH><TH>-2 Speed Grade </TH></TR><TR><TH>Multiplier </TH><TH>DSP48A1 (max usage) </TH><TD>5 </TD><TD>174 </TD><TD>160 </TD><TD>191 </TD><TD>192 </TD></TR><TR><TH>DSP48A1 (full usage) </TH><TD>4 </TD><TD>193 </TD><TD>169 </TD><TD>232 </TD><TD>244 </TD></TR><TR><TH>DSP48A1 (medium usage) </TH><TD>1 </TD><TD>495 </TD><TD>488 </TD><TD>545 </TD><TD>233 </TD></TR><TR><TH>Logic (no usage) </TH><TD>0 </TD><TD>649 </TD><TD>637 </TD><TD>692 </TD><TD>203 </TD></TR><TR><TH>Add/ Subtract </TH><TH>Logic (no usage) </TH><TD>0 </TD><TD>482 </TD><TD>457 </TD><TD>590 </TD><TD>245 </TD></TR><TR><TH>Fixed to float </TH><TH>Int32 input </TH><TD/><TD>209 </TD><TD>203 </TD><TD>224 </TD><TD>226 </TD></TR><TR><TH>Float to fixed </TH><TH>Int32 result </TH><TD/><TD>205 </TD><TD>199 </TD><TD>233 </TD><TD>240 </TD></TR><TR><TH>Float to float </TH><TH>Single to double </TH><TD/><TD>44 </TD><TD>42 </TD><TD>68 </TD><TD>250 </TD></TR><TR><TH>Compare </TH><TH>Programmable </TH><TD/><TD>58 </TD><TD>53 </TD><TD>19 </TD><TD>250 </TD></TR><TR><TH>Divide </TH><TH>C_RATE=1 </TH><TD/><TD>1,106 </TD><TD>1,078 </TD><TD>1,366 </TD><TD>200 </TD></TR><TR><TH>C_RATE=26 </TH><TD/><TD>219 </TD><TD>207 </TD><TD>222 </TD><TD>197 </TD></TR><TR><TH>Sqrt </TH><TH>C_RATE=1 </TH><TD/><TD>685 </TD><TD>671 </TD><TD>809 </TD><TD>217 </TD></TR><TR><TH>C_RATE=25 </TH><TD/><TD>152 </TD><TD>146 </TD><TD>199 </TD><TD>240 </TD></TR></Table><P>Notes: </P><L><LI><LI_Label>1. 	</LI_Label><LI_Title>Area and maximum clock frequencies are provided as a guide and might vary with new releases of the Xilinx implementation tools. </LI_Title></LI><LI><LI_Label>2. 	</LI_Label><LI_Title>Maximum clock frequencies are shown in MHz. Clock frequency does not take jitter into account and should be de-rated by an amount appropriate to the clock source jitter specification. </LI_Title></LI></L><P>DS335 March 1, 2011 	<Link>www.xilinx.com </Link></P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_29.jpg"/></Figure><P>The resource requirements and maximum clock rates achievable with single-precision format on Spartan-3A DSP is summarized in <Link>Table 28</Link>. </P><Table><Caption><P>Table  28: Characterization of Single-Precision Format on Spartan-3A DSP (XCS3SD3400A-4) </P></Caption><TR><TH>Operation </TH><TH/><TH>Resources </TH><TH/><TH/><TH>Maximum Frequency (MHz)1,2 </TH></TR><TR><TH>Embedded </TH><TH/><TH/><TH>Fabric </TH><TH/><TH>Spartan-3A DSP </TH></TR><TR><TH>Type </TH><TH>Number </TH><TH>Slices </TH><TH>LUTs </TH><TH>FFs </TH><TH>-4 Speed Grade </TH></TR><TR><TH>Multiplier </TH><TH>DSP48A (max usage) </TH><TD>5 </TD><TD>150 </TD><TD>184 </TD><TD>204 </TD><TD>202 </TD></TR><TR><TH>DSP48A (full usage) </TH><TD>4 </TD><TD>170 </TD><TD>180 </TD><TD>245 </TD><TD>199 </TD></TR><TR><TH>DSP48A (medium usage) </TH><TD>1 </TD><TD>337 </TD><TD>487 </TD><TD>559 </TD><TD>171 </TD></TR><TR><TH>Logic (no usage) </TH><TD>0 </TD><TD>408 </TD><TD>646 </TD><TD>703 </TD><TD>164 </TD></TR><TR><TH>Add/ Subtract </TH><TH>Logic (no usage) </TH><TD>0 </TD><TD>441 </TD><TD>600 </TD><TD>590 </TD><TD>210 </TD></TR><TR><TH>Fixed to float </TH><TH>Int32 input </TH><TD/><TD>172 </TD><TD>230 </TD><TD>226 </TD><TD>186 </TD></TR><TR><TH>Float to fixed </TH><TH>Int32 result </TH><TD/><TD>199 </TD><TD>269 </TD><TD>232 </TD><TD>187 </TD></TR><TR><TH>Float to float </TH><TH>Single to double </TH><TD/><TD>42 </TD><TD>46 </TD><TD>68 </TD><TD>250 </TD></TR><TR><TH>Compare </TH><TH>Programmable </TH><TD/><TD>55 </TD><TD>91 </TD><TD>19 </TD><TD>185 </TD></TR><TR><TH>Divide </TH><TH>C_RATE=1 </TH><TD/><TD>779 </TD><TD>827 </TD><TD>1,367 </TD><TD>179 </TD></TR><TR><TH>C_RATE=26 </TH><TD/><TD>195 </TD><TD>232 </TD><TD>226 </TD><TD>158 </TD></TR><TR><TH>Sqrt </TH><TH>C_RATE=1 </TH><TD/><TD>478 </TD><TD>549 </TD><TD>809 </TD><TD>177 </TD></TR><TR><TH>C_RATE=25 </TH><TD/><TD>157 </TD><TD>214 </TD><TD>202 </TD><TD>173 </TD></TR></Table><P>Notes: </P><L><LI><LI_Label>1. 	</LI_Label><LI_Title>Area and maximum clock frequencies are provided as a guide and might vary with new releases of the Xilinx implementation tools. </LI_Title></LI><LI><LI_Label>2. 	</LI_Label><LI_Title>Maximum clock frequencies are shown in MHz. Clock frequency does not take jitter into account and should be de-rated by an amount appropriate to the clock source jitter specification. </LI_Title></LI></L><P><Link>www.xilinx.com 	</Link>DS335 March 1, 2011 </P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_30.jpg"/></Figure><P>The resource requirements and maximum clock rates achievable with single-precision format on Virtex-6 DSP is summarized in <Link>Table 29</Link>. </P><Table><Caption><P>Table  29: Characterization of Single-Precision Format on Virtex-6 FPGAs (Part = XC6VLX75-1) </P></Caption><TR><TH>Operation </TH><TH/><TH>Resources </TH><TH/><TH/><TH>Maximum Frequency (MHz)1,2 </TH></TR><TR><TH>Embedded </TH><TH/><TH/><TH>Fabric </TH><TH/><TH>Virtex-6 </TH></TR><TR><TH>Type </TH><TH>Number </TH><TH>LUT-FF Pairs </TH><TH>LUTs </TH><TH>FFs </TH><TH>-1 Speed Grade </TH></TR><TR><TH>Multiply </TH><TH>DSP48E1 (max usage) </TH><TD>3 </TD><TD>110 </TD><TD>107 </TD><TD>114 </TD><TD>429 </TD></TR><TR><TH>DSP48E1 (full usage) </TH><TD>2 </TD><TD>156 </TD><TD>154 </TD><TD>183 </TD><TD>429 </TD></TR><TR><TH>DSP48E1 (medium usage) </TH><TD>1 </TD><TD>344 </TD><TD>336 </TD><TD>378 </TD><TD>390 </TD></TR><TR><TH>Logic </TH><TD>0 </TD><TD>662 </TD><TD>659 </TD><TD>692 </TD><TD>395 </TD></TR><TR><TH>Add/ Subtract </TH><TH>DSP48E1 (speed optimized, full usage) </TH><TD>2 </TD><TD>295 </TD><TD>287 </TD><TD>337 </TD><TD>380 </TD></TR><TR><TH>Logic (speed optimized, no usage) </TH><TD>0 </TD><TD>489 </TD><TD>477 </TD><TD>557 </TD><TD>450 </TD></TR><TR><TH>Logic (low latency) </TH><TD>0 </TD><TD>605 </TD><TD>601 </TD><TD>626 </TD><TD>393 </TD></TR><TR><TH>Fixed to float </TH><TH>Int32 input </TH><TD/><TD>205 </TD><TD>200 </TD><TD>224 </TD><TD>411 </TD></TR><TR><TH>Float to fixed </TH><TH>Int32 result </TH><TD/><TD>209 </TD><TD>206 </TD><TD>233 </TD><TD>450 </TD></TR><TR><TH>Float to float </TH><TH>Single to double </TH><TD/><TD>59 </TD><TD>58 </TD><TD>68 </TD><TD>450 </TD></TR><TR><TH>Compare </TH><TH>Programmable </TH><TD/><TD>54 </TD><TD>53 </TD><TD>19 </TD><TD>450 </TD></TR><TR><TH>Divide </TH><TH>C_RATE=1 </TH><TD/><TD>1,099 </TD><TD>1,071 </TD><TD>1,366 </TD><TD>433 </TD></TR><TR><TH>C_RATE=26 </TH><TD/><TD>217 </TD><TD>215 </TD><TD>222 </TD><TD>401 </TD></TR><TR><TH>Sqrt </TH><TH>C_RATE=1 </TH><TD/><TD>696 </TD><TD>683 </TD><TD>809 </TD><TD>382 </TD></TR><TR><TH>C_RATE=25 </TH><TD/><TD>188 </TD><TD>181 </TD><TD>199 </TD><TD>386 </TD></TR></Table><P>Notes: </P><L><LI><LI_Label>1. 	</LI_Label><LI_Title>Area and maximum clock frequencies are provided as a guide and might vary with new releases of the Xilinx implementation tools. </LI_Title></LI><LI><LI_Label>2. 	</LI_Label><LI_Title>Maximum clock frequencies are shown in MHz. Clock frequency does not take jitter into account and should be de-rated by an amount appropriate to the clock source jitter specification. </LI_Title></LI></L><P>DS335 March 1, 2011 	<Link>www.xilinx.com </Link></P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_31.jpg"/></Figure><P>The resource requirements and maximum clock rates achievable with single-precision format on Virtex-5 is summarized in <Link>Table 30</Link>. </P><Table><Caption><P>Table  30: Characterization of Single-Precision Format on Virtex-5 FPGAs (Part = XC5VLX30-1) </P></Caption><TR><TH>Operation </TH><TH/><TH>Resources </TH><TH/><TH/><TH>Maximum Frequency (MHz)1,2 </TH></TR><TR><TH>Embedded </TH><TH/><TH/><TH>Fabric </TH><TH/><TH>Virtex-5 </TH></TR><TR><TH>Type </TH><TH>Number </TH><TH>LUT-FF Pairs </TH><TH>LUTs </TH><TH>FFs </TH><TH>-1 Speed Grade </TH></TR><TR><TH>Multiply </TH><TH>DSP48E (max usage) </TH><TD>3 </TD><TD>134 </TD><TD>99 </TD><TD>114 </TD><TD>410 </TD></TR><TR><TH>DSP48E (full usage) </TH><TD>2 </TD><TD>201 </TD><TD>112 </TD><TD>184 </TD><TD>410 </TD></TR><TR><TH>DSP48E (medium usage) </TH><TD>1 </TD><TD>402 </TD><TD>268 </TD><TD>378 </TD><TD>384 </TD></TR><TR><TH>Logic </TH><TD>0 </TD><TD>716 </TD><TD>630 </TD><TD>690 </TD><TD>359 </TD></TR><TR><TH>Add/Subtract </TH><TH>DSP48E (speed optimized, full usage) </TH><TD>2 </TD><TD>378 </TD><TD>245 </TD><TD>337 </TD><TD>410 </TD></TR><TR><TH>Logic (speed optimized, no usage) </TH><TD>0 </TD><TD>629 </TD><TD>432 </TD><TD>558 </TD><TD>420 </TD></TR><TR><TH>Logic (low latency) </TH><TD>0 </TD><TD>707 </TD><TD>562 </TD><TD>626 </TD><TD>377 </TD></TR><TR><TH>Fixed to float </TH><TH>Int32 input </TH><TD/><TD>254 </TD><TD>181 </TD><TD>224 </TD><TD>375 </TD></TR><TR><TH>Float to fixed </TH><TH>Int32 result </TH><TD/><TD>257 </TD><TD>199 </TD><TD>233 </TD><TD>373 </TD></TR><TR><TH>Float to float </TH><TH>Single to double </TH><TD/><TD>75 </TD><TD>43 </TD><TD>68 </TD><TD>450 </TD></TR><TR><TH>Compare </TH><TH>Programmable </TH><TD/><TD>61 </TD><TD>53 </TD><TD>19 </TD><TD>438 </TD></TR><TR><TH>Divide </TH><TH>C_RATE=1 </TH><TD/><TD>1,407 </TD><TD>780 </TD><TD>1,367 </TD><TD>381 </TD></TR><TR><TH>C_RATE=26 </TH><TD/><TD>262 </TD><TD>187 </TD><TD>223 </TD><TD>337 </TD></TR><TR><TH>Sqrt </TH><TH>C_RATE=1 </TH><TD/><TD>835 </TD><TD>533 </TD><TD>809 </TD><TD>406 </TD></TR><TR><TH>C_RATE=25 </TH><TD/><TD>208 </TD><TD>170 </TD><TD>199 </TD><TD>390 </TD></TR></Table><P>Notes: </P><L><LI><LI_Label>1. 	</LI_Label><LI_Title>Area and maximum clock frequencies are provided as a guide and might vary with new releases of the Xilinx implementation tools. </LI_Title></LI><LI><LI_Label>2. 	</LI_Label><LI_Title>Maximum clock frequencies are shown in MHz. Clock frequency does not take jitter into account and should be de-rated by an amount appropriate to the clock source jitter specification. </LI_Title></LI></L><P><Link>www.xilinx.com 	</Link>DS335 March 1, 2011 </P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_32.jpg"/></Figure><P id="LinkTarget_2718">Double-Precision Format </P><P>The resource requirements and maximum clock rates achievable with double-precision format on Virtex-6 FPGAs are summarized in <Link>Table 31</Link>. </P><Table><Caption><P>Table 31: Characterization of Double-Precision Format on Virtex-6 FPGAs (Part = XC6VLX75-1) </P></Caption><TR><TH>Operation </TH><TH/><TH>Resources </TH><TH/><TH/><TH/><TH>Maximum Frequency (MHz)1,2 </TH></TR><TR><TD>Embedded </TD><TD/><TD/><TD/><TD>Fabric </TD><TD/><TD>Virtex-6 </TD></TR><TR><TD>Type </TD><TD>Number </TD><TD/><TD>LUT-FF Pairs </TD><TD>LUTs </TD><TD>FFs </TD><TD>-1 Speed Grade </TD></TR><TR><TH>Multiply </TH><TD>DSP48E1 (max usage) </TD><TD>11 </TD><TD/><TD>357 </TD><TD>328 </TD><TD>497 </TD><TD>429 </TD></TR><TR><TD>DSP48E1 (full usage) </TD><TD>10 </TD><TD/><TD>372 </TD><TD>351 </TD><TD>494 </TD><TD>395 </TD></TR><TR><TD>DSP48E1 (medium usage) </TD><TD>9 </TD><TD/><TD>428 </TD><TD>411 </TD><TD>554 </TD><TD>408 </TD></TR><TR><TD>Logic </TD><TD>0 </TD><TD/><TD>2,373 </TD><TD>2,352 </TD><TD>2,444 </TD><TD>295 </TD></TR><TR><TD>DSP48E1 (low latency, max usage) </TD><TD>13 </TD><TD/><TD>268 </TD><TD>257 </TD><TD>311 </TD><TD>361 </TD></TR><TR><TH>Add/Subtract </TH><TD>DSP48E1 (speed optimized, full usage) </TD><TD>3 </TD><TD/><TD>849 </TD><TD>834 </TD><TD>960 </TD><TD>421 </TD></TR><TR><TD>Logic (speed optimized, no usage) </TD><TD>0 </TD><TD/><TD>916 </TD><TD>911 </TD><TD>1,046 </TD><TD>361 </TD></TR><TR><TD>Logic (low latency, no usage) </TD><TD>0 </TD><TD/><TD>1,125 </TD><TD>1,121 </TD><TD>1,177 </TD><TD>346 </TD></TR><TR><TH>Fixed to float </TH><TD>Int64 input </TD><TD/><TD/><TD>470 </TD><TD>455 </TD><TD>504 </TD><TD>363 </TD></TR><TR><TH>Float to fixed </TH><TD>Int64 result </TD><TD/><TD/><TD>417 </TD><TD>414 </TD><TD>449 </TD><TD>367 </TD></TR><TR><TH>Float to float </TH><TD>Double to single </TD><TD/><TD/><TD>125 </TD><TD>125 </TD><TD>108 </TD><TD>448 </TD></TR><TR><TH>Compare </TH><TD>Programmable </TD><TD/><TD/><TD>93 </TD><TD>92 </TD><TD>19 </TD><TD>439 </TD></TR><TR><TH>Divide </TH><TD>C_RATE=1 </TD><TD/><TD/><TD>4,650 </TD><TD>4,646 </TD><TD>5,996 </TD><TD>277 </TD></TR><TR><TD>C_RATE=55 </TD><TD/><TD/><TD>399 </TD><TD>374 </TD><TD>387 </TD><TD>306 </TD></TR><TR><TH>Sqrt </TH><TD>C_RATE=1 </TD><TD/><TD/><TD>2,646 </TD><TD>2,633 </TD><TD>3,285 </TD><TD>321 </TD></TR><TR><TD>C_RATE=54 </TD><TD/><TD/><TD>379 </TD><TD>372 </TD><TD>385 </TD><TD>339 </TD></TR></Table><P>Notes: </P><L><LI><LI_Label>1. 	</LI_Label><LI_Title>Area and maximum clock frequencies are provided as a guide and might vary with new releases of the Xilinx implementation tools. </LI_Title></LI><LI><LI_Label>2. 	</LI_Label><LI_Title>Maximum clock frequencies are shown in MHz. Clock frequency does not take jitter into account and should be de-rated by an amount appropriate to the clock source jitter specification. </LI_Title></LI></L><P>DS335 March 1, 2011 	<Link>www.xilinx.com </Link></P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_33.jpg"/></Figure><P>The resource requirements and maximum clock rates achievable with double-precision format on Virtex-5 FPGAs are summarized in <Link>Table 32</Link>. </P><Table><Caption><P>Table 32: Characterization of Double-Precision Format on Virtex-5 FPGAs (Part = XC5VLX30-1) </P></Caption><TR><TH>Operation </TH><TH/><TH>Resources </TH><TH/><TH/><TH>Maximum Frequency (MHz)1,2 </TH></TR><TR><TH>Embedded </TH><TH/><TH/><TH>Fabric </TH><TH/><TH>Virtex-5 </TH></TR><TR><TH>Type </TH><TH>Number </TH><TH>LUT-FF Pairs </TH><TH>LUTs </TH><TH>FFs </TH><TH>-1 Speed Grade </TH></TR><TR><TH>Multiply </TH><TH>DSP48E (max usage) </TH><TD>11 </TD><TD>527 </TD><TD>322 </TD><TD>498 </TD><TD>410 </TD></TR><TR><TH>DSP48E (full usage) </TH><TD>10 </TD><TD>524 </TD><TD>342 </TD><TD>495 </TD><TD>359 </TD></TR><TR><TH>DSP48E (medium usage) </TH><TD>9 </TD><TD>585 </TD><TD>402 </TD><TD>555 </TD><TD>369 </TD></TR><TR><TH>Logic </TH><TD>0 </TD><TD>2,485 </TD><TD>2,293 </TD><TD>2,443 </TD><TD>250 </TD></TR><TR><TH>DSP48E (low latency, max usage) </TH><TD>13 </TD><TD>346 </TD><TD>191 </TD><TD>311 </TD><TD>404 </TD></TR><TR><TH>Add/Subtract </TH><TH>DSP48E (speed optimized, full usage) </TH><TD>3 </TD><TD>1,084 </TD><TD>734 </TD><TD>960 </TD><TD>355 </TD></TR><TR><TH>Logic (speed optimized, no usage) </TH><TD>0 </TD><TD>1,173 </TD><TD>791 </TD><TD>1,046 </TD><TD>333 </TD></TR><TR><TH>Logic (low latency, no usage) </TH><TD>0 </TD><TD>1,305 </TD><TD>1,035 </TD><TD>1,177 </TD><TD>293 </TD></TR><TR><TH>Fixed to float </TH><TH>Int64 input </TH><TD/><TD>559 </TD><TD>404 </TD><TD>504 </TD><TD>306 </TD></TR><TR><TH>Float to fixed </TH><TH>Int64 result </TH><TD/><TD>491 </TD><TD>376 </TD><TD>449 </TD><TD>286 </TD></TR><TR><TH>Float to float </TH><TH>Double to single </TH><TD/><TD>137 </TD><TD>86 </TD><TD>108 </TD><TD>442 </TD></TR><TR><TH>Compare </TH><TH>Programmable </TH><TD/><TD>100 </TD><TD>92 </TD><TD>19 </TD><TD>365 </TD></TR><TR><TH>Divide </TH><TH>C_RATE=1 </TH><TD/><TD>6,113 </TD><TD>3,220 </TD><TD>5,997 </TD><TD>258 </TD></TR><TR><TH>C_RATE=55 </TH><TD/><TD>505 </TD><TD>331 </TD><TD>388 </TD><TD>250 </TD></TR><TR><TH>Sqrt </TH><TH>C_RATE=1 </TH><TD/><TD>3,369 </TD><TD>1,925 </TD><TD>3,285 </TD><TD>279 </TD></TR><TR><TH>C_RATE=54 </TH><TD/><TD>418 </TD><TD>349 </TD><TD>385 </TD><TD>267 </TD></TR></Table><P>Notes: </P><L><LI><LI_Label>1. 	</LI_Label><LI_Title>Area and maximum clock frequencies are provided as a guide and might vary with new releases of the Xilinx implementation tools. </LI_Title></LI><LI><LI_Label>2. 	</LI_Label><LI_Title>Maximum clock frequencies are shown in MHz. Clock frequency does not take jitter into account and should be de-rated by an amount appropriate to the clock source jitter specification. </LI_Title></LI></L><P><Link>www.xilinx.com 	</Link>DS335 March 1, 2011 </P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_34.jpg"/></Figure><P id="LinkTarget_2719">Support </P><P>Xilinx provides technical support for this LogiCORE product when used as described in the product documentation. Xilinx cannot guarantee timing, functionality, or support of product if implemented in devices that are not defined in the documentation, if customized beyond that allowed in the product documentation, or if changes are made to any section of the design labeled DO NOT MODIFY. </P><P>See the IP Release Notes Guide (<Link>XTP025)</Link> for further information on this core. </P><P>For each core, there is a master Answer Record that contains the Release Notes and Known Issues list for the core being used. The following information is listed for each version of the core: </P><L><LI><LI_Label>• 	</LI_Label><LI_Title>New Features </LI_Title></LI><LI><LI_Label>• 	</LI_Label><LI_Title>Bug Fixes </LI_Title></LI><LI><LI_Label>• 	</LI_Label><LI_Title>Known Issues </LI_Title></LI></L><P id="LinkTarget_2720">Ordering Information </P><P>This core may be downloaded from the Xilinx <Link>IP Center </Link>for use with the Xilinx CORE Generator software v13.1 and later. The Xilinx CORE Generator system is shipped with Xilinx ISE Design Suite development software. </P><P>To order Xilinx software, contact your local Xilinx<Link> sales representative</Link>. </P><P id="LinkTarget_2721">References </P><P>1. 	ANSI/IEEE, IEEE Standard for Binary Floating-Point Arithmetic, ANSI/IEEE Standard 754-1985. IEEE-754. </P><P id="LinkTarget_2722">Revision History </P><P>This table shows the revision history of this document.  </P><Table><TR><TH>Date </TH><TH>Version </TH><TH>Revision </TH></TR><TR><TH>04/28/05 </TH><TD>1.0 </TD><TD>Initial Xilinx release. </TD></TR><TR><TH>07/27/05 </TH><TD>1.1 </TD><TD>Document modified to include minor corrections and section on simulation. </TD></TR><TR><TH>01/18/06 </TH><TD>2.0 </TD><TD>Updated to version 2.0 of core, Xilinx tools v8.1i. </TD></TR><TR><TH>09/28/06 </TH><TD>3.0 </TD><TD>Updated to version 3.0 of core, Xilinx tools v8.2i. </TD></TR><TR><TH>04/25/08 </TH><TD>4.0 </TD><TD>Updated to version 4.0 of core, Xilinx tools v10.1. </TD></TR><TR><TH>06/24/09 </TH><TD>5.0 </TD><TD>Updated to version 5.0 of core, Xilinx tools v11.2. </TD></TR><TR><TH>03/01/11 </TH><TD>6.0 </TD><TD>Added support for Virtex-7 and Kintex-7. </TD></TR></Table><P id="LinkTarget_2723">Notice of Disclaimer </P><P>Xilinx is providing this product documentation, hereinafter “Information,” to you “AS IS” with no warranty of any kind, express or implied. Xilinx makes no representation that the Information, or any particular implementation thereof, is free from any claims of infringement. You are responsible for obtaining any rights you may require for any implementation based on the Information. All specifications are subject to change without notice. XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE </P><P>DS335 March 1, 2011 	<Link>www.xilinx.com </Link></P><Figure><ImageData src="images/fpu_ip_xilinx_ds335_img_35.jpg"/></Figure><P>INFORMATION OR ANY IMPLEMENTATION BASED THEREON, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF INFRINGEMENT AND ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Except as stated herein, none of the Information may be copied, reproduced, distributed, republished, downloaded, displayed, posted, or transmitted in any form or by any means including, but not limited to, electronic, mechanical, photocopying, recording, or otherwise, without the prior written consent of Xilinx </P><P><Link>www.xilinx.com </Link>DS335 March 1, 2011 </P></Sect></Sect></Part></TaggedPDF-doc>