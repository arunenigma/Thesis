<?xml version="1.0" encoding="UTF-8" ?><!-- Created from PDF via Acrobat SaveAsXML --><!-- Mapping Table version: 28-February-2003 --><TaggedPDF-doc><?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/">
         <xmp:CreateDate>2012-07-18T18:35:50Z</xmp:CreateDate>
         <xmp:CreatorTool>Writer</xmp:CreatorTool>
         <xmp:ModifyDate>2012-07-18T18:35:50Z</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Mac OS X 10.7.4 Quartz PDFContext</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>xml</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?><?xpacket end='r'?><bookmark-tree><bookmark title=" 1 Overview"><destination structID="LinkTarget_179"/></bookmark><bookmark title="Table 6-2 shows fp2uint example vectors"><destination structID="LinkTarget_180"/></bookmark></bookmark-tree><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_0.jpg"/>Think Silicon </Figure><P>VLSI Design &amp; Consultancy </P><Part><Sect><H2>DATASHEET </H2></Sect><P>Floating  Converters 
Version 1.0 
</P><Sect><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_1.jpg"/></Figure></Sect></Part><Part><H2 id="LinkTarget_179"> 1 Overview </H2><P>The Think-Silicon Floating Point Converters is a web configurable generator for standard IEEE754 compliant single precision Floating Point to Integer Converters. The generated units support proper round to nearest.</P></Part><Part><H2> 2 Floating Point Numbers </H2><P>The format of the IEEE 754 single precision floating point numbers is shown in the Table 2-1. Table 2-1 IEEE single precision floating point numbers format </P><Sect><Sect><H5>BITS NAME </H5><P>31 sign </P><P>30:23 exponent </P><P>22:0 fraction </P></Sect></Sect><Sect><Sect><H5>DESCRIPTION </H5><P>This is the sign bit. 0 signifies a positive number and a 1 a negative number </P><P>This number defines the power of 2 that is multiplied by the fractional part. It also 
defines if the number is normal. 
These are fractional bits of the number. 
</P></Sect><P>According to IEEE754 standard a floating point single precision number is defined as follows: </P><Sect><P>sign 127−exponent </P><P>number =−1×2×1.  fraction </P></Sect><P>There are also special bit patterns that define +ve and -ve ∞ (infinity) as well as positive and negative ∅ (zero). Those patterns as are also supported and handled according to the standard. </P><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_2.jpg"/>1</Figure><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_1.jpg"/></Figure></Sect></Part><Part><H2> 3 Signed Integer to floating point (sint2fp)</H2><Sect><H3> 3.1 sint2fp Block Diagram </H3><P>The sint2fp module (shown in Figure 3-1) converts signed 32-bit integer to single precision floating point numbers. The module has one input port and an output port and is fully combinatorial. </P><Sect><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_3.jpg"/>sint2fp A[31:0] Res[31:0] <Caption><P>Figure 3-1 The sint2fp block</P></Caption></Figure></Sect></Sect><Sect><H3> 3.2 sint2fp Port Interface </H3><P>The ports of the module are listed in Table 3-1. Table 3-1 sint2fp module port list </P><Table><TR><TH>PORT </TH><TH>TYPE </TH><TH>DESCRIPTION </TH></TR><TR><TD>A[31:0] </TD><TD>input </TD><TD>Signed 32bit integer in 2's complement </TD></TR><TR><TD>RES[31:0] </TD><TD>output </TD><TD>IEEE754 Single precision floating point number</TD></TR></Table></Sect><Sect><H3> 3.3 Interfacing sint2fp </H3><P>The design is fully combinatorial, thus should you require to pipeline the unit, you are advised to do so at the synthesis level, using a balanced registers technique that will provide better results for your target technology.</P></Sect><Sect><H3> 3.4 sint2fp Example Vectors </H3><Sect><P>00000000 00000001 00000002 ffffffff fffffffe 7fffffff 80000000 </P></Sect><Table><Caption><P>Table 3-2 shows sint2fp example vectors Table 3-2 sint2fp example vectors </P></Caption><TR><TH>00000000 (0.0) </TH><TD>Zero returns a positive 0 fp </TD></TR><TR><TH>3f800000 (1.0) </TH><TD/></TR><TR><TH>40000000 (2.0) </TH><TD/></TR><TR><TH>bf800000 (-1.0) </TH><TD/></TR><TR><TH>C0000000 (-2.0) </TH><TD/></TR><TR><TH>4f000000 (2147483648) </TH><TD>Rounded </TD></TR><TR><TH>cf000000(-2147483648) </TH><TD/></TR></Table><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_4.jpg"/>2</Figure><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_1.jpg"/></Figure></Sect></Part><Part><H2> 4 Unsigned Integer to floating point (uint2fp)</H2><Sect><H3> 4.1 uint2fp Block Diagram </H3><P>The uint2fp module (Figure 4-1) converts unsigned 32-bit integer to single precision floating point numbers. The module has one input port and an output port and is fully combinatorial. </P><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_5.jpg"/>uint2fp A[31:0] Res[31:0] <Caption><P>Figure 4-1 uint2fp Block Diagram</P></Caption></Figure></Sect><Sect><H3> 4.2 uint2fp Port Interface </H3><P>The ports of the module are listed in Table 4-1. Table 4-1 uint2fp Port Interface </P><Table><TR><TH>PORT </TH><TH>TYPE </TH><TH>DESCRIPTION </TH></TR><TR><TD>A[31:0] </TD><TD>Input </TD><TD>Unsigned 32bit integer </TD></TR><TR><TD>RES[31:0] </TD><TD>Output </TD><TD>IEEE 754 Single precision floating point number</TD></TR></Table></Sect><Sect><H3> 4.3 Interfacing uint2fp </H3><P>The design is fully combinatorial, thus should you require to pipeline the unit, you are advised to do so at the synthesis level, using a balanced registers technique that will provide better results for your target technology.</P></Sect><Sect><H3> 4.4 uint2pdf Example Vectors </H3><P>Table 4-2 shows uint2fp example vectors. Table 4-2 uint2fp example vectors </P><Sect><H5>SIGNED INTEGER </H5><P>00000000 00000001 00000002 ffffffff </P></Sect><Sect><H5>RESULT </H5><P>00000000 (0.0) 3f800000 (1.0) 40000000 (2.0) 4f800000 (4294967296) </P></Sect><Sect><H5>COMMENTS </H5><P>Zero returns a positive 0 fp </P><P>Rounded </P><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_6.jpg"/>3</Figure><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_1.jpg"/></Figure></Sect></Sect></Part><Part><H2> 5 Floating point to Signed integer (fp2sint)</H2><Sect><H3> 5.1 fp2sint Block Diagram </H3><P>The fp2sint module (Figure 5-1) converts single precision floating point numbers to signed 32-bit integers. The module has one input port and an output port and is fully combinatorial. </P><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_7.jpg"/>fp2sint A[31:0] Res overflow underflow NaN <Caption><P>Figure 5-1 fp2sint Block Diagram</P></Caption></Figure></Sect><Sect><H3> 5.2 fp2sint Port Interface </H3><P>The ports of the module are listed in Table 5-1. </P><Table><Caption><P>Table 5-1 fp2sint Port Interface 
</P></Caption><TR><TD>PORT </TD><TD>TYPE </TD></TR><TR><TD>A[31:0] </TD><TD>Input </TD></TR><TR><TD>RES[31:0] </TD><TD>Output </TD></TR><TR><TD>overflow </TD><TD>Output </TD></TR><TR><TD>underflow </TD><TD>Output </TD></TR><TR><TD>NaN </TD><TD>Output </TD></TR></Table><Sect><P>DESCRIPTION </P></Sect><P>Signed 2's complement 32bit integer IEEE754 Single precision floating point numer Signifies that the number is larger than what can be represented Signifies that the number is smaller than what can be represented Not-a-number. Set when the input is a NaN or infinity.</P></Sect><Sect><H3> 5.3 Interfacing fp2sint </H3><P>The design is fully combinatorial, thus should you require to pipeline the unit, you are advised to do so at the synthesis level, using a balanced registers technique that will provide better results for your target technology. Note that NaN will also be set for -/+ ∞ infinity, but this will also set the overflow (for positive infinity +∞) or underflow (for negative infinity -∞).</P></Sect><Sect><H3> 5.4 fp2sint Example Vectors </H3><P>The Table 5-2 shows fp2sint example vectors. </P><Table><Caption><P>Table 5-2 fp2sint example vectors. </P></Caption><TR><TH>FLOATING POINT </TH><TH>INTEGER </TH><TH>COMMENTS </TH></TR><TR><TD>7f800000 (+inf) </TD><TD>7fffffff </TD><TD>Overflow &amp; NaN </TD></TR><TR><TD>FF800000 (-inf) </TD><TD>80000000 </TD><TD>Underflow &amp; NaN </TD></TR></Table><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_8.jpg"/>4</Figure><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_1.jpg"/></Figure><P>FFC00000 (NaN) 00000000 (+0) 80000000 (-0) 3F800000 (+1) BF800000 (-1) 40000000 (+2) C0000000 (-2) 3e800000 (0.25) BE800000 (-0.25) 3F000000 (+0.5) BF000000 (-0.5) 3F400000 (+0.75) BF400000 (-0.75) 7F7FFFFF (max+ve) FF7FFFFF (max-ve) 00000001 (min+ve) 80000001 (min-ve) 00000000 00000000 00000000 00000001 ffffffff 00000002 fffffffe 00000000 00000000 00000001 ffffffff 00000001 ffffffff 7fffffff 80000000 00000000 00000000 </P><Sect><P>NaN 
</P><P>rounded rounded rounded rounded rounded rounded Overflow set Underflow set Denormal to zero Denormal to zero </P></Sect><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_9.jpg"/>5</Figure><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_1.jpg"/></Figure></Sect></Part><Part><H2> 6 Floating point to Unsigned integer (fp2uint)</H2><Sect><H3> 6.1 fp2uint Block Diagram </H3><P>The fp2uint module (Figure 6-1) converts single precision floating point to unsigned 32-bit integer numbers. The module has one input port and an output port and is fully combinatorial. </P><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_10.jpg"/>fp2uint A[31:0] Res[31:0] overflow underflow NaN <Caption><P>Figure 6-1 fp2uint Block Diagram</P></Caption></Figure></Sect><Sect><H3> 6.2 fp2uint Port Interface </H3><P>The ports of the fp2uint module are listed in Table 6-1. </P><Table><Caption><P>Table 6-1 fp2uint Port Interface 
</P></Caption><TR><TD>PORT </TD><TD>DIRECTION </TD></TR><TR><TD>A[31:0] </TD><TD>Input </TD></TR><TR><TD>RES[31:0] </TD><TD>Output </TD></TR><TR><TD>overflow </TD><TD>Output </TD></TR><TR><TD>underflow </TD><TD>Output </TD></TR><TR><TD>NaN </TD><TD>Output </TD></TR></Table><P>DESCRIPTION </P><P>Signed 2's complement 32bit integer IEEE754 Single precision floating point number Signifies that the number is larger than what can be represented Signifies that the number is smaller than what can be represented Not-a-number. Set when the input is a NaN or infinity.</P></Sect><Sect><H3> 6.3 Interfacing fp2uint </H3><P>The design is fully combinatorial, thus should you require to pipeline the unit, you are advised to do so at the synthesis level, using a balanced registers technique that will provide better results for your target technology. Note that NaN will also be set for -/+ ∞ infinity, but this will also set the overflow (for positive infinity +∞) or underflow (for negative infinity -∞).</P></Sect><Sect><H3> 6.4 fp2uint Example Vectors </H3><P id="LinkTarget_180">Table 6-2 shows fp2uint example vectors </P><Table><Caption><P>Table 6-1 fp2uint example vectors </P></Caption><TR><TH>FLOATING POINT </TH><TH>INTEGER </TH><TH>COMMENTS </TH></TR><TR><TD>7f800000 (+inf) </TD><TD>ffffffff </TD><TD>Overflow &amp; NaN </TD></TR><TR><TD>FF800000 (-inf) </TD><TD>00000000 </TD><TD>Underflow &amp; NaN </TD></TR></Table><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_11.jpg"/>6</Figure><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_1.jpg"/></Figure><P>FFC00000 (NaN) 00000000 (+0) 80000000 (-0) 3F800000 (+1) BF800000 (-1) 40000000 (+2) C0000000 (-2) 3e800000 (0.25) BE800000 (-0.25) 3F000000 (+0.5) BF000000 (-0.5) 3F400000 (+0.75) BF400000 (-0.75) 7F7FFFFF (max+ve) FF7FFFFF (max-ve) 00000001 (min+ve) 80000001 (min-ve) 00000000 00000000 00000000 00000001 00000000 00000002 00000000 00000000 00000000 00000001 00000000 00000001 00000000 ffffffff 00000000 00000000 00000000 </P><P>NaN </P><P>Underflow set </P><P>Underflow set Rounded Rounded (underflow not set, this is a valid rounding to zero) rounded Underflow set Rounded Underflow set Overflow set Underflow set Denormal to zero Denormal to zero </P><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_12.jpg"/>7</Figure><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_1.jpg"/></Figure></Sect></Part><Part><H2> 7 Generator Usage </H2><P>The Floating Point Converters generator employs a graphical web user interface (GUI) for configuring the arithmetic converter modules. In order to use the GUI you must sign-in Think Silicon Ltd web site. If already registered, click on Sign-in link in the upper, right side of the web page. Otherwise click on the Register link first and follow the instructions. As soon as you sign-in the second GUI page (Figure 7-1) appears. </P><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_13.jpg"/><Caption><P>Figure 7-1 Floating Point Converters Generators GUI </P></Caption></Figure><P>The user is able to tick in the boxes in order choose which arithmetic conversion modules will be generated. Press the Generate button in order to generate the arithmetic conversion modules of your choice.</P></Part><Part><Sect><H2> 8 Deliverables </H2></Sect><P>The package generated with Floating Point Converters consists of the present document and source code files in Verilog<Link>TM 1</Link> HDL and C anguage. The files are listed in Table 8-1. </P><P>Table 8-1 Floating Point Converters Deliverables </P><Sect><P>FILE ./uint2fp/uint2fp.v ./uint2fp/tb_vectors.v ./uint2fp/gen_vectors.c ./uint2fp/Makefile </P><P>./fp2uint/fp2uint.v ./fp2uint/tb_vectors.v ./fp2uint/gen_vectors.c ./fp2uint/Makefile </P></Sect><P>DESCRIPTION </P><Sect><P>The uint2fp module The uint2fp testbench Test Vector generator for uint2fp module Makefile for uint2fp simulation scripts </P><P>The p2uint module The p2uint testbench Test Vector generator for p2uint module Makefile for p2uint simulation scripts </P></Sect><P>Verilog is a trademark of Cadence Design Automation.(http://www.cadence.com) 
</P><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_14.jpg"/>8</Figure><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_1.jpg"/></Figure><Sect><P>FILE ./fp2sint/fp2sint.v ./fp2sint/tb_vectors.v ./fp2sint/gen_vectors.c ./fp2sint/Makefile </P><P>./sint2fp/sint2fp.v ./sint2fp/tb_vectors.v ./sint2fp/gen_vectors.c ./sint2fp/Makefile </P><P>./parameters.txt </P><P>./doc/TSi_fp_conv.pdf </P></Sect></Part><Part><Sect><H2> 9 Verification </H2></Sect><Sect><H5>DESCRIPTION </H5><Sect><P>The p2sint module The p2sint testbench Test Vector generator for p2sint module Makefile for p2sint simulation scripts </P><P>The sint2fp module The sint2fp testbench Test Vector generator for sint2fp module Makefile for sint2fp simulation scripts </P><P>Floating Point Converters configuration file </P><P>The present document</P></Sect><P>The Verification Flow Diagram of the Floating Point IP cores is shown in Figure 8-1. 
</P><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_15.jpg"/>gen vectors.c fp_vectors.txt tb vectors.v Pass or Fail </Figure><P>Converter in *.v </P><P>Figure 8-1 Verification Flow Diagram </P><P>The testbench is based on gcc and the Icarus Verilog simulator and we assume these are installed in your system. In order to generate test vectors and run the verification tests for the Floating Point IP cores, enter the commands shown in Figure 8-2 in a command line shell. </P><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_16.jpg"/>9</Figure><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_1.jpg"/></Figure><Sect><P>&gt;cd ./src/sint2fp &gt;make </P><P>&gt;cd ./src/uint2fp &gt;make </P><P>&gt;cd ./src/fp2sint &gt;make </P><P>&gt;cd ./src/fp2unit &gt;make </P></Sect><P>Figure 8-2 Verification commands </P><P>This should automatically compile the test vector generator and start the simulator. The simulator finishes with a pass or fail. The test vector generator and the netlist are written is standard C and VerilogTM <Link>2</Link>, so other compilers and Simulators, such as NCVerilog<Link>TM 3</Link> and MTI Modelsim<Link>TM 4</Link> can be used. </P><P>2 Verilog is a trademark of Cadence Design Automation, UK (http://www.cadence.com) 3 NCVerilog is a trademark of Cadence Design Automation, UK (http://www.cadence.com) 4 MTI Modelsim is a trademark of Mentor Graphics (http://www.mentor.com) </P><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_17.jpg"/>10</Figure><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_1.jpg"/></Figure><P>Contact: </P><P>Think Silicon Ltd </P><P>Suite Β12 Patras Science Park Rion Achaias 26504 </P><Table><TR><TH>Greece </TH></TR><TR><TH>web: </TH><TD><Link>http://www.think-silicon.com </Link></TD></TR><TR><TH>email: </TH><TD><Link>info@think-silicon.com </Link></TD></TR><TR><TH>Tel: </TH><TD>+30 2610 911543 </TD></TR></Table><Figure><ImageData src="images/fpu_ip_thinksilicon_converter_int2float_img_18.jpg"/>11</Figure></Sect></Part></TaggedPDF-doc>