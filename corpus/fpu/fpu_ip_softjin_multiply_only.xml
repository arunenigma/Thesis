<?xml version="1.0" encoding="UTF-8" ?><!-- Created from PDF via Acrobat SaveAsXML --><!-- Mapping Table version: 28-February-2003 --><TaggedPDF-doc><?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>xml</dc:format>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>barun</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Microsoft Word - FloatingPoint_Mult_datasheet</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/">
         <xmp:CreateDate>2009-10-29T16:31:25</xmp:CreateDate>
         <xmp:CreatorTool>PScript5.dll Version 5.2</xmp:CreatorTool>
         <xmp:ModifyDate>2009-10-29T16:31:25</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>GPL Ghostscript 8.15</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?><?xpacket end='r'?><Part><H3>FLOATING POINT MULTIPLIER IP 
</H3><Sect><Figure><ImageData src="images/fpu_ip_softjin_multiply_only_img_0.jpg"/></Figure><P>Introduction: </P><P>Floating Point numbers represented in IEEE 754 format are used in most of the DSP Processors. Floating point arithmetic is useful in applications where a large dynamic range is required or in rapid prototyping applications where the required number range has not been thoroughly investigated. </P><P>The Floating Point Multiplier IP helps designers to perform floating point Multiplication on FPGA represented in IEEE 754 single precision floating point format. </P><P>Functional Description: </P><P>A Floating point multiplier is the most common element in most digital applications such as digital </P><Table><TR><TH>filters, </TH><TH>digital </TH><TH>signal </TH><TH>processors, </TH><TH>data </TH><TH>processors </TH></TR><TR><TH>and control units. </TH><TD/><TD/><TD/><TD/><TD/><TD/></TR><TR><TH>The </TH><TD>present Floating </TD><TD>Point </TD><TD>Multiplier </TD><TD>IP </TD><TD>has </TD><TD>three </TD></TR></Table><P>blocks sign calculator, exponent calculator, mantissa calculator, which works parallel and a normalization unit. </P><P>The Multiplier is pipelined, so the first result appears after the latency period and then the result can be obtained after every clock cycle. </P><P>Features: </P><P>Y Available for wide range of FPGA families Y Pipelined Y Compliance with IEEE 754 standard Y Single precision real floating point support Y Supports Overflow, Underflow, Invalid </P><P>operation flags Y Simple Interface Y Optimized for Speed and Latency Y Fully Synchronous design with single clock Y Compatible, Flexible and integrable with other </P><P>modules </P><P>Description: </P><P>Figure 1 shows the Schematic Symbol of Floating Point Multiplier. It takes two IEEE 754 format single precision floating point numbers and produces the multiplied output. It also supports the features like underflow, overflow and invalid operations. </P><P>Figure 2 shows the implementation of Floating point Multiplier unit. The Unit consists of two stages,multiplication calculation and Normalization. </P><P>The first stage consists of the following three blocks which work in parallel. </P><P>Sign Calculator: The Output Sign is the exor of two </P><Table><TR><TH>sign bit inputs. </TH><TH/><TH/><TH/></TR><TR><TD>Exponent Calculator: added and the bias exponent of Output. </TD><TD>Tis </TD><TD>he re</TD><TD>input moved </TD><TD>exto </TD><TD>ponents produce </TD><TD>are the </TD></TR></Table><P>Mantissa Calculator: Output Mantissa is calculated by multiplying the mantissa's of two inputs. </P><P>Second stage performs Normalization of the Output obtained from the first stage. </P><P>Normalization Block: The normalization is the last and most complicated part. This block is implemented in three pipelined stages. </P><P>This block first calculates how much amount the mantissa needs to be left shifted. The mantissa is processed in parallel in a number of modules, each looking at four bits of the mantissa. </P><P>The first module looks at first four bits of the mantissa and outputs the amount to be shifted assuming a one was found on these four bits. The second module operates on the next four bits of the mantissa treating first four bits are zero and outputs the amount to be shifted left. </P><P>Symbolic Diagram: </P></Sect><P>SoftJin Technologies Pvt. Ltd.India: 102, 1st Floor, Mobius Tower, SJR iPark, EPIP, White Field, BANGALORE – 560 066, Karnataka, India, Tel: 918041779999, Fax: 918041157070 US: 2900 Gordon Ave, Suite 10011, Santa Clara, CA 95051, USA, Tel: (408) 7731714, Fax: (408) 7731745 Email: sales@softjin.com Web: www.softjin.com Page | 1 </P><Sect><Figure><ImageData src="images/fpu_ip_softjin_multiply_only_img_0.jpg"/></Figure></Sect><Figure><ImageData src="images/fpu_ip_softjin_multiply_only_img_1.jpg"/></Figure><P>Figure1 : Schematic Block Diagram </P><Sect><P>Implementation: </P></Sect><Figure><ImageData src="images/fpu_ip_softjin_multiply_only_img_2.jpg"/></Figure><P>Figure2 : Implementation </P><Sect><P>Signal Table : </P></Sect><Table><TR><TH>Signal </TH><TH>Direction </TH><TH>Data Width </TH><TH>Description </TH></TR><TR><TD>InA </TD><TD>IN </TD><TD>32 </TD><TD>First Input </TD></TR><TR><TD>InB </TD><TD>IN </TD><TD>32 </TD><TD>Second Input </TD></TR><TR><TD>clk </TD><TD>IN </TD><TD>1 </TD><TD>Global Clock </TD></TR><TR><TD>rst </TD><TD>IN </TD><TD>1 </TD><TD>Active low Reset </TD></TR><TR><TD>Out </TD><TD>OUT </TD><TD>32 </TD><TD>Multiplier Output </TD></TR><TR><TD>Of </TD><TD>OUT </TD><TD>1 </TD><TD>Overflow Flag </TD></TR><TR><TD>Uf </TD><TD>OUT </TD><TD>1 </TD><TD>Underflow Flag </TD></TR><TR><TD>Invalid </TD><TD>OUT </TD><TD>1 </TD><TD>Invalid Output Flag </TD></TR></Table><P>Table 1: Signal Definition Table </P><P>SoftJin Technologies Pvt. Ltd.India: 102, 1st Floor, Mobius Tower, SJR iPark, EPIP, White Field, BANGALORE – 560 066, Karnataka, India, Tel: 918041779999, Fax: 918041157070 US: 2900 Gordon Ave, Suite 10011, Santa Clara, CA 95051, USA, Tel: (408) 7731714, Fax: (408) 7731745 Email: sales@softjin.com Web: www.softjin.com Page | 2 </P><Sect><Figure><ImageData src="images/fpu_ip_softjin_multiply_only_img_0.jpg"/></Figure><P>This process is repeated for the remaining bits of mantissa. Signals are generated if the four bits of the mantissa are zero. Depending on the signal values the amount of shift is selected. This selection is implemented in three multiplexer stages. </P><P>Performance: </P><P>Depending on the two leading bits of final mantissa, the final mantissa is shifted left by previously calculated shift amount or shifted right. The final exponent is also corrected accordingly. </P></Sect><Table><TR><TH>Device </TH><TH>Slice Count </TH><TH>Frequency (MHz) </TH></TR><TR><TD>Virtex4 (XC4VLX25FF676) </TD><TD>848 </TD><TD>199.2 </TD></TR><TR><TD>Virtex5 (XC5VLX50FF324) </TD><TD>872 </TD><TD>207.04 </TD></TR></Table><P>Table 2: Performance table. </P><Sect><P>Verification: </P><P>The Floating point Multiplier IP has been verified with the following approaches: </P><Table><TR><TH>Y </TH><TD>Exhaustive Functional/Timing simulation </TD></TR><TR><TH>Y </TH><TD>Results are compared with the Ccode </TD></TR><TR><TH/><TD>generated results and Behavioral model results </TD></TR><TR><TH>Y </TH><TD>Emulation on Xilinx FPGA board </TD></TR></Table><P>Deliverables: </P><Table><TR><TH>Y </TH><TD>Verilog Behavioral, RTL source code </TD></TR><TR><TH>Y </TH><TD>Test Benches </TD></TR><TR><TH>Y </TH><TD>Ccode for generation of test vectors </TD></TR><TR><TH>Y </TH><TD>Detailed user documentation </TD></TR></Table></Sect><P>SoftJin Technologies Pvt. Ltd.India: 102, 1st Floor, Mobius Tower, SJR iPark, EPIP, White Field, BANGALORE – 560 066, Karnataka, India, Tel: 918041779999, Fax: 918041157070 US: 2900 Gordon Ave, Suite 10011, Santa Clara, CA 95051, USA, Tel: (408) 7731714, Fax: (408) 7731745 Email: sales@softjin.com Web: www.softjin.com Page | 3 </P></Part></TaggedPDF-doc>